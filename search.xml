<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Autolayout小技巧</title>
    <url>//autolayoutxiao-ji-qiao</url>
    <content><![CDATA[<p>iOS开发UI一直是一个问题，当年用代码画UI一度成为流行趋势，相信代码能万能解决问题，而且十分简单。</p>
<p>然而，现在由于iOS设备的不断迭代，市场上常见的iPhone设备就会有：</p>
<ol>
<li><p> iPhone4/4S 960<em>640 (480</em>320 @2x)</p>
</li>
<li><p> iPhone5/5S 1136<em>640 (568</em>320 @2x)</p>
</li>
<li><p> iPhone6 1334*750(667*375 @2x)</p>
</li>
<li><p> iPhone6 Plus 1920*1080(736*414 @3x)-&gt;(2208*1242)</p>
</li>
</ol>
<p>加上iPad以后，还会有一个1024<em>768(@1x) 和 2048</em>1536(@2x) 原来想要做一个自适应的，同时支持iPhone和iPad的应用，就算用代码来画UI，也是十分简单的。而现在，在这总共3类，5种，7状态的iOS设备面前，就会有点力不从心了，更别说以后想要做WatchOS的开发就会遇到很多问题，而Autolayout的解决方法的提出大大简化了这一过程</p>
<blockquote>
<p>Autolayout，就是通过一系列的约束条件来控制一个UIView在视图中的位置，同时还要配合Size Classes(兼容iOS8之后的设备)</p>
</blockquote>
<p>1、对于一个TableView，我们只需要设置它的Leading、Trailing、Top、Bottom临接到根View即可让它永远全屏显示，无论设备像素。而且，重要的一点，就是在Attribute Inspector中，要把这些距离设置为Standard（或者是0），这样才能在不同设备中获得推荐的显示效果（如果不是Standard或者0的话，就要小心了，这些就是所谓的魔法数字，很可能不同尺寸设备上显示效果会有所差别）</p>
<p>2、对于有事想要使两个View沿着一条中线水平对齐在两侧，这个时候就需要一点点小技巧，比如说，你可以拿一个空的View放在中线上，设置Hidden，宽度为0，然后两边两个View跟这个空View对齐即可。同样的方法也很适合于想要调整两个View的比例，可以选中对应的约束条件，在multiplier中设置比例。</p>
<p>3、有时候实在解决不了，就需要我们使用Size Classes来根据不同Size来设置了。默认的Size Classes是Any Any，对于iPhone来说，除了iPhone 6 Plus的横屏模式，其他情况下都是长宽紧凑的，所以很好设置，对iPhone 6 Plus如果想优化的话，就选择长正常宽紧凑的模式，然后单独设置。iPad由于都是长宽正常的，所以一般单独就做一个Size Classes就好。</p>
<p>4、学会用Storyboard，传统的Xib固然很不错，但是Storyboard也可以作为很好的团队开发助力，不要把所有的视图放在一个Storyboard，可以一个Storyboard一两个视图，把逻辑相关的非常精简的视图放在一个Stoyboard中更能提供开发效率，而总是一个Xib一个Xib关联反而会很凌乱。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>2016年末总结和近期感想</title>
    <url>/2016/12/31/2016%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93%E5%92%8C%E8%BF%91%E6%9C%9F%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<blockquote>
<p>年后的最后一天，也是该总结一下这一年的成长了。</p>
</blockquote>
<h1 id="从校园到实习"><a href="#从校园到实习" class="headerlink" title="从校园到实习"></a>从校园到实习</h1><p>软件专业的大三学年，如果你不考研留学的话，说起来都是会走实习加校招的流程。自己这年印象最深的，也就是整个下半年的实习，面试，以及现在的实习了。</p>
<p>大三上的实习当时自己错过了机会，只进入了一个普通的互联网公司，但是也学到了更多校园中无法见到的东西（比如多移动App多Project管理，MapKit，React Native），开阔了一点眼界。真正的下半年好几个月都在忙着校招面试相关的东西，从中也总结了一些经验吧（虽然不知道对社招是否有帮助）。然而到现在，从南京来到了北京，提前过来头条这边实习。</p>
<p>实习开始都是兴奋和好奇的，因为可以看到公司的各种设施，福利，还有认识各式各样的人。来这边也是专门拉了两个同公司的应届生一起来，也挺愉快的。公司离得近，组里的人也都比较厉害（至少都是我请教别人教育的情形），虽然上班累了些，但是感觉自己成长也是非常的大，很难想象假如不来实习，全靠自己摸索，明年直接毕业过来上班自己是什么样的水平。</p>
<h1 id="近期工作感想"><a href="#近期工作感想" class="headerlink" title="近期工作感想"></a>近期工作感想</h1><p>来到头条这边也刚刚好一个月了把。这期间最大的感触，就是自己的工作和产品将会面对的是上千万级别的日活用户，而且不同于之前的实习那样一人负责非常小的业务，看看需求，写写代码，测试简单过一遍，直接就git提上去了。在这里，整个工作流都是有专门有PM跟，并且开发都是自己checkout分支不断merge，节奏更是快了不少。提测流程也是更加的严格，因为现在你开发的产品不再是发展启蒙阶段的不完成品，一个需求如果不能覆盖好完整的边界情况，宁愿不要这个功能，也不能带着一点侥幸心理上线。在千万级别使用量的冲击下，任何情况都可能发生。因此一定要做好特殊情况的处理。</p>
<p>同时，在产品达到一定规模，我也越发察觉到AB测试、开关、日志监控和报警功能的重要性了。移动App不同于Web前端，一旦发一个版出去，那么就得考虑对应的兼容性和留存率。一旦出现线上Bug，立即发现并且关闭对应的功能是非常重要的解决方式，之后可以再考虑使用热修复技术来对旧版本进行处理。来这里可以看到各种功能都考虑了埋点，日志，还有AB测的开关。在校园期间自己接触开发流程中少了很多关于这方面的意识，正需要借此多加注意。</p>
<h1 id="工作中的技术问题"><a href="#工作中的技术问题" class="headerlink" title="工作中的技术问题"></a>工作中的技术问题</h1><h2 id="AVFoundation的注意"><a href="#AVFoundation的注意" class="headerlink" title="AVFoundation的注意"></a>AVFoundation的注意</h2><p>由于有需求要做录像和人脸识别相关的东西，因此自己才真正使用了AVFoundation这个Apple提供的媒体库。虽然你可以简单的在SF上搜到一堆答案，但是真实的开发有很多潜在的问题。尤其是这种涉及到硬件层面的API，稍不留神就会报Crash。</p>
<p>比如最常见的问题，用来保持一个输入设备到输出设备的会话，会用到Session，而AVFoundation中的这个<code>AVCaptureSession</code>的很多方法，都是阻塞的。简单的启动录制流<code>- startRunning</code>方法也是阻塞线程的（这一点在文档中有说明，需要注意），要使用一个单独的concurrent queue来处理，并且还要记得dispatch到mainQueue上来供外部UIKit的使用，不然其实看起来表面上UI是正常的，但是整个UIResponser就会受到影响。其他的还有比如修改输入流，输出流的配置（比如视频流的方向，帧率之类）的配置时候，也得配合<code>- beginConfiguration</code>和<code>- commitConfiguration</code>，不然会出现线程冲突的问题。</p>
<p>还有的坑点，不同于ImagePicker，AVFoundation的采集回调也需要你手动指定线程，比如<code>AVCaptureAudioDataOutputSampleBufferDelegate</code>可以用来持续的采集buffer来生成对于的Image，进而用于<code>OpenCV</code>或者自带的<code>CIDetercor</code>做人脸识别的持续追踪。但是在调试时候没有注意到回调在非主线程而进行了UI操作导致各种的问题，浪费了很多时间，看来自己理论上的知识和实际的经验还需要再磨练一些。</p>
<h2 id="手动处理单向数据流的坑"><a href="#手动处理单向数据流的坑" class="headerlink" title="手动处理单向数据流的坑"></a>手动处理单向数据流的坑</h2><p>因为之前一直在看一些React呀，Rx系列的东西，所以见到一个需求看到对应的页面状态不多，就想试试用这种单项绑定数据流来写。由于App对包大小比较敏感，也没有引入<code>ReactiveCocoa</code>，自己参考着React的Redux一般，放了一个单独的Store Model来作为状态的Store，同时定义了十几种状态。所有的View层（View和ViewController）的交互导致的状态变化，模型变化必须通过ViewModel的调用才能修改Store Model，而Model的数据校验也都丢到了ViewModel里面。这就形成了类似Redux那种View(View／ViewController) -&gt; Action(ViewModel) -&gt; Store(Model) -&gt; View的单项数据流动。</p>
<p>看起来一切都很美好，但是实际写起来就发现简单照搬的单向数据流的问题了。随着需求的变动，经常会有那种需要你这一个ViewController实例的某些操作后同步到其他ViewController的UI上（比如用户交互或者网络请求的响应改变了Store Model，在导航栈上前几个页面也需要刷新UI），按照最笨的写法那种在当前的ViewController绑定一个callback或者delegate回调肯定是不好的（虽然我之前也这么写过，参考了Android的Intent也是这样子做的）。但是参考的Redux的管理方式下，其实是不会特别考虑这种情况的，因为React的render方法会在你的props变动的时候触发，你最多可以判断一下是不是需要rerender就行了。然而在原生App中，你几乎总是避免rerender，只是改变某些UI的属性罢了。</p>
<p>最开始我的解决策略是放到了<code>ViewWillAppear</code>中，强行Switch了当前的状态来传递Model到View层。但是这种情况下会导致把你的正常View逻辑也写的特别乱（得有各种判断）。更可怕的是当你的ViewController并不是一对一绑定给真正的页面，而是一个ViewController模版对应五六种类似页面布局的ContainerView时，你就可以发现代码中会有好几处不同的Switch。这并不是一个好的架构。现在的解决方案是通过ViewModel绑定了所有ViewController的弱引用，在ViewModel通用的状态处理逻辑中判断，并且直接调用ViewController的updateViews，继而走到真实的某个View的UI刷新方法中。但是这样做的缺点就是你的ViewModel逻辑会同时包括了第一次初始化和更新的东西，这就是比较让人麻烦的地方。也试过KVO来绑定了View，但是由于我的ViewController本身就是个通用模版，绑定的真实实例和销毁时机也得判断，所以Pass……</p>
<p>现在想想，ReactiveCocoa这种双向数据绑定解决方案，确实是实现Reactive Programming所需要的。没有了数据绑定，整个开发流程的效率深知会降低到手动处理状态之下。绑定后开发者不需要再手动处理update的时机，只需要提前在view中定义一套映射，viewModel只需要处理Model的变化，也不需要管是否需要回调viewController的update情况了。</p>
<h1 id="明年的简单打算"><a href="#明年的简单打算" class="headerlink" title="明年的简单打算"></a>明年的简单打算</h1><p>基本上，明年就是真正的毕业生和在职人员了。公司不会像学校那样随心所欲，估计到时候自由时间将会少了很多。技术方面，感觉自己在移动开发这条路上还是可以走下去的，只不自己重点想关注偏工程和中间层技术的领域，比如之前看的一些网络中间件，模型保护，日志监控之类。虽然之前发了一部分关于Core Animation的东西，但是发现UI这部分真的并不是特别感兴趣，自己的目标也就在能够完成基本的需求下和简单的绘图动画即可。</p>
<p>还有的方面，新的一年要多接触接触领域圈子内和圈子外的人。老实说自己的交际能力还是非常欠缺的，无论是做移动的技术圈子，还是同学朋友的生活圈子，都需要更为关注。在学校能够只关心眼前事，但是到社会上是远远不够的。一个人的能力再强，处境再好，总比不上周围的朋友和同事的协力。</p>
<p>就这样吧，2016将要过去，明年将是一个更新，也更加充满机遇的一年。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>20岁的生日，或许应有些感想</title>
    <url>//20sui-de-sheng-ri-huo-xu-ying-you-xie-gan-xiang</url>
    <content><![CDATA[<p>首先，祝自己生日快乐，自己迎来了第20个春秋。</p>
<p>20岁，意味着自己早已脱离了当年年少无知的懵懂，应该肩负起属于自己的责任，应当直面这纷杂世界的各式问题。在进入大学的一年里，感受最多的，便是人际关系的重要性、做事的担当性，并再一次认识到自己存在的关于个人性格方面的一些问题。</p>
<p>我的性格第一次变化，是在初中的时候。小学的我比较单纯，认为学校同学就是一切，听老师的话（多么好的一个孩子呀……），个性也是羞涩而带点自卑。而到了初中，渐渐地开朗了起来，敢与老师争，能和同学扯。高中时期，或许更是如此吧，但是感觉经过高三（高考）的压榨之后，整个人开始多虑了起来，开始犹豫了起来，不再积极地去招呼他人，去帮助他人，遇到问题也总是自己处理。我现在也体会到了高考的一定负面影响。</p>
<p>回到正题，大学一年过去了，我从一个初入校门的新生，如今也成为了他人口中的学长。大学第一年的开头，我是满怀着希望和热情，想改变自己，想证明自己。大一一年中，我加入了各种社团，并且也努力地学好课程（虽然成绩不是非常优异:-P）。大一上学期，各种活跃，与学长们关系也是挺不错的。</p>
<p>下学期到了，我却渐渐冷却下来了。一方面是感到了学业压力的真实性，更重要的一方面，是自己对自己未来的一种迷茫。曾经的我，一直想着大学完继续读研，以保研为第一目标。但是之后看到许多学长的表现。周围的人，有的全力走ACM，有的人专注于接项目自己开发，而学校的课程安排又确实让我总觉得自己当年是选错了专业。（真的，有时候会这样想）。于是，整个人就有些迷茫了。</p>
<p>这份迷茫也许还将伴随着我，毕竟，截止到现在，我仍然没有放弃去读研的念头。毕竟，我觉得自己并没有真正成熟到能够直接进入工作的地步，或许再等我一学期，我就会有了最终的决定了吧。</p>
<p>也许，总体上说自己确实成长了一些，能够毫不胆怯地向陌生人搭话，能够积极地站在他人面前，能够主动参与活动而不是以前被动接受……但是，反思自己还是没有真正有一名作为成年人的自觉，责任意识不够，更少了一份与他人打交道，圆滑的能力（现在觉得，这份能力真的是非常重要，不是世故，而是真正社会上交流所需要的），在这后半学期之中，或许，我将慢慢地去向着更为成熟的自己去努力吧。</p>
<p>好了，感想先到这里，给自己以目标，让自己前进，20岁，我应当开始了。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/e/6a/4314fc89c9ec5554d88cb9526a533.jpg"></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>CocoaPods资源管理—Data Asset最低部署版本的坑</title>
    <url>/2021/07/16/CocoaPods%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E2%80%94Data-Asset%E6%9C%80%E4%BD%8E%E9%83%A8%E7%BD%B2%E7%89%88%E6%9C%AC%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>自己很早之前曾经写过一些CocoaPods管理Resource资源的文章：<a href="https://bytedance.feishu.cn/wiki/wikcnJUiDWMmCbkSnfFvYpcMT0f">CocoaPods的资源管理和Asset Catalog优化</a> ，当时列举了对普通图片类型的管理方式和一些用法，也普及了一下UIImage获取Bundle去加载不在mainBundle图像的方式。</p>
<p>但是苹果早在iOS 9，Xcode 7时代，苹果就已经推出了Data Asset的概念，并在随后的Xcode，尤其是Xcode 10中，为Data Asset提供了App Slicing的能力（即App Store提审包会根据选择的不同设备/内存/分辨率/GPU/CPU，最终下载到唯一匹配的一份文件），这个功能渐渐地开始被一些国内开发者使用。</p>
<p>在NSHipster这里，有一篇专门的文章介绍：《<a href="https://nshipster.cn/nsdataasset/">NSDataAsset</a>》</p>
<p>不过，这篇文章主要的内容是，最近有同事踩到一个关于Data Asset和最低部署版本的坑，这里单独列举一下以防后人重复踩坑。</p>
<h1 id="Data-Asset初见"><a href="#Data-Asset初见" class="headerlink" title="Data Asset初见"></a>Data Asset初见</h1><p>标准的配置下，我们可以直接在Xcode里创建一个Asset Catalog，然后拖入想要的文件。注意我们可以在右侧针对不同的配置设置不同的文件内容。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2021/07/16/1625559957403_29bd9b59c2bbaa1f363122a8276779b6.png" alt="1625559957403_29bd9b59c2bbaa1f363122a8276779b6"></p>
<p>最终一个Data Asset的输入大概的形式是这样子的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Image.xcassets</span><br><span class="line"></span><br><span class="line">- A.dataset</span><br><span class="line"></span><br><span class="line">-- Contents.json</span><br><span class="line"></span><br><span class="line">-- 1.zip</span><br><span class="line"></span><br><span class="line">-- 2.webp</span><br></pre></td></tr></table></figure>

<p>可以看到除了后缀名以外，其他的结构和普通的imageset保持一致。</p>
<h1 id="Data-Asset产物"><a href="#Data-Asset产物" class="headerlink" title="Data Asset产物"></a>Data Asset产物</h1><p>在执行Xcode标准的<code>Copy Bundle Resources</code>的Build Phase之后，可以看到我们的Data Asset会被编译为一个Assets.car文件，这个格式也是老熟人了。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2021/07/16/1625559957281_7b787078bbae747abaf28cde1a513955.png" alt="1625559957281_7b787078bbae747abaf28cde1a513955"></p>
<h1 id="Data-Asset获取代码"><a href="#Data-Asset获取代码" class="headerlink" title="Data Asset获取代码"></a>Data Asset获取代码</h1><p>类似于图像，由于Data Asset最终会编译到Car中，无法直接获取文件路径（Flutter/H5等跨平台库又需要使用Bridge方案来调用Native接口）</p>
<p>在运行时，我们需要使用Fondation提供的专门类<a href="https://developer.apple.com/documentation/uikit/nsdataasset?language=objc">NSDataAsset</a>相关接口，来获取真正的NSData，接口比较简单直观：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** 如果是非Main Bundle，要获取Bundle</span><br><span class="line"></span><br><span class="line">NSString *bundlePath = [[NSBundle bundleForClass:self.class].resourcePath stringByAppendingPathComponent:@&quot;A.bundle&quot;];</span><br><span class="line"></span><br><span class="line">NSBundle *bundle = [NSBundle bundleWithPath:bundlePath];</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">NSBundle *bundle = [NSBundle mainBundle];</span><br><span class="line"></span><br><span class="line">NSDataAsset *asset = [[NSDataAsset alloc] initWithName:@&quot;TestImageAnimated&quot; bundle:bundle];</span><br><span class="line"></span><br><span class="line">NSData *data = asset.data;</span><br></pre></td></tr></table></figure>

<p>看起来比UIImage的相关接口简单理解多了，对吧。</p>
<h1 id="坑-最低部署版本影响行为"><a href="#坑-最低部署版本影响行为" class="headerlink" title="坑-最低部署版本影响行为"></a>坑-最低部署版本影响行为</h1><p>然而最近有同事发现，他们的一个SDK，使用了Data Asset，在不同的宿主App中行为不一致。某个宿主中可以能访问到数据，另一个一直访问不到。前来咨询（？）了我，因此做了一番排查，发现了一个坑：</p>
<p><strong>先说结论：Data Asset的编译单元，在最低部署版本iOS 9以下时，不会产出Asset.car而是直接拷贝了文件到原Bundle路径下；只有iOS 9及以上才会产出Asset.car</strong></p>
<p>如图，这是SDK的资源。SDK使用了CocoaPods进行托管，Podspec里面使用了<code>resource_bundles</code>来提供对外的资源。这里的Data Asset里面内容是一个WebP文件。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2021/07/16/1625559957352_30cb4a561799eec3da92fa1c607c101e.png" alt="1625559957352_30cb4a561799eec3da92fa1c607c101e"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.ios.deployment_target = &quot;8.0&quot;</span><br><span class="line"></span><br><span class="line">s.subspec &#x27;Core&#x27; do |ss|</span><br><span class="line"></span><br><span class="line">  ss.resource_bundle     =  &#123;&#x27;splashResourceCore&#x27; =&gt; [&#x27;TTAdSplashSDK/Assets/splashResource/CoreImage.xcassets&#x27;, &#x27;TTAdSplashSDK/Assets/splashResource/ShakeMusic.mp3&#x27;]&#125;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>看起来非常正常，但是实际上行为就是有所不同。于是简单开始从源头排查差异。</p>
<h2 id="宿主A"><a href="#宿主A" class="headerlink" title="宿主A"></a>宿主A</h2><p>我们搜索查看Xcode最终编译的命令。负责编译xcassets的命令是actool。我们可以看到，在<code>com.apple.actool.compilation-results</code>这里有打印所有的输出，是符合预期的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CompileAssetCatalog /Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Products/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy/splashResourceCore.bundle /Users/bytedance/TTiOS/subs/tt_splash_sdk/TTAdSplashSDK/Assets/splashResource/CoreImage.xcassets (in target &#x27;TTAdSplashSDK-Core-Interactive-Privacy-splashResourceCore&#x27; from project &#x27;TTAdSplashSDK&#x27;)</span><br><span class="line"></span><br><span class="line">    cd /Users/bytedance/TTiOS/subs/tt_splash_sdk/Example/Pods</span><br><span class="line"></span><br><span class="line">    /Applications/Xcode.app/Contents/Developer/usr/bin/actool --output-format human-readable-text --notices --warnings --export-dependency-info /Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Intermediates.noindex/TTAdSplashSDK.build/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy-splashResourceCore.build/assetcatalog_dependencies --output-partial-info-plist /Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Intermediates.noindex/TTAdSplashSDK.build/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy-splashResourceCore.build/assetcatalog_generated_info.plist --compress-pngs --enable-on-demand-resources NO --optimization space --filter-for-device-model iPhone13,2 --filter-for-device-os-version 14.5 --development-region en --target-device iphone --target-device ipad --minimum-deployment-target 10.0 --platform iphonesimulator --compile /Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Products/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy/splashResourceCore.bundle /Users/bytedance/TTiOS/subs/tt_splash_sdk/TTAdSplashSDK/Assets/splashResource/CoreImage.xcassets</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">/* com.apple.actool.compilation-results */</span><br><span class="line"></span><br><span class="line">/Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Intermediates.noindex/TTAdSplashSDK.build/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy-splashResourceCore.build/assetcatalog_generated_info.plist</span><br><span class="line"></span><br><span class="line">/Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Products/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy/splashResourceCore.bundle/Assets.car</span><br></pre></td></tr></table></figure>

<p>检索产物Assets.car，也符合预期：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2021/07/16/1625559957323_ceced1da15007185b48893a6eda48754.png" alt="1625559957323_ceced1da15007185b48893a6eda48754"></p>
<h2 id="宿主B"><a href="#宿主B" class="headerlink" title="宿主B"></a>宿主B</h2><p>同样的，我们查看编译命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CompileAssetCatalog /Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Products/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy/splashResourceCore.bundle /Users/bytedance/TTiOS/subs/tt_splash_sdk/TTAdSplashSDK/Assets/splashResource/CoreImage.xcassets (in target &#x27;TTAdSplashSDK-Core-Interactive-Privacy-splashResourceCore&#x27; from project &#x27;TTAdSplashSDK&#x27;)</span><br><span class="line"></span><br><span class="line">    cd /Users/bytedance/TTiOS/subs/tt_splash_sdk/Example/Pods</span><br><span class="line"></span><br><span class="line">    /Applications/Xcode.app/Contents/Developer/usr/bin/actool --output-format human-readable-text --notices --warnings --export-dependency-info /Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Intermediates.noindex/TTAdSplashSDK.build/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy-splashResourceCore.build/assetcatalog_dependencies --output-partial-info-plist /Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Intermediates.noindex/TTAdSplashSDK.build/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy-splashResourceCore.build/assetcatalog_generated_info.plist --compress-pngs --enable-on-demand-resources NO --optimization space --filter-for-device-model iPhone13,2 --filter-for-device-os-version 14.5 --development-region en --target-device iphone --target-device ipad --minimum-deployment-target 8.0 --platform iphonesimulator --compile /Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Products/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy/splashResourceCore.bundle /Users/bytedance/TTiOS/subs/tt_splash_sdk/TTAdSplashSDK/Assets/splashResource/CoreImage.xcassets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* com.apple.actool.compilation-results */</span><br><span class="line"></span><br><span class="line">/Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Intermediates.noindex/TTAdSplashSDK.build/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy-splashResourceCore.build/assetcatalog_generated_info.plist</span><br><span class="line"></span><br><span class="line">/Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Products/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy/splashResourceCore.bundle/Assets.car</span><br><span class="line"></span><br><span class="line">/Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Products/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy/splashResourceCore.bundle/ad_btn_hand.webp</span><br><span class="line"></span><br><span class="line">/Users/bytedance/Library/Developer/Xcode/DerivedData/TTAdSplashSDK-bouxjwktwlrwfthejbcmzvcqddie/Build/Products/Debug-iphonesimulator/TTAdSplashSDK-Core-Interactive-Privacy/splashResourceCore.bundle/ad_btn_triangle.webp</span><br></pre></td></tr></table></figure>

<p>此时，在actool的编译结果中，我们发现，原本预期应该在Data Asset的<code>ad_btn_hand.webp</code>和<code>ad_btn_triangle.webp</code>两个文件，竟然直接拷贝到了.bundle的根路径，而不是Assets.car中！</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2021/07/16/1625559957272_fa17b69e9dd37090291bc0a6952baa38.png" alt="1625559957272_fa17b69e9dd37090291bc0a6952baa38"></p>
<p>对比两者的命令，只有<code>--minimum-deployment-target</code>这一项有差距，宿主A是iOS 10.0，宿主B是iOS 8.0。</p>
<p>经过再次Demo验证，确定了是这个导致了行为的差异！</p>
<h2 id="SDK调用代码"><a href="#SDK调用代码" class="headerlink" title="SDK调用代码"></a>SDK调用代码</h2><p>SDK运行时需要获取这些代码，经过查看，这里的代码是假设按照.bundle根路径存在Data Asset的文件名的方式去取的，因此在宿主A中会出现异常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 伪代码</span><br><span class="line"></span><br><span class="line">NSString *bundlePath = [[NSBundle bundleForClass:TTAdSplashManager.class].resourcePath stringByAppendingPathComponent:@&quot;splashResourceCore.bundle&quot;];</span><br><span class="line"></span><br><span class="line">NSbundle* bundle = [NSBundle bundleWithPath:bundlePath];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSString *trianglePath = [bundle.resourcePath stringByAppendingPathComponent:@&quot;ad_btn_triangle.webp&quot;];</span><br><span class="line"></span><br><span class="line">NSData *triangleData = [NSData dataWithContentsOfFile:trianglePath];</span><br><span class="line"></span><br><span class="line">self.imageView.image = [UIImage imageWithData:triangleData];</span><br></pre></td></tr></table></figure>

<h2 id="进一步排查最低部署版本变化"><a href="#进一步排查最低部署版本变化" class="headerlink" title="进一步排查最低部署版本变化"></a>进一步排查最低部署版本变化</h2><p>本质原因了解清楚后，进一步排查这个疑问：</p>
<blockquote>
<p>为什么宿主A和宿主B，对于一个SDK的Pod，最低部署版本不一致？</p>
</blockquote>
<p>因为SDK的Podspec的最低部署版本已经指明了iOS 8，按理说在哪个宿主集成都应该走的是路径的逻辑，而不应该受限于宿主iOS App自己的编译最低部署版本。</p>
<p>查看宿主A，发现宿主A使用了CocoaPods的插件，在Pod Project Generate的时候，强制修改了所有Pod，伪代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">all_targets.each do |target|</span><br><span class="line"></span><br><span class="line">  target.set_build_settings(&#x27;IPHONEOS_DEPLOYMENT_TARGET&#x27;) do |_, old|</span><br><span class="line"></span><br><span class="line">    old.to_f &lt; 10.0 ? &#x27;10.0&#x27; : old</span><br><span class="line"></span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  target.set_build_settings(&#x27;ASSETCATALOG_COMPILER_OPTIMIZATION&#x27;) do |_, old|</span><br><span class="line"></span><br><span class="line">    definitions = &#x27;space&#x27;</span><br><span class="line"></span><br><span class="line">    definitions</span><br><span class="line"></span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>导致SDK的编译Assets.car时，<code>--minimum-deployment-target</code>传入了iOS 10.0，Data Asset编译到Assets.car里</p>
<p>而宿主B，并没有这个逻辑，按照iOS 8.0传入，Data Asset散落在Bundle根路径。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>从这个坑可以看到，最低部署版本，这个编译配置，设置时需要谨慎。由于iOS App不会针对不同的部署版本，单独打一份独立的ipa包（类似PC等平台），所以很多工具链对针对最低部署版本，有着可能不同的兼容性行为，iOS系统快速迭代的节奏下尤其是这样。</p>
<p>这里有两个改进方案：</p>
<ol>
<li> 对于宿主，除非你清楚知道改变最低部署版本的副作用，否则要慎重处理外部Pod的最低部署版本，建议在修改后进行一定的回归测试，或者针对白名单来进行修改。</li>
<li> 对于SDK作者，如果没有用到Data Asset的特性（App Slicing），可以考虑直接不用Data Asset而直接放到Bundle中，省去踩坑的问题。如果需要利用Data Asset，并且你无法保证引入方宿主会对你的Pod做额外的修改，可以考虑这种兼容代码来判断：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSString *bundlePath = [[NSBundle bundleForClass:self.class].resourcePath stringByAppendingPathComponent:@&quot;Image.bundle&quot;];</span><br><span class="line"></span><br><span class="line">NSBundle *bundle = [NSBundle bundleWithPath:bundlePath];</span><br><span class="line"></span><br><span class="line">// 如果编译时的最低部署版本iOS 9以上，Data Asset需要用NSDataAsset类获取，否则用直接取路径</span><br><span class="line"></span><br><span class="line">NSDataAsset *asset = [[NSDataAsset alloc] initWithName:@&quot;TestImageAnimated&quot; bundle:bundle]; // 此处是Asset名，不是文件名！</span><br><span class="line"></span><br><span class="line">NSData *data = asset.data;</span><br><span class="line"></span><br><span class="line">if (!data) &#123;</span><br><span class="line"></span><br><span class="line">    // Fallback到路径</span><br><span class="line"></span><br><span class="line">    data = [NSData dataWithContentsOfFile:[bundlePath stringByAppendingPathComponent:&quot;TestImageAnimated.webp&quot;]]; // 此处是文件名，注意！</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title>Core Animation 3D仿射变换知识</title>
    <url>//core-animation-3dfang-she-bian-huan-zhi-shi</url>
    <content><![CDATA[<h1 id="Core-Animation-3D-仿射变换知识"><a href="#Core-Animation-3D-仿射变换知识" class="headerlink" title="Core Animation 3D 仿射变换知识"></a>Core Animation 3D 仿射变换知识</h1><blockquote>
<p>之前写的Core Graphics是2D平面上的坐标变换，而iOS开发中，为了实现复杂的动画效果，视图切换效果，会用到很多3D变换，这就是Core Animation提供的CATransform3D，其中大部分API都和2D情况类似，但这里需要详细解释一下透视投影这个概念，和m34这个值的真实来源，一些博客抄来抄去却没有点到点子上，让人看不下去……</p>
</blockquote>
<h1 id="变换矩阵"><a href="#变换矩阵" class="headerlink" title="变换矩阵"></a>变换矩阵</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="built_in">CATransform3D</span> &#123;</span><br><span class="line">  <span class="built_in">CGFloat</span> m11, m12, m13, m14;</span><br><span class="line">  <span class="built_in">CGFloat</span> m21, m22, m23, m24;</span><br><span class="line">  <span class="built_in">CGFloat</span> m31, m32, m33, m34;</span><br><span class="line">  <span class="built_in">CGFloat</span> m41, m42, m43, m44;</span><br><span class="line">&#125; <span class="built_in">CATransform3D</span>;</span><br></pre></td></tr></table></figure>

<p>这个结构体对应的是这样一个4x4的变换矩阵：</p>
<p>$ \begin{bmatrix} m11 &amp; m12 &amp; m13 &amp; m14 \\ m21 &amp; m22 &amp; m23 &amp; m24 \\ m31 &amp; m32 &amp; m33 &amp; m34 \\ m41 &amp; m42 &amp; m43 &amp; m44 \end{bmatrix} $</p>
<p>矩阵定义的顺序和结构体一致，先行后列（注意，那个《Core Animation Advanced Techniques》矩阵的图是错误的，行列画反了），则对应的矩阵乘法为</p>
<p>$ \begin{bmatrix} x &amp; y &amp; z &amp; 1 \end{bmatrix} \times \begin{bmatrix} m11 &amp; m12 &amp; m13 &amp; m14 \\ m21 &amp; m22 &amp; m23 &amp; m24 \\ m31 &amp; m32 &amp; m33 &amp; m34 \\ m41 &amp; m42 &amp; m43 &amp; m44 \end{bmatrix} = \\ \begin{bmatrix} m11x+m21y+m31z+m41 &amp; m12x+m22y+m32z+m42 &amp; m13x+m23y+m33z+m43 &amp; m14+m24+m34+m44 \end{bmatrix} $</p>
<p>注意：</p>
<ul>
<li>这里定义的向量最后一位表示齐次向量元素，如果不为1，需要再化为齐次坐标（通常情况可以取m14,m24,m34,m44为0,0,0,1），对应真正的x,y,z坐标</li>
</ul>
<p>$ \begin{bmatrix} \frac{m11x+m21y+m31z+m41}{m14+m24+m34+m44} &amp; \frac{m12x+m22y+m32z+m42}{m14+m24+m34+m44} &amp; \frac{m13x+m23y+m33z+m43}{m14+m24+m34+m44} \end{bmatrix} $</p>
<ul>
<li>iOS设备上，是按照左手系的三维空间，即正面面对设备屏幕，坐标原点从屏幕左上方起，x轴指向右方，y轴指向下方，z轴为屏幕指向眼球。而macOS上是右手系，原点是屏幕左下角，x轴指向右方，y轴指向上方（相反），z轴同样为屏幕指向眼球，要注意</li>
</ul>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/0/07/5c010c6b630ab7aa0892428016d7e.jpeg"></p>
<h1 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h1><p>类似二维空间的平移，变换矩阵第四行的m41,m42,m43对应的就是x、y、z的平移量，因此矩阵变换很简单，比如将[x,y]向量平移到[x+a,y+b,z+c]：</p>
<p>平移矩阵：<br>$ \begin{bmatrix} x &amp; y &amp; z &amp; 1 \end{bmatrix} \times \begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1 &amp; 0 \\ a &amp; b &amp; c &amp; 1 \end{bmatrix} = \begin{bmatrix} x+a &amp; y+b &amp; z+c &amp; 1 \end{bmatrix} $</p>
<p>对应构造API：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CATransform3D</span> <span class="built_in">CATransform3DMakeTranslation</span>(<span class="built_in">CGFloat</span> tx, <span class="built_in">CGFloat</span> ty, <span class="built_in">CGFloat</span> tz);</span><br></pre></td></tr></table></figure>

<h1 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h1><p>同二维空间的缩放，我们需要对向量坐标乘以系数，那么构造出来一个对角矩阵即可</p>
<p>缩放矩阵：</p>
<p>$ \begin{bmatrix} x &amp; y &amp; z &amp; 1 \end{bmatrix} \times \begin{bmatrix} a &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; a &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; a &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix} = \begin{bmatrix} ax &amp; ay &amp; az &amp; 1 \end{bmatrix} $</p>
<p>对应的构造API：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CATransform3D</span> <span class="built_in">CATransform3DMakeScale</span>(<span class="built_in">CGFloat</span> sx, <span class="built_in">CGFloat</span> sy, <span class="built_in">CGFloat</span> sz);</span><br></pre></td></tr></table></figure>

<h1 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h1><p>参考二维的旋转，二维的旋转我们讨论的是某个layer，以它自身的anchorPoint为原点，通过顺时针逆时针的旋转。但是对于三维来说旋转就麻烦了，因为向量不会仅仅在XoY平面上。虽然实际上可以定义绕任意轴旋转，但是一般我们只研究绕三个坐标轴（x,y,z）的旋转。其中，对于绕z轴的旋转，可以看作等价于二维的旋转（XoY平面内），但绕x和绕y就超出了屏幕</p>
<p>对于绕坐标轴，我们可以把对应旋转平面的投影看成二维的情况，因此前面推导过的旋转矩阵同样适用于三维绕轴情况，只需要针对不同坐标轴选定不同的坐标罢了，即通过把前一篇推导方程替换x，y，z变量得到：</p>
<p>$ \begin{cases} x^{‘} = x \cos \theta - y \sin \theta \\ y^{‘} = y \cos \theta + x \sin \theta \\ z^{‘} = z \end{cases} $</p>
<p>绕x轴的旋转矩阵（固定x，从y旋转到z，即用y替换x，z替换y，x替换z）：</p>
<p>$ \begin{bmatrix} x &amp; y &amp; z &amp; 1 \end{bmatrix} \times \begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; \cos \theta &amp; \sin \theta &amp; 0 \\ 0 &amp; - \sin \theta &amp; \cos \theta &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix} = \begin{bmatrix} x &amp; y \cos \theta - z \sin \theta &amp; z \cos \theta + y \sin \theta&amp; 1 \end{bmatrix} $</p>
<p>绕y轴的旋转矩阵（固定y，从z旋转到x，即用z替换x，x替换y，y替换z）：</p>
<p>$ \begin{bmatrix} x &amp; y &amp; z &amp; 1 \end{bmatrix} \times \begin{bmatrix} \cos \theta &amp; 0 &amp; - \sin \theta &amp; 0 \\ 0 &amp; 1 &amp; 0 &amp; 0 \\ \sin \theta &amp; 0 &amp; \cos \theta &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix} = \begin{bmatrix} x \cos \theta + z \sin \theta &amp; y &amp; z \cos \theta - x \sin \theta &amp; 1 \end{bmatrix} $</p>
<p>对应API：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CATransform3D</span> <span class="built_in">CATransform3DMakeRotation</span>(<span class="built_in">CGFloat</span> radians, <span class="built_in">CGFloat</span> x, <span class="built_in">CGFloat</span> y, <span class="built_in">CGFloat</span> z);</span><br></pre></td></tr></table></figure>

<p>注意：这个API中，radians是弧度不用说，x,y,z分别介于[-1,1]之间，表示一个任意的单位向量（[x,y,z]的长度是1，比如设置[1,0,0]就指的是绕x轴正方向旋转对应弧度值，前面解释过iOS和macOS的正/负弧度对应顺/逆时针了）</p>
<h1 id="错切"><a href="#错切" class="headerlink" title="错切"></a>错切</h1><p>类似二维的情况，比如对z轴依赖不变，x和y线性变换，那么对应的就是m12和m21，也是没有专门的API，用<code>CATransform3DIdentity </code>便携初始化结构体创建一个吧，设置对应的矩阵值即可</p>
<p>错切矩阵：</p>
<p>$ \begin{bmatrix} x &amp; y &amp; z &amp; 1 \end{bmatrix} \times \begin{bmatrix} 1 &amp; m21 &amp; 0 &amp; 0 \\ m12 &amp; 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix} = \begin{bmatrix} x+m12y &amp; m21x+y &amp; z &amp; 1 \end{bmatrix} $</p>
<p>手动构造API：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//The identity transform: [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1]</span></span><br><span class="line"><span class="built_in">CATransform3DIdentity</span> transform = <span class="built_in">CATransform3DIdentity</span>;</span><br><span class="line">transform.m12 = <span class="number">1.0</span>;</span><br><span class="line">transform.m21 = <span class="number">1.0</span>;</span><br></pre></td></tr></table></figure>

<h1 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h1><p>实际中你如果直接使用旋转，会注意到旋转前后，结果看起来竟然和普通的缩放一模一样，这是为什么呢？原因其实很简单，假如绕y轴旋转，空间中的图层虽然旋转了，但是显示到XoY平面（也就是iPhone的屏幕上）的时候，会把3D的物体进行正投影，这样子看上去就像是左右压缩一样</p>
<p>而学过绘画的都知道人的视野并不是平行的，而是有一个透视图的概念，眼睛前有实际平行的两条线段发出（相当于z轴方向的向量），人眼看起来会相交于一点上（焦点，Focal point），这才产生了3D感</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/7/a9/a7ed0efe4aebcddaef0d090c631b4.jpeg"></p>
<p>而对于变换矩阵，如果要实现透视投影，应该怎么办？这里就用到了前面介绍过但一直忽略的值<code>m34</code></p>
<h2 id="原理和推导："><a href="#原理和推导：" class="headerlink" title="原理和推导："></a>原理和推导：</h2><p>为什么单单修改一个<code>m34</code>的值，就能达到这种透视3D的效果呢？我简单看了很多类似的博客都没有正面回答这个问题，其实这是变换矩阵的透视投影结论，可以通过简单的数学推导得到</p>
<p>Core Animation已经定义了焦点的x,y坐标，就是这个图层的anchorPoint（锚点），同时取z=0的XoY平面作为图像平面（也就是iPhone的屏幕平面），那么假如我希望投影中心到图像平面的距离是d，可以假设焦点坐标为(0,0,d)，现在对<code>m34</code>的值进行赋值为w，初始向量坐标为(x,y,z)，开始推导：</p>
<p>矩阵乘法：</p>
<p>$ \begin{bmatrix} x &amp; y &amp; z &amp; 1 \end{bmatrix} \times \begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1 &amp; w \\ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix} = \begin{bmatrix} x &amp; y &amp; z &amp; zw+1 \end{bmatrix} $</p>
<p>此时得到的向量不为齐次，需要进行齐次化，得到真正的坐标：</p>
<p>$ \begin{bmatrix} x^{‘} &amp; y^{‘} &amp; z^{‘} \end{bmatrix} = \begin{bmatrix} \frac{x}{zw+1} &amp; \frac{y}{zw+1} &amp; \frac{z}{zw+1} \end{bmatrix} $</p>
<p>最后对XoY平面进行投影，则最终看到的二维向量应该为$ (\frac{x}{zw+1}, \frac{y}{zw+1}) $</p>
<p>现在考虑x轴的情况（y轴同理），我们知道真实三维空间的x坐标是x，<br>现在得到透视投影下的x坐标是x/(zw+1)</p>
<p>为了得到d和w的关系，这里引用一幅图，绿色的点为原始点，红色的点为投影到XoY平面上的点，我们这里推导不需要管具体的值，只是为了更清晰地发现规律：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/1/8e/421990115e6623fdd5a5bec14d03a.jpg" alt="7525866072_efebf5cd22.jpg"></p>
<p>$ \because 由图，依据相似三角形原理 \\ \therefore \left| \frac{x}{zw+1}: x \right| = d : (\left|z\right|+d) \\ 去绝对值号，且d\neq0,x\neq0，得 \\ \frac{1}{zw+1} = \frac{1}{1-\frac{z}{d}} \\ \therefore w = - \frac{1}{d} $</p>
<p>这样就得到重要的结论：<code>w=-(1/d)</code>，即，假定焦点（就是人眼）距离原点距离为d，则<code>m34</code>应当填写<code>-(1/d)</code></p>
<p>默认初始变换矩阵的<code>m34</code>都是0，也就是说认为焦点无限远，因此看起来没有任何3D感。同时，我们也知道，假如我们取d越大，则看起来越没有投射和3D感；取d越小，则3D感和失真感越强烈，一般推荐的d值在500~1000之间，也就是说<code>m34</code>填写-1/500即可</p>
<p>设置变换矩阵的<code>m34</code>：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CATransform3D</span> transform = <span class="built_in">CATransform3DIdentity</span>;</span><br><span class="line"><span class="comment">//apply perspective</span></span><br><span class="line">transform.m34 = - <span class="number">1.0</span> / <span class="number">500.0</span>;</span><br><span class="line"><span class="comment">//rotate by 45 degrees along the Y axis</span></span><br><span class="line">transform = <span class="built_in">CATransform3DRotate</span>(transform, M_PI_4, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//apply to layer</span></span><br><span class="line"><span class="keyword">self</span>.layerView.layer.transform = transform;</span><br></pre></td></tr></table></figure>

<p><img src="http://dreampiggy-image.test.upcdn.net/image/9/12/fa3e96d6a571f355e18899eca3296.jpeg" alt="5.13.jpeg"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Core Animation提供的CATransform3D主要的几个变换都在这里介绍了，尤其是透视投影，一定要理解原理，知道为什么需要修改<code>m34</code>来控制透视焦点。</p>
<p>当然，实际上CATransform3D主要用来作各种3D动画效果，比如你可以自定义一个View的转场效果，搞个3D相册，甚至可以在不需要接触OpenGL的情况下写个小游戏（比如魔方啊之类），对于iOS进阶非常有帮助。最近有点忙没太关注，感觉自己还是需要学习一个。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques/blob/master/5-%E5%8F%98%E6%8D%A2/%E5%8F%98%E6%8D%A2.md">iOS Core Animation Techniques</a></p>
<p><a href="http://geeklu.com/2012/07/ios-3d-perspective/">iOS的三维透视投影</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>CoreAnimation</tag>
      </tags>
  </entry>
  <entry>
    <title>Core Graphics仿射变换知识</title>
    <url>//core-graphicsfang-she-bian-huan</url>
    <content><![CDATA[<blockquote>
<p>这是补充记录关于CG的几何变换的一些知识，涉及到简单的矩阵变换</p>
</blockquote>
<h1 id="变换矩阵"><a href="#变换矩阵" class="headerlink" title="变换矩阵"></a>变换矩阵</h1><p>在Core Graphics进行图层缩放、旋转、平移的时候，本质的操作就是使用<code>CGAffineTransform</code>这个3x2矩阵对象，与我们的<code>CGPoint</code>这个1x2的矩阵（其实就是对应就是[x,y]这个向量）进行矩阵相乘操作，得到的新矩阵就是变换后的新向量。一般通过CALayer得到的图层都是矢量，因此可以把整个图层进行相应的缩放、旋转、平移。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="built_in">CGAffineTransform</span> &#123; </span><br><span class="line">  <span class="built_in">CGFloat</span> a; </span><br><span class="line">  <span class="built_in">CGFloat</span> b; </span><br><span class="line">  <span class="built_in">CGFloat</span> c; </span><br><span class="line">  <span class="built_in">CGFloat</span> d; </span><br><span class="line">  <span class="built_in">CGFloat</span> tx; </span><br><span class="line">  <span class="built_in">CGFloat</span> ty; </span><br><span class="line">&#125; <span class="built_in">CGAffineTransform</span>;</span><br></pre></td></tr></table></figure>

<p>这个结构体对应的矩阵如下（看不到LaTeX公式的请看<a href="https://developer.apple.com/reference/coregraphics/1455865-cgaffinetransformmake">Apple Developer Document</a>）：</p>
<p>$ \begin{bmatrix} a &amp; b &amp; 0 \\ c &amp; d &amp; 0 \\ t_{x} &amp; t_{y} &amp; 1 \end{bmatrix} $</p>
<p>Apple采用了用[1]补齐1x3的向量，和用[0,0,1]的转置补齐的3x3的变换矩阵相乘来做仿射变换。虽然可能觉理论上可以直接用2x3变换矩阵和3x1的向量([x,y,1]的转置)运算，得到一个2x1的向量，省3个<code>CGFloat</code>的空间。但是由于这种变换操作叠加次数特别多，与其每次得到的向量结果再补齐[1]，还不如一次性就用一个1x3和3x3运算，用空间换取时间，这也许是QuartzCore的实现者的考虑吧。</p>
<p>$ \begin{bmatrix} x &amp; y &amp; 1 \end{bmatrix} \times \begin{bmatrix} a &amp; b &amp; 0 \\ c &amp; d &amp; 0 \\ t_{x} &amp; t_{y} &amp; 1 \end{bmatrix} = \begin{bmatrix} ax+cy+t_{x} &amp; bx+dy+t_{y} &amp; 1 \end{bmatrix} $</p>
<p>注意：iOS上坐标原点从屏幕左上方起，x轴指向右方，y轴指向下方。macOS的原点在屏幕左下方，x轴指向右方，y轴指向上方，要注意区别</p>
<h1 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h1><p>变换矩阵第三行的t_x和t_y对应的就是x、y的平移量，因此矩阵变换很简单，比如将[x,y]向量平移到[x+a,y+b]：</p>
<p>平移矩阵：<br>$ \begin{bmatrix} x &amp; y &amp; 1 \end{bmatrix} \times \begin{bmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ a &amp; b &amp; 1 \end{bmatrix} = \begin{bmatrix} x+a &amp; y+b &amp; 1 \end{bmatrix} $</p>
<p>对应API：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGAffineTransform</span> <span class="built_in">CGAffineTransformMakeTranslation</span>(<span class="built_in">CGFloat</span> tx, <span class="built_in">CGFloat</span> ty);</span><br></pre></td></tr></table></figure>

<h1 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h1><p>缩放的本质，就是对向量[x,y]通过同时乘以相同的系数a，得到[ax,ay]，那么矩阵很简单，只需要一个对角矩阵，系数都为a就行</p>
<p>缩放矩阵：</p>
<p>$\begin{bmatrix} x &amp; y &amp; 1 \end{bmatrix} \times \begin{bmatrix} a &amp; 0 &amp; 0 \\ 0 &amp; a &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix} = \begin{bmatrix} ax &amp; by &amp; 1 \end{bmatrix} $</p>
<p>这个可以使用CA的API来简单构造（也可以直接自己初始化）：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGAffineTransform</span> <span class="built_in">CGAffineTransformMakeScale</span>(<span class="built_in">CGFloat</span> sx, <span class="built_in">CGFloat</span> sy);</span><br></pre></td></tr></table></figure>

<h1 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h1><p>旋转的变换矩阵初看上去好像难以理解（各种cos、sin），其实就是一个简单的解方程的出来的结果，注意这里需要的是弧度，而且iOS上旋转的正弧度代表顺时针（macOS上就是正弧度是顺时针），需要注意</p>
<p>旋转矩阵：</p>
<p>$ \begin{bmatrix} x &amp; y &amp; 1 \end{bmatrix} \times \begin{bmatrix} \cos \theta &amp; \sin \theta &amp; 0 \\ - \sin \theta &amp; \cos \theta &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix} = \begin{bmatrix} x \cos \theta - y \sin \theta &amp; x \sin \theta + y \cos \theta &amp; 1 \end{bmatrix} $</p>
<p>推导过程：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/4/ef/04946d0b15517c28f52f8aaf7a850.png"></p>
<p>$ P = (x,y) = (r\cos A , r\sin A) \\ P^{‘} = (r \cos B, r \sin B) = (r\cos(A + \theta), r\sin(A + \theta)) \\ r\cos(A + \theta) = r\cos A \cos \theta - r\sin A \sin \theta = x \cos \theta - y \sin \theta \\ r\sin(A + \theta) = r\sin A \cos \theta + r\cos A \sin \theta = y \cos \theta + x \sin \theta \\ \therefore M = \begin{bmatrix} \cos \theta &amp; \sin \theta &amp; 0 \\ - \sin \theta &amp; \cos \theta &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix} $</p>
<p>对应API：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGAffineTransform</span> <span class="built_in">CGAffineTransformMakeRotation</span>(<span class="built_in">CGFloat</span> angle);</span><br></pre></td></tr></table></figure>

<p>弧度可以用自带的定义，比如<code>M_PI_4</code>这些，也可以手动转换，比如用弧度、角度转换的宏：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RADIANS_TO_DEGREES(x) ((x)/M_PI*180.0) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEGREES_TO_RADIANS(x) ((x)/180.0*M_PI)</span></span><br></pre></td></tr></table></figure>

<h1 id="错切"><a href="#错切" class="headerlink" title="错切"></a>错切</h1><p>错切，就是一种特殊的线性变换（不平移），指的是某一个坐标轴依赖不变，另一个轴线性变换，参考Wiki上的图片：<br><img src="https://upload.wikimedia.org/wikipedia/commons/0/08/Eigen.jpg"></p>
<p>错切矩阵：</p>
<p>$ \begin{bmatrix} x &amp; y &amp; 1 \end{bmatrix} \times \begin{bmatrix} 1 &amp; 0 &amp; 0 \\ m &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{bmatrix} = \begin{bmatrix} x+my &amp; y &amp; 1 \end{bmatrix} $</p>
<p>这种变换没有提供专用的API，我们自己可以用<code>CGAffineTransformIdentity</code>创建一个矩阵，然后赋值矩阵中c或者b的值就行</p>
<h1 id="叠加"><a href="#叠加" class="headerlink" title="叠加"></a>叠加</h1><p>既然了解了这些图层操作的矩阵变换，我们也可以自己定义矩阵，比如非线性变换(得到的向量不平行）、也可以把几个连续的变换串起来，这时候就要注意矩阵的运算顺序，比如先缩放50%，再旋转<code>M_PI_4</code>，再平移到[x+100,y]，那么等价于沿着45度平移50的距离（对应结果坐标就成了[x*sqrt(2)/4, y*sqrt(2)/4]）</p>
<p>对应API：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGAffineTransform</span> <span class="built_in">CGAffineTransformConcat</span>(<span class="built_in">CGAffineTransform</span> t1, <span class="built_in">CGAffineTransform</span> t2); <span class="comment">// 最通用</span></span><br><span class="line"><span class="built_in">CGAffineTransform</span> <span class="built_in">CGAffineTransformScale</span>(<span class="built_in">CGAffineTransform</span> t, <span class="built_in">CGFloat</span> sx, <span class="built_in">CGFloat</span> sy);</span><br><span class="line"><span class="comment">// 缩放</span></span><br><span class="line"><span class="built_in">CGAffineTransform</span> <span class="built_in">CGAffineTransformMakeRotation</span>(<span class="built_in">CGFloat</span> angle); <span class="comment">//旋转</span></span><br><span class="line"><span class="built_in">CGAffineTransform</span> <span class="built_in">CGAffineTransformTranslate</span>(<span class="built_in">CGAffineTransform</span> t, <span class="built_in">CGFloat</span> tx, <span class="built_in">CGFloat</span> ty); <span class="comment">// 平移</span></span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques/blob/master/5-%E5%8F%98%E6%8D%A2/%E5%8F%98%E6%8D%A2.md">iOS Core Animation Advanced Techniques</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>CoreGraphics</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之暴力实现Parser Generator（序言）</title>
    <url>//javazhi-bao-li-shi-xian-parser-generator-xu-yan</url>
    <content><![CDATA[<blockquote>
<p>编译原理已经学了很多了吧？还有所迷茫？那么今天跟着我一起学习如何暴力写一个Parser Generator</p>
</blockquote>
<h1 id="Why-Java："><a href="#Why-Java：" class="headerlink" title="Why Java："></a>Why Java：</h1><p>因为Java有着丰富的对开发人员傻瓜式友好的内置数据结构，什么Map，Set，Stack，求交集求并集也就一句a.contains(b);a.addAll(b)的事情，并且不需要担心资源泄漏(?)的问题，对于我们的暴力实现非常有帮助。而且相比C++我也更为熟悉..</p>
<h1 id="What-is-parser-generator"><a href="#What-is-parser-generator" class="headerlink" title="What is parser generator"></a>What is parser generator</h1><p>这里就指的是支持用户输入CFG（<a href="https://en.wikipedia.org/wiki/Context-free_grammar">Context-free grammar</a>），然后生成出一个Java代码，这个代码可以编译以后得到一个Parser用来Parse符合输入CFG定义的文法，类似于<a href="https://en.wikipedia.org/wiki/Yacc">Yacc</a></p>
<p>迷糊了？举个例子，就是假如用户定义了这样一组CFG，用来匹配一个对于正整数的加法和乘法</p>
<p>$ S \rightarrow TB \ B \rightarrow TB \mid \epsilon \ T \rightarrow FT^* \ T^* \rightarrow * FT^* \ F \rightarrow (S) \mid 0 \mid \dots \mid 9 $</p>
<p>当然，数学符号肯定很好写，实际中输入大概是这样子的(\e表示epsilon)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S  -&gt; T B</span><br><span class="line">B -&gt; + T B | \e</span><br><span class="line">T  -&gt; F T&#123;*&#125;</span><br><span class="line">T&#123;*&#125; -&gt; * F T&#123;*&#125; | \e</span><br><span class="line">F  -&gt; (S) | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9</span><br></pre></td></tr></table></figure>

<p>这样的话，这个CFG输给我们的Parser Generator(我们叫做a.java)，运行后得到的代码，再次编译以后(我们叫做b.java)就可以用来匹配输入，对于3 + 5 * 7，我们能给出True的匹配。结果可能是这样子的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LL(1) Parser start</span><br><span class="line"></span><br><span class="line">Currernt top: S input: 3</span><br><span class="line">Currernt top: T input: 3</span><br><span class="line">Currernt top: F input: 3</span><br><span class="line">Currernt top: 3 input: 3</span><br><span class="line">Currernt top: T&#123;*&#125; input: +</span><br><span class="line">Currernt top: B input: +</span><br><span class="line">Currernt top: + input: +</span><br><span class="line">Currernt top: T input: 5</span><br><span class="line">Currernt top: F input: 5</span><br><span class="line">Currernt top: 5 input: 5</span><br><span class="line">Currernt top: T&#123;*&#125; input: *</span><br><span class="line">Currernt top: * input: *</span><br><span class="line">Currernt top: F input: 7</span><br><span class="line">Currernt top: 7 input: 7</span><br><span class="line">Currernt top: T&#123;*&#125; input: #</span><br><span class="line">Currernt top: B input: #</span><br><span class="line"></span><br><span class="line">Parse result: true</span><br></pre></td></tr></table></figure>

<p>当然，这个匹配用的是表驱动的，而且后续会生成AST（<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract syntax tree</a>）</p>
<h1 id="What-algorithm"><a href="#What-algorithm" class="headerlink" title="What algorithm"></a>What algorithm</h1><p>当然，核心在于学习编译，所以我们会分别使用<a href="https://en.wikipedia.org/wiki/LR_parser">LR(1)</a>和<a href="https://en.wikipedia.org/wiki/LL_parser">LL(1)</a>生成我们的Parser，里面会用到用到LR(1)的三种集合，LL(1)的Closure等知识……</p>
<h1 id="How-about-efficiency"><a href="#How-about-efficiency" class="headerlink" title="How about efficiency"></a>How about efficiency</h1><p>看到我说的暴力……你就知道这是妥协了。虽然我们会考虑效率，但只考虑大O，不会在意具体new了多少个对象，是否重复，算法实现也尽量以清晰易懂，直接可以看作伪代码，而不会过多优化，所以，这主要是一个教学，没有过多的实际意义……</p>
<h1 id="Talk-is-cheap"><a href="#Talk-is-cheap" class="headerlink" title="Talk is cheap"></a>Talk is cheap</h1><p>自己大概写了个非常简陋的版本……现在只能确保LR(1)文法能够Parse，LL(1)正在努力过测试 GitHub repo: <a href="https://github.com/lizhuoli1126/e-lexer">https://github.com/lizhuoli1126/e-lexer</a> （不要在意名字……开始想做的是lex却发现走到了类似yacc的路上去了……）</p>
<h1 id="So-what’s-next"><a href="#So-what’s-next" class="headerlink" title="So what’s next"></a>So what’s next</h1><p>第一篇，我们只大概介绍一下框架，以及一个简单的Input Buffer的实现，还有我们定义的CFG的语法，状态机图，所以大家放轻松，让我们稍后再见</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>FRP简介—论GUI程序架构发展</title>
    <url>/2016/11/16/FRP%E7%AE%80%E4%BB%8B%E2%80%94%E8%AE%BAGUI%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95/</url>
    <content><![CDATA[<blockquote>
<p>熟悉做端GUI程序（客户端，Web前端）的同学一定会知道，做UI最大的问题就是模型和视图对象的绑定，视图对象的状态管理，以及事件消息的处理。</p>
</blockquote>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>传统的GUI编程的一大核心，就是使用了事件驱动编程模型。UI对象的布局、状态等，通过外部的消息事件（点击，触摸，网络请求响应等等）来触发。这是由于GUI程序的人机交互的天生性质决定的（当然，这里的GUI不包括游戏，游戏一般采用立即的帧驱动而非事件）。对于GUI编程的架构方面，从发现到现在，不外乎这几种：</p>
<h1 id="传统的事件监听，消息派发机制："><a href="#传统的事件监听，消息派发机制：" class="headerlink" title="传统的事件监听，消息派发机制："></a>传统的事件监听，消息派发机制：</h1><p><img src="http://www.codeproject.com/KB/java/677591/EventModel.jpg"></p>
<p>这是最常见，也是最贴近GUI程序底层实现的模型。一般来说，GUI程序的框架入口就是一个大的while(true)循环，通过在循环内不断向窗口管理器请求消息（比如点击事件等用户输入），通过把底层的消息回调函数回调或者IPC机制，封装成一个个对开发者友好的事件对象来派发出来。</p>
<p>因此，传统的这种模型，在GUI开发的时候，通过把UI对象绑定指定的事件监听器，在监听器的代码中手动改变状态，来达到人机交互。当然，这一点还不够，因为我们没法手动来触发多个UI对象的关联关系，也很难处理非输入类型事件，比如网络请求，文件读写。因此就需要引入消息的机制，通过派发消息，UI对象可以选择是否处理该消息，或者重新派发消息给其他UI对象，对于网络请求等，既可以用高层的消息处理，也可以手动通过回调函数来处理。这样整套机制就是传统的GUI程序的核心机制。</p>
<p>传统的GUI事件驱动模型，一直伴随着历史的发展，诞生了无数的解决方案和GUI框架，从早期的暴力的函数指针来绑定事件回调，到如今各种面向对象的消息-事件机制。基本你在各种GUI框架中都能找到。不过，遗憾的事，一般的Event都是单个消息或者事件对象，你可以再派发给其他UI对象来处理，但整个流程不是非常响应变化的，假如需要新的消息处理，就得在各处的监听器上手动修改代码，这一点也不Reactive</p>
<p>举例：</p>
<ul>
<li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaEncyclopedia/Target-Action/Target-Action.html">iOS Target-Action</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/ui-events.html">Android Event</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventListener">Web EventListener</a></li>
<li><a href="http://doc.qt.io/qt-4.8/signalsandslots.html">Qt Singal Slot</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/ms753115.aspx">WPF Events</a></li>
</ul>
<h1 id="数据绑定和状态管理"><a href="#数据绑定和状态管理" class="headerlink" title="数据绑定和状态管理"></a>数据绑定和状态管理</h1><p><img src="http://i.stack.imgur.com/KZFfe.png"></p>
<p>随着GUI程序的发展，尤其是Web前端领域的发展，传统的事件消息机制也越来越难以方便应对大型GUI应用。随着你的GUI程序交互越来越多样，网络请求越来越多，不同UI对象之间关联越来复杂，一个事件过来，也许你需要修改十多个相关UI对象的属性和布局；同时网络请求的回调，你又得分发封装成多种消息发送出去。最终，你写的UI逻辑代码，将达到：<code>消息对应事件数 * 事件绑定的UI对象数 * UI对象需要修改的属性数</code>这样一种地步。这就对GUI开发带来了一个非常大的挑战。</p>
<p>因此，这就带来一个GUI开发的新模式。我们可以重新思考一下，假如我们把消息源，通过一定的策略，直接同UI的属性绑定起来，这就是数据绑定。可以通过建立一套框架封装消息和事件，并自动化事件到UI对象属性这一流程。同时，为了正确修改UI对象的属性，传统的事件消息机制一般会在事件监听器上计算UI对象的当前状态，并手动修改需要修改的属性。因此，数据绑定的时候也需要引入状态管理。在这套框架中，UI对象本身不需要存储状态，需要有一层来处理不同状态对应的UI对象绑定方式，整个Data Flow从数据模型出发，触发状态改变，然后同步到UI对象对应状态下的绑定方式，最终改变UI对象的属性。</p>
<p>当然，从上面的说法也能看出，最简单的实现，至少要达到事件-&gt;UI对象的单向绑定，同时也可以存在事件&lt;-&gt;对象的双向绑定。数据绑定常见于使用类XML布局的GUI框架，因为纯XML无法存储状态。比如Vue.js的XML模版，React的JSX，Android的XML布局，WPF的XAML等等。而对于iOS应用而言，除了搭配Storyboard来简化状态，代码布局中一般采用MVVM架构，将View和ViewController这个与View紧耦合的模块放在一起当做View层，其中ViewController专门负责ViewModel的数据绑定到UI对象上，把所有View产生的事件派发回ViewModel（比如按钮的点击，Target为ViewModel），本身不负责任何业务逻辑。而ViewModel就是真正业务逻辑的地方，负责管理View的状态、触发的事件来更新Model，Model更新得到的数据和状态变化则代理给View。不过实践上一般都直接采用ReactiveCocoa了（当然，它数据绑定只是小部分，真正重要地方在FRP上）</p>
<p>举例：</p>
<ul>
<li><a href="https://facebook.github.io/react/">React.js</a></li>
<li><a href="https://facebook.github.io/react-native/">React Native</a></li>
<li><a href="https://github.com/reactjs/redux">Redux</a></li>
<li><a href="https://vuejs.org/">Vue.js</a></li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a></li>
<li><a href="https://developer.android.com/topic/libraries/data-binding/index.html">Android Data Binding</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/ms752347.aspx">WPF</a></li>
</ul>
<h1 id="FRP——Functional-Reactive-Programming"><a href="#FRP——Functional-Reactive-Programming" class="headerlink" title="FRP——Functional Reactive Programming"></a>FRP——Functional Reactive Programming</h1><p><img src="https://camo.githubusercontent.com/995c301de2f566db10748042a5a67cc5d9ac45d9/687474703a2f2f692e696d6775722e636f6d2f484d47574e4f352e706e67"></p>
<p>数据绑定看起来很直观很美好，但是状态管理却不是。随着UI对象的增加，GUI应用的状态就会再次面临<code>组件状态数=关联的组件状态数求积</code>这样一个累乘关系。而且更糟糕的是，因为状态这种东西，不同于具体的UI对象属性，要改变只能重新触发，所以当状态流从数据源开始向下传递的时候，假如某些UI对象想要修改并继续传递，就只能再触发新的状态，这更加重了状态管理的压力。</p>
<p>这时候，函数式编程的思想又发挥了功力。不同于传统事件消息机制的繁琐和复杂，也不需要面对复杂状态时管理，FRP的思想，在于把不定期的事件触发，当做一个事件流，让不同的订阅者来订阅，并绑定事件流的数据到UI对象的属性上。</p>
<p>借由函数式编程的思想，事件流本身是不可修改的，但订阅者可以通过组合无副作用的函数来得到一个属于自己定制的新的事件流，不同订阅者可以重用其他订阅者已经组合过的事件流。事件流的流动方向就是时间轴方向，而订阅者可以组合得到新的事件流的副本，某时刻原事件的状态，该订阅者就能得到该时刻事件对应变化后的状态，用来绑定UI对象。</p>
<p>比如你需要做一个点击监测的功能，需要给一个文本框显示在250ms间隔内连续点击两次以上的次数。如果换做传统事件消息机制，那么就得写两个函数，一个捕获事件，一个计时器，还需要一个全局状态量记录当前这250ms点击的次数。换做数据绑定的方式稍微简化了一点，一个绑定处理函数，但是得引入两个额外状态：当前轮次数增加状态，和切换下一轮的状态。而换做FRP，就如上图所示，把点击事件流，直接通过运算符组合到真正的数据流，绑定到UI对象的即可。</p>
<p>FRP的核心，在于事件流可多次触发，以及各种操作符用来作事件流变换，最终交到订阅者手上的，就是真正UI对象想要的数据流，这样我就可以把这个数据流绑定到UI对象上，达到整个Data Flow的完整性。</p>
<p>举例：</p>
<ul>
<li><a href="http://reactivex.io/">ReactiveX</a></li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a></li>
<li><a href="https://github.com/dominictarr/event-stream">EventStream</a></li>
</ul>
<h1 id="SO"><a href="#SO" class="headerlink" title="SO?"></a>SO?</h1><p>传统的事件驱动将永远是GUI框架的基础，因为最贴近实现层，而且可扩展性强。但是实际开发中，事件消息驱动将导致你的事件监听器遍布各处，也会强行把View层和Model层绑定在一起，并且不利于修改。而数据绑定和FRP的架构能够将GUI程序的UI对象，和数据相对分离开，View不需要管什么事件，只需要自己关系的，为了渲染的属性数据即可。</p>
<p>在现在看来，FRP是在数据绑定的基础上，避免了过重的状态管理，并且能够大大简化代码量，想对容易达到MVVM架构，对于大型应用构建是一个不错的选择。之后的会简单介绍几个FRP框架和比较，同时可以科普一下FRP背后的Functional简单原理。期待今后的MVVM和FRP，在移动和Web平台能够得到更大的推广，解放广大人民生产力。</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Functional</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C ARC下block表现和关键字影响</title>
    <url>//objective-c-arcxia-blockbiao-xian-he-guan-jian-zi-ying-xiang</url>
    <content><![CDATA[<blockquote>
<p>Objective-C中的block是一种特别的结构，block与普通的instance不同的地方，不止更在于它的语法，更在于它的不同表现以及内存分配。</p>
</blockquote>
<p>虽然block对于Objective-C来说已经早不新鲜了，但现如今很多博文讲述的block行为是基于MRC的，这与ARC下的表现是不同的。现代Objective-C也应该渐渐淘汰MRC和GC（其实GC已经淘汰了，在<code>macOS Sierra已经无法使用，iOS从来不支持</code>）本文所提及情况均限于ARC</p>
<h1 id="ARC下不同类型的block表现"><a href="#ARC下不同类型的block表现" class="headerlink" title="ARC下不同类型的block表现"></a>ARC下不同类型的block表现</h1><p>很多博文都提到过，block通过llvm编译后，会生成对应的三种Class的实例变量，分别是：<code>NSStackBlock</code>、<code>NSGlobalBlock</code>、<code>NSMallocBlock</code>，分配区域分别位于进程的栈，TEXT段，堆。ARC下为了简化block的内存管理，以及性能优化，llvm会对不同情形下的block进行不同的类型变化，</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">NSString</span> *string = <span class="string">@&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, <span class="built_in">NSStringFromClass</span>([^()&#123;&#125; <span class="keyword">class</span>]));</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, <span class="built_in">NSStringFromClass</span>([^()&#123;</span><br><span class="line">	<span class="keyword">int</span> b = a;</span><br><span class="line">&#125; <span class="keyword">class</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (^block1)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, <span class="built_in">NSStringFromClass</span>([block1 <span class="keyword">class</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (^block2)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">	<span class="built_in">NSString</span> *b = string;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, <span class="built_in">NSStringFromClass</span>([block2 <span class="keyword">class</span>]));</span><br></pre></td></tr></table></figure>

<p>猜猜输出是什么？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__NSGlobalBlock__</span><br><span class="line">__NSStackBlock__</span><br><span class="line">__NSGlobalBlock__</span><br><span class="line">__NSMallocBlock__</span><br></pre></td></tr></table></figure>

<p>从这里也可以总结出规律：</p>
<ol>
<li>如果block不捕获任何外部变量（包括了<code>Primitives</code>（基本类型）），既没有对外部任何对象retain，也没有copy基本类型，那么这个block不存在任何内存泄漏的风险，也不需要引用计数，所以类型为<code>__NSGlobalBlock__</code></li>
<li>如果block捕获了外部变量（包括基本类型），但并没有被任何对象所引用（retian），而是直接被用于直接执行或者发送消息，那么它不会有任何引用计数问题，类型为<code>__NSStackBlock__</code>。由于位于栈区，这个block在函数返回后将被销毁，不过请放心，在ARC下，因为没有被任何对象引用，所以它始终是安全的（一旦之后被引用，立即会由Runtime负责通过<code>Block_copy()</code>转换为<code>__NSMallocBlock__</code>）</li>
<li>通常情况下，如果block捕获了外部变量，且只要有对象持有（注意，无论引用是<code>__strong</code> 还是<code>__weak</code>还是<code>__copy</code>，参考<a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#blocks">llvm-blocks</a>），都会通过Runtime的<code>Block_copy()</code>和<code>Block_release()</code>，由编译器自动地将原本在栈的block拷贝到堆上，因此会像普通对象一样，交由ARC自动管理引用计数</li>
</ol>
<h1 id="block的影响"><a href="#block的影响" class="headerlink" title="__block的影响"></a>__block的影响</h1><p><code>__block</code>的关键字的作用大家都知道，默认情况下block是无法修改外部实例变量的（能读，也就是捕获），而经过__block修饰的实例变量可以通过block外修改。<br>但是的表现是否单纯可以概括为”捕获了一份实例变量到堆上，并修改了原来的引用”呢？</p>
<p>看看这个：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">__block <span class="built_in">NSMutableArray</span> *array1 = [[<span class="built_in">NSMutableArray</span> alloc] initWithCapacity:<span class="number">10</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;object addr: %p, pointer addr: %p&quot;</span>, array1, &amp;array1);</span><br><span class="line"><span class="keyword">void</span> (^block1)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;object addr: %p, pointer addr: %p&quot;</span>, array1, &amp;array1);</span><br><span class="line">&#125;;</span><br><span class="line">block1();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;object addr: %p, pointer addr: %p&quot;</span>, array1, &amp;array1);</span><br><span class="line"></span><br><span class="line">__block <span class="built_in">NSMutableArray</span> *array2 = [[<span class="built_in">NSMutableArray</span> alloc] initWithCapacity:<span class="number">10</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;object addr: %p, pointer addr: %p&quot;</span>, array2, &amp;array2);</span><br><span class="line"><span class="keyword">void</span> (^block2)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;object addr: %p, pointer addr: %p&quot;</span>, array2, &amp;array2);</span><br><span class="line">&#125;;</span><br><span class="line">block2();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;object addr: %p, pointer addr: %p&quot;</span>, array2, &amp;array2);</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object addr: 0x7ffe8a60d800, pointer addr: 0x7fff5548c988</span><br><span class="line">object addr: 0x7ffe8a60d800, pointer addr: 0x7ffe8a501db0</span><br><span class="line">object addr: 0x7ffe8a60d800, pointer addr: 0x7fff5548c988</span><br><span class="line"></span><br><span class="line">object addr: 0x7ffe8a401bf0, pointer addr: 0x7fff5548c950</span><br><span class="line">object addr: 0x7ffe8a401bf0, pointer addr: 0x7ffe8a401e98</span><br><span class="line">object addr: 0x7ffe8a401bf0, pointer addr: 0x7ffe8a401e98</span><br></pre></td></tr></table></figure>

<p>从中可以看出，由于Objective-C所有的实例变量都分配在堆上，而对于ARC下的block，如果不加<code>__block</code>关键字，那么在捕获后，外部的引用（Objective-C的指针，其实就是一个对象的引用，类似于Java）不会受到任何影响（只是对引用进行了拷贝）。而如果使用<code>__block</code>的话，那么会将原来的引用修改（注意到地址值的变化）。</p>
<p>当然，实际上的<code>__block</code>捕获的实例变量，会额外追加一些字段，用于Runtime进行内存管理和处理引用（参考<a href="http://clang.llvm.org/docs/Block-ABI-Apple.html#layout-of-block-marked-variables">block- marked-variables</a>）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">block_byref_foo</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *isa; <span class="comment">//isa指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Block_byref</span> *<span class="title">forwarding</span>;</span> <span class="comment">// block_byref结构体指针</span></span><br><span class="line">    <span class="keyword">int</span> flags;   <span class="comment">//引用计数数,retianCount</span></span><br><span class="line">    <span class="keyword">int</span> size;   <span class="comment">//分配大小</span></span><br><span class="line">    typeof(marked_variable) marked_variable;  <span class="comment">//实例变量的引用</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>因此可以知道，<code>__block</code>是好，但每个捕获变量都会多出至少20字节……虽然llvm的优化能力很好，盲目的标记<code>__block</code>也并不是一件好事（还会增加Runtime的开销和少量内存开销）</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>顺便一说，最近在补iOS开发基础知识，发现这个<a href="https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88%EF%BC%88%E4%B8%8B%EF%BC%89.md#38-%E5%9C%A8block%E5%86%85%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9block%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F">《招聘一个靠谱的iOS》答案-38题</a>的说法是有问题的，不存在什么”block的变量copy到堆区”，只要你的block被引用，那么这个block一定在堆区，而且并不是所谓的”加入__block后才copy”，，真正变化的，只是那个引用的地址变了罢了。大家希望看到后不要被误导……</p>
<p>PS：</p>
<ol>
<li>如果想了解更多Runtime实现block的方式和具体block的内存分布，可以参考<a href="http://clang.llvm.org/docs/Block-ABI-Apple.html">llvm-block</a></li>
<li>如果你真的需要MRC，可以参考这篇文章，附带一个小题目测试一下你的掌握情况<a href="http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/">MRC-block-quiz</a></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise大法好</title>
    <url>//promiseda-fa-hao</url>
    <content><![CDATA[<h1 id="Promise简介"><a href="#Promise简介" class="headerlink" title="Promise简介"></a>Promise简介</h1><p>Promise是一种解决异步回调问题而发展的编程语言特性，在各种语法中都有支持，比如在JavaScript（ECMAScript 6）／Java（8）／Node.js（0.12）都有原生的支持，而没有原生支持的语言更可以通过第三方框架来简单引入（比如大名鼎鼎的<a href="https://github.com/kriskowal/q">Q</a>）</p>
<h2 id="为什么说异步回调不是好的解决方案"><a href="#为什么说异步回调不是好的解决方案" class="headerlink" title="为什么说异步回调不是好的解决方案"></a>为什么说异步回调不是好的解决方案</h2><p>1.Callback Hell</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">loadScript(<span class="string">&quot;a.js&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    loadScript(<span class="string">&quot;b.js&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        loadScript(<span class="string">&quot;c.js&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            loadScript(<span class="string">&quot;d.js&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                loadScript(<span class="string">&quot;e.js&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;Fuck to load async files&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>2.依赖习惯编码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    doSomething(<span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            callback(err, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        callback(<span class="literal">null</span>, result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFunc(<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">anotherAsyncFunc(<span class="function"><span class="keyword">function</span>(<span class="params">result,err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(result)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Fuck why the first is result&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>还有种种，比如控制流难以书写（多个不同异步任务的条件判断和进度控制），try/catch无法捕获回调异常…………种种原因逼迫人们选择更好的解决方案</p>
<h2 id="Promise的核心"><a href="#Promise的核心" class="headerlink" title="Promise的核心"></a>Promise的核心</h2><blockquote>
<p>此处以Node.js（v0.12）为例，部分术语可能不同编程语言实现时不同，在JavaScript中，Promise是一个内置对象</p>
</blockquote>
<p><del>友情提示：以下东西仅为装逼，可跳过</del></p>
<ol>
<li><p>三种状态：<br> <code>fullfied</code>：被<code>resolve</code>后的状态<br> <code>rejected</code>：被<code>reject</code>后的状态<br> <code>pending</code>：初始状态</p>
</li>
<li><p>两个调用：<br> <code>then(onFulfilled, onRejected)</code>：在被<code>resolve</code>后执行<code>onFulfilled</code>函数,而被<code>rejected</code>后执行<code>onRejected</code>函数。并且实际上每次调用Promise的<code>then</code>都会返回一个<code>新的</code>Promise对象<br> <code>catch(onRejected)</code>：<code>then(undefined, onRejected)</code>的语法糖，被<code>rejected</code>后执行<code>onRejected</code>函数</p>
</li>
<li><p>状态转变：<br> <code>resolve(value)</code>：语法糖，返回一个立即被<code>fullfied</code>且转变为<code>fullfied</code>状态的Promise对象，等价于：</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p><code>reject(value)</code>：语法糖，返回一个立即被<code>resolve</code>且转变为<code>rejected</code>的Promise对象，等价于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li>控制流：<br> <code>Promise.all([promise1, promise2, ...])</code>：当<code>全部</code>Promise对象被<code>resolve</code>时调用<code>then(onFulfilled(value))</code>（value为数组的值）；或者任何一个Promise对象被<code>reject</code>时调用<code>catch(onRejected)</code><br> <code>Promise.race([promise1, promise2, ...])</code>：当<code>任何</code>Promise对象被<code>resolve</code>或者<code>reject</code>时调用<code>then(onFulfilled(value))</code>或者<code>catch(onRejected)</code></li>
</ol>
<h2 id="Promise的简单用法"><a href="#Promise的简单用法" class="headerlink" title="Promise的简单用法"></a>Promise的简单用法</h2><p>1.Easy Mode</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Wrong&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFunction().then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">OK</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>2.Normal Mode</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">asyncFunction().then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;First&quot;</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Second&quot;</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Fuck&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Start!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Start</span></span><br><span class="line"><span class="comment">OK</span></span><br><span class="line"><span class="comment">First</span></span><br><span class="line"><span class="comment">[Error: Fuck]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>3.Hard Mode</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anotherAsyncFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Wrong&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([asyncFunction(),anotherAsyncFunction()]).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;All:&quot;</span> + val);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&quot;All:&quot;</span> + err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([asyncFunction(),anotherAsyncFunction()]).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Race:&quot;</span> + val);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&quot;Race:&quot;</span> + err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Race:OK</span></span><br><span class="line"><span class="comment">All:Error: Wrong</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>拥抱Promise，告别Callback，你我值得拥有。连古老的OO圣教——Java大法都拥抱Lambda和Promise，你还在等什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> F.<span class="function">Promise&lt;JsonNode&gt; <span class="title">post</span><span class="params">(String formData)</span></span>&#123;</span><br><span class="line">   WSRequest request = client.url(url);</span><br><span class="line">   F.Promise&lt;WSResponse&gt; responsePromise = request</span><br><span class="line">           .setContentType(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">           .post(formData);</span><br><span class="line">   F.Promise&lt;JsonNode&gt; jsonNodePromise = responsePromise.map(value -&gt; &#123;</span><br><span class="line">       <span class="keyword">return</span> value.asJson();</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   responsePromise.onFailure(error -&gt; &#123;</span><br><span class="line">       Logger.error(error);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> jsonNodePromise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>Random Binary Search Tree －Treap</title>
    <url>//random-binary-search-tree-treap</url>
    <content><![CDATA[<h2 id="BST插入顺序与平衡性"><a href="#BST插入顺序与平衡性" class="headerlink" title="BST插入顺序与平衡性"></a>BST插入顺序与平衡性</h2><p>众所周知，二查搜索树(BST)的搜索、插入、删除的复杂度等于树高，所以平衡度越高，越接近$ O(nlogn) $，越有序越退化为$ O(n) $</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/3/9f/4b2394fd756bcf2edcee109bb18ef.png" alt="线性BST"><br><img src="http://dreampiggy-image.test.upcdn.net/image/e/a2/3419e63d7126ece4996634b3f7dad.png" alt="随机BST"></p>
<ul>
<li>对于左侧的BST来说，只有唯一的构造序列：$ &lt;1,2,\dots,14&gt; $</li>
<li>但对于右侧的BST，可以存在21964800种不同序列</li>
</ul>
<p>也就是说，随即插入序列到二叉树所形成的平衡度，将大于部分有序插入所形成的二叉树</p>
<p>形式化证明可以得到（具体证明过程，参见<a href="http://opendatastructures.org/ods-java/7_1_Random_Binary_Search_Tr.html#fig:rbst-records">Open Data Structures</a>：</p>
<p>对每个$ x \in{0,\ldots,{n}-1} $, x所需要的搜索长度（即深度）是 $ H_{x+1} + H_{n-x} - O(1) $</p>
<p>对每个$ x \in(-1,n) $，x所需要的搜索长度是$ H_{\lceil x \rceil} H_{n-\lceil x \rceil} $</p>
<h2 id="Treap-Random-BST实现"><a href="#Treap-Random-BST实现" class="headerlink" title="Treap - Random BST实现"></a>Treap - Random BST实现</h2><blockquote>
<p><a href="https://en.wikipedia.org/wiki/Treap">Treap-wikipedia</a></p>
</blockquote>
<p>Treap，顾名思义，就是<code>Tree</code>和<code>Head</code>的结合体，除了要满足BST的要求外，还需要满足堆的要求，即</p>
<ol>
<li> <code>BST</code>: 对每个结点，左子女的值 &lt; 根的值 &lt; 右子女的值</li>
<li> <code>Heap</code>: 对除了跟结点的每个结点，双亲结点的优先级要小于该结点的优先级</li>
</ol>
<p>所以Treap的每个结点除了包括BST结点的值value外，还需要包括一个唯一的优先级p</p>
<p>比如这样就是一个典型的Treap，每个结点表示为(value,p) <img src="http://opendatastructures.org/versions/edition-0.1e/ods-java/img1086.png" alt="Treap"></p>
<p>并且可以证明，由Heap的约束，最小优先级将成为根结点，而BST又保证了小于根的值将在左子树上，大于根的值在右子树</p>
<p>由于Heap的约束，我们可以认为Treap是按照优先级排序插入BST的，比如上述Treap可以由以下序列构造</p>
<p>$ (3,1), (1,6), (0,9), (5,11), (4,14), (9,17), (7,22), (6,42), (8,49), (2,99) $</p>
<h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>为了确保<code>Heap原则</code>，那么就需要对树进行旋转，在旋转中同时还要确保<code>BST原则</code>，比如这样的例子：</p>
<p><img src="http://opendatastructures.org/versions/edition-0.1e/ods-java/img1102.png" alt="BST旋转"></p>
<p>对w.value &lt; u.value，旋转将交换w和u的父子关系，同时将把原来的B放在新的儿子上。比如右旋，可以看作左旋和右旋是一个对称的操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(Node *u)</span> </span>&#123;</span><br><span class="line">    Node* w = u-&gt;left;</span><br><span class="line">    w-&gt;parent = u-&gt;parent;  <span class="comment">//parent -&gt; w</span></span><br><span class="line">    <span class="keyword">if</span> (w-&gt;parent != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (w-&gt;parent-&gt;left == u) &#123; <span class="comment">//u is left or right</span></span><br><span class="line">            w-&gt;parent-&gt;left = w;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            w-&gt;parent-&gt;right = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    u-&gt;left = w-&gt;right; <span class="comment">//u.left = B</span></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;left != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        u-&gt;left-&gt;parent = u;    <span class="comment">// B.parent = u</span></span><br><span class="line">    &#125;</span><br><span class="line">    u-&gt;parent = w;  <span class="comment">// w.right = u</span></span><br><span class="line">    w-&gt;right = u;</span><br><span class="line">    <span class="keyword">if</span> (u == root) &#123;   <span class="comment">//if u is root</span></span><br><span class="line">        root = w;</span><br><span class="line">        root-&gt;parent = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加-删除"><a href="#添加-删除" class="headerlink" title="添加/删除"></a>添加/删除</h2><ul>
<li>  添加</li>
</ul>
<p>比如，对上述的Treap，加入一个值1.5，生成的优先级为4，即插入结点为(1.5,4)。首先使用BST的Add，插入在(2,99)的左子女上。为了满足<code>Heap规则</code>，依次进行以下旋转：</p>
<p>99 &gt; 4 =&gt;右旋;<br>6 &gt; 4 =&gt; 左旋;<br>1 &lt; 4 =&gt; 停止;</p>
<p><img src="http://opendatastructures.org/versions/edition-0.1e/ods-java/img1108.png" alt="Treap插入"></p>
<p>由前面的引理，可以知道，旋转的次数为$ 2ln(n) + O(1) $，复杂度为$ O(logn) $</p>
<ul>
<li>  删除</li>
</ul>
<p>核心基本为添加的逆操作，对上述的Treap，删除一个结果(9)，那么将删除结点(9,17)。首先使用BST的Find，找到value为9的结点，然后将以(9,17)开始，向下不断旋转，直到最终为叶结点，然后把这个叶子剪去(Cut down)。</p>
<p>旋转原则：</p>
<ol>
<li>left = NULL &amp; right = NULL ，不动</li>
<li>left = NULL，左旋(right = NULL则右旋) <code>注:原文这里描述写反了</code></li>
<li>left.p &lt; right.p，右旋(right.p &lt; left.p则左旋)</li>
</ol>
<p>依次进行以下旋转：</p>
<p>right = NULL =&gt; 右旋;<br>right = NULL =&gt; 右旋;<br>叶结点 =&gt; 停止;</p>
<p><img src="http://opendatastructures.org/versions/edition-0.1e/ods-java/img1114.png" alt="Treap删除"></p>
<p>和添加相反，复杂度为$ O(logn) $</p>
<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p><code>构造</code>: $ O(logn) $ <code>查找</code>: $ O(logn) $ <code>添加</code>: $ O(logn) $ <code>删除</code>: $ O(logn) $</p>
<p>虽说都是$ O(logn) $，但是对比另一种高级数据结构<a href="https://en.wikipedia.org/wiki/Skip_list">Skip List(跳表)</a>，查找复杂度在常数上有不同：</p>
<p><code>Skip List</code>: $ elnn + O(1) \approx 1.884log(n) + O(1) $ <code>Treap</code>: $ 2ln(n) + O(1) \approx 1.386log(n) + O(1) $</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote>
<p>完整版C++实现，这里面的随机优先级，直接使用了value当种子srand()然后rand()获取随机数……（先进行BST的Add，确保value不会重复），实际中可以采用其他随机数方式获得更好的期望复杂度 （吐槽……开始没注意这是Java版伪代码，以后一定用Java或者JavaScript写……指针地狱）</p>
</blockquote>
<p>代码链接：<a href="http://www.dreampiggy.com/source/413-2/">Treap</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>React-Native -- 下一代UI编程思维</title>
    <url>//react-native-xia-yi-dai-uibian-cheng-si-wei</url>
    <content><![CDATA[<h1 id="React-Native-VS-Cocoa-Touch-–-下一代UI编程思维"><a href="#React-Native-VS-Cocoa-Touch-–-下一代UI编程思维" class="headerlink" title="React-Native VS Cocoa Touch – 下一代UI编程思维"></a>React-Native VS Cocoa Touch – 下一代UI编程思维</h1><h2 id="React-与状态"><a href="#React-与状态" class="headerlink" title="React 与状态"></a>React 与状态</h2><p><code>React.js</code>自从Facebook一推出，就受到Web前端工程师的强烈推崇。虽说曾经火过一时的<code>Angular.js</code>颠覆了前端的工程，但是<code>React</code>更多颠覆的，是下一代UI编程的思维。</p>
<p>传统UI编程，基本很多地方都需要将数据来源，绑定到对应的UI对象，比如用户点击了一个操作，更改了名称，那么你需要更新执行一个回调函数来处理点击操作，并且把新的数据更新原有的UI对象的属性，比如大概就是这样的东西</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">onClick</span>(sender)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> data <span class="operator">=</span> getData(sender);</span><br><span class="line">    <span class="keyword">self</span>.button.title <span class="operator">=</span> data.name;</span><br><span class="line">    <span class="keyword">self</span>.button.color <span class="operator">=</span> data.color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样虽然说直观，但是有很大的问题。试想，假如有很多种的回调函数，每个回调函数监听不同的操作，比如<code>onMounseDown</code>,<code>onMouseUp</code>,<code>onKeyDown</code>,<code>onScroll</code>……甚至根据不同的sender，我们会有不同的操作，我们就必须得手写很多机械的</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.xx <span class="operator">=</span> data.xx</span><br><span class="line"><span class="keyword">self</span>.xy <span class="operator">=</span> data.xy</span><br><span class="line">```swift</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">这类的代码，这就给日后维护和扩展带来了灾难，假如我要换一个<span class="type">UI组件，又得一个个检查是否赋值成功；假如我要把这个UI组件在新的UIView里面重用，我又得改动所有的赋值代码，对于大型项目这种UI对象成百上千，UI属性上万，这样是非常可怕的</span><span class="operator">。</span></span><br><span class="line"></span><br><span class="line">而`React`，就将所有的赋值，数据绑定，抽象成为一个个状态，不同的事件监听，就是不同的状态而已，而这些状态之间相互独立，不会受到某些全局变量更改而造成<span class="type">UI混乱的情况，更好的是，开发者不需要考虑到底这个属性什么时候赋值，是在数据更新之前还是之后，需不需要定时刷新这种无意义的苦力活上</span><span class="operator">。</span></span><br><span class="line"></span><br><span class="line">## <span class="type">React</span><span class="operator">-</span><span class="type">Native</span> <span class="type">VS</span> <span class="type">Cocoa</span> <span class="type">Touch</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> 完整代码：[<span class="type">Tutorial</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">看看`<span class="type">React</span><span class="operator">-</span><span class="type">Native</span>`的sample，需求就是实现一个电影列表显示的<span class="type">View</span><span class="operator">。</span>类似这样：</span><br><span class="line"></span><br><span class="line"><span class="operator">!</span>[iOS][<span class="number">2</span>] <span class="operator">!</span>[<span class="type">Android</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">这段代码中，只有<span class="type">View和ViewModel（Model就是临时的JSON），React用状态把UI属性和数据绑定起来，从而避免了事件监听手动判断时机来赋值</span></span><br><span class="line"></span><br><span class="line">```jsx</span><br><span class="line"><span class="keyword">var</span> <span class="type">AwesomeProject</span> <span class="operator">=</span> <span class="type">React</span>.createClass(&#123;</span><br><span class="line">  <span class="comment">//初始状态，不渲染</span></span><br><span class="line">  getInitialState: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      dataSource: new <span class="type">ListView</span>.<span class="type">DataSource</span>(&#123;</span><br><span class="line">        rowHasChanged: (row1, row2) <span class="operator">=&gt;</span> row1 <span class="operator">!==</span> row2,</span><br><span class="line">      &#125;),</span><br><span class="line">      loaded: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//模型层变动导致状态改变，渲染</span></span><br><span class="line"></span><br><span class="line">  fetchData: function() &#123;</span><br><span class="line">    fetch(<span class="type">REQUEST_URL</span>)</span><br><span class="line">      .then((response) <span class="operator">=&gt;</span> response.json())</span><br><span class="line">      .then((responseData) <span class="operator">=&gt;</span> &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">          dataSource: this.state.dataSource.cloneWithRows(responseData.movies),</span><br><span class="line">          loaded: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .done();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//渲染层，绑定状态和UI属性</span></span><br><span class="line"></span><br><span class="line">  render: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="operator">&lt;</span><span class="type">ListView</span> <span class="comment">//这里是JSX语法，在JS里面返回标签</span></span><br><span class="line">        dataSource<span class="operator">=</span>&#123;this.state.dataSource&#125;</span><br><span class="line">        renderRow<span class="operator">=</span>&#123;this.renderMovie&#125;</span><br><span class="line">        style<span class="operator">=</span>&#123;styles.listView&#125;</span><br><span class="line">      <span class="operator">/&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>完整代码：<a href="https://github.com/lizhuoli1126/iOS-Demo-Project">iOS Demo</a></p>
</blockquote>
<p>相比来说，原生Cocoa Touch的实现，就要丑陋的多了，尤其是渲染部分绑定UI对象的属性和数据来源，假如你有多处数据来源，多种UI属性，你就得写很多判断来保证你的UI对象的属性符合预期的赋值顺序。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化UI对象，调用模型去获取数据</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">   <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">   fetchData()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数据，需要手动维护状态，比如开启indicator(旋转等待条)，数据获取成功后渲染</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchData</span>()</span> &#123;</span><br><span class="line">   indicator.startAnimating()</span><br><span class="line">   request(.<span class="type">GET</span>, <span class="type">API_URL</span>, parameters: [<span class="string">&quot;apikey&quot;</span>: <span class="type">API_KEY</span>, <span class="string">&quot;page_limit&quot;</span>: <span class="type">PAGE_SIZE</span>])</span><br><span class="line">       .responseJSON&#123; <span class="keyword">_</span>, <span class="keyword">_</span>, data, <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">           <span class="keyword">self</span>.render(<span class="type">JSON</span>(data<span class="operator">!</span>))</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染UI对象，需要手动维护状态，比如关闭indicator(旋转等待条)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">render</span>(<span class="params">result</span>:<span class="type">JSON</span>)</span> &#123;</span><br><span class="line">   indicator.stopAnimating()</span><br><span class="line">   movieJSON <span class="operator">=</span> result</span><br><span class="line">   <span class="keyword">self</span>.tableView.reloadData()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这都算好的了，TableView会自动回调你的代码，返回这个TableView里面的Cell个数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> movieNum <span class="operator">=</span> movieJSON[<span class="string">&quot;movies&quot;</span>].arrayValue.count</span><br><span class="line">   <span class="keyword">return</span> movieNum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可怕的地方，需要手动赋值给UI对象的属性</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAtIndexPath</span> <span class="params">indexPath</span>: <span class="type">NSIndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> cell <span class="operator">=</span> <span class="keyword">self</span>.tableView.dequeueReusableCellWithIdentifier(<span class="string">&quot;movieIdentifier&quot;</span>, forIndexPath: indexPath)</span><br><span class="line">        <span class="keyword">as!</span> <span class="type">MovieTableViewCell</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> row <span class="operator">=</span> indexPath.row</span><br><span class="line"></span><br><span class="line">   <span class="comment">//手动维护状态，JSON解析再赋值给对应的UI对象，这里省略了UI对象的代码和样式</span></span><br><span class="line">   <span class="comment">//（一般可以通过Interface Builder做或者专门一个类写UI代码）</span></span><br><span class="line">   cell.movieTitle.text <span class="operator">=</span> movieJSON[<span class="string">&quot;movies&quot;</span>][row][<span class="string">&quot;title&quot;</span>].stringValue</span><br><span class="line">   cell.movieYear.text <span class="operator">=</span> movieJSON[<span class="string">&quot;movies&quot;</span>][row][<span class="string">&quot;year&quot;</span>].stringValue</span><br><span class="line">   <span class="keyword">var</span> movieImageUrl <span class="operator">=</span> movieJSON[<span class="string">&quot;movies&quot;</span>][row][<span class="string">&quot;posters&quot;</span>][<span class="string">&quot;thumbnail&quot;</span>].stringValue</span><br><span class="line"></span><br><span class="line">   <span class="comment">//最可怕是渲染中还需要新的数据，再回调模型，就很难维护了</span></span><br><span class="line">   <span class="keyword">if</span> cell.movieImage.image <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">       request(.<span class="type">GET</span>, movieImageUrl).response&#123; <span class="keyword">_</span>, <span class="keyword">_</span>, data, <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">           <span class="keyword">let</span> movieImage <span class="operator">=</span> <span class="type">UIImage</span>(data: data <span class="keyword">as!</span> <span class="type">NSData</span>)</span><br><span class="line">           cell.movieImage.image <span class="operator">=</span> movieImage</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br><span class="line">```swift </span><br><span class="line"></span><br><span class="line"># <span class="type">React</span> 与函数式</span><br><span class="line"></span><br><span class="line">`React`更多的，就是一种类似函数式的想法，把<span class="type">UI对象属性，数据来源，当作一个Monad包裹起来，传统意义上的不同数据来源进行UI属性赋值，相当于这个Monad经过不同的函数作用，达到状态的切换，好处就是大大减少了开发者手动维护UI属性的工作，而且可以达到更高的开发效率</span><span class="operator">。</span>而且再也不怕扩展了，因为这时候可以把多个组件分配给不同的人，每个人完全不需要管别人内部的变量名是什么，<span class="type">UI属性是什么，只要把自己的状态管理好，Model层接口统一，剩下的合并即可</span><span class="operator">。</span></span><br><span class="line"></span><br><span class="line"># <span class="type">React</span> 与效率</span><br><span class="line"></span><br><span class="line">既然提到了状态，因为`React`采取`VirtualDOM`来diff需要进行状态更新的<span class="type">UI对象，每次确保了只更新属性发生改变的部分</span><span class="operator">。</span>实现也很高效，使用了一个普通的二叉树`vtree`<span class="operator">。</span>每个结点`vnode`就是对应的<span class="type">Tag，比如</span>&lt;<span class="type">Image</span>&gt;之类，结点还存储了一个<span class="class"><span class="keyword">struct</span>用来保存这些<span class="title">Tag</span>的属性（比如<span class="title">Image</span>的<span class="title">size</span>）</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">其中的<span class="title">diff</span>算法可以一看……代码地址在：[<span class="title">GitHub</span>-<span class="title">vtree</span>][5]</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">```<span class="title">javascript</span></span></span><br><span class="line"><span class="class">//主要逻辑，就是对<span class="title">b</span>树进行<span class="title">reorder</span>，找出<span class="title">a</span>树与<span class="title">b</span>树的同结点不同属性的<span class="title">diff</span></span></span><br><span class="line"><span class="class">//剩下可以无痛<span class="title">patch</span>的部分只需要下面的<span class="title">for</span>循环就可以处理</span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">aChildren</span> = <span class="title">a</span>.<span class="title">children</span></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">orderedSet</span> = <span class="title">reorder</span>(<span class="title">aChildren</span>, <span class="title">b</span>.<span class="title">children</span>)</span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">bChildren</span> = <span class="title">orderedSet</span>.<span class="title">children</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">len</span> = <span class="title">aLen</span> &gt; <span class="title">bLen</span> ? <span class="title">aLen</span> : <span class="title">bLen</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">for</span> (<span class="title">var</span> <span class="title">i</span> = 0; <span class="title">i</span> &lt; <span class="title">len</span>; <span class="title">i</span>++) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> leftNode <span class="operator">=</span> aChildren[i]</span><br><span class="line">   <span class="keyword">var</span> rightNode <span class="operator">=</span> bChildren[i]</span><br><span class="line">   index <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="operator">!</span>leftNode) &#123;</span><br><span class="line">       <span class="keyword">if</span> (rightNode) &#123;</span><br><span class="line">           <span class="comment">//这里处理的多余的结点，直接加到b树上即可</span></span><br><span class="line">           apply <span class="operator">=</span> appendPatch(apply,</span><br><span class="line">               new <span class="type">VPatch</span>(<span class="type">VPatch</span>.<span class="type">INSERT</span>, null, rightNode))</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       walk(leftNode, rightNode, patch, index)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是核心reorder代码，目标找到是同一结点不同属性的diff，多出来的不需要管</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历a树，如果b树中结点集合含有a的key，标记下b树中这些key，更新旧的标记</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; aChildren.length; i++) &#123;</span><br><span class="line">   <span class="keyword">var</span> aItem = aChildren[i]</span><br><span class="line">   <span class="keyword">var</span> itemIndex</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (aItem.key) &#123;</span><br><span class="line">       <span class="keyword">if</span> (bKeys.hasOwnProperty(aItem.key)) &#123;</span><br><span class="line">           <span class="comment">// Match up the old keys</span></span><br><span class="line">           itemIndex = bKeys[aItem.key]</span><br><span class="line">           newChildren.push(bChildren[itemIndex])</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// Remove old keyed items</span></span><br><span class="line">           itemIndex = i - deletedItems++</span><br><span class="line">           newChildren.push(<span class="literal">null</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历b树，添加上面标记的所有key到一个集合，暂时未排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; bChildren.length; j++) &#123;</span><br><span class="line">   <span class="keyword">var</span> newItem = bChildren[j]</span><br><span class="line">   <span class="keyword">if</span> (newItem.key) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!aKeys.hasOwnProperty(newItem.key)) &#123;</span><br><span class="line">           newChildren.push(newItem)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//......</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对上述集合，真实的b树删除多余结点，直到上述集合为空为止，复杂度O(n)</span></span><br><span class="line"><span class="keyword">var</span> simulate = newChildren.slice()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; bChildren.length;) &#123;</span><br><span class="line"><span class="keyword">var</span> wantedItem = bChildren[k]</span><br><span class="line">simulateItem = simulate[simulateIndex]</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后删除剩下虚拟的结点</span></span><br><span class="line"><span class="keyword">while</span>(simulateIndex &lt; simulate.length) &#123;</span><br><span class="line">   simulateItem = simulate[simulateIndex]</span><br><span class="line">   removes.push(remove(simulate, simulateIndex, simulateItem &amp;&amp; simulateItem.key))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整体的复杂度，达到了O(M+N)，已经是理论下界了。比起手动管理状态来说，效率可以说是直接持平，甚至对部分滥用事件监听的写法效率会更高。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然我并不喜欢UI编程，但是自从图形化出现之后，UI已经成为了继数据结构、算法外，面向终端用户的应用又一个大工程。</p>
<p>从最早的指令式跳转赋值UI，函数指针响应处理，到中期的面向对象，消息发送回调事件，手动管理属性，在到如今的React以状态和VirualDOM来绑定数据和组件。</p>
<p>UI编程其实也是在不断进化的，也许今后会有更好的开发方式让我们这群不会写UI的人也能够轻松写起来UI。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Swift</tag>
        <tag>ReactJS</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native之Redux架构入门</title>
    <url>//react-nativezhi-reduxjia-gou-ru-men</url>
    <content><![CDATA[<blockquote>
<p>如今也是入了移动iOS开发的坑，最近不仅学习了Core Animation的部分知识，还接触到React Native，这一Facebook出品的React for Native Platform框架，其中React本身入门是相对简单的，而Redux入门就相对困难了，因此在这里总结一下，最后有自己写的Slides可以参考</p>
</blockquote>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>为什么需要Redux</p>
</blockquote>
<ol>
<li>RN的state（可变，子组件不可见）和props（不可变，子组件可见）的设计，在面对大型项目时候，容易因为不经意修改state造成状态混乱，组件渲染错误</li>
<li>RN使用了Virtual DOM，不需要Target绑定-&gt;Action修改UI属性，只要当状态变化，render新状态下的组件，数据单向传递，而MVC的设计模式存在双向数据流</li>
<li>RN不易进行测试，Redux提供了非常方便的mock测试方式</li>
</ol>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装Redux：</span><br><span class="line">	npm install --save redux</span><br><span class="line">安装React Native和Redux绑定库：</span><br><span class="line">	npm install --save react-redux</span><br><span class="line">安装Redux Thunk异步Action中间件：</span><br><span class="line">	npm install --save redux-thunk</span><br></pre></td></tr></table></figure>

<h1 id="Redux-原则"><a href="#Redux-原则" class="headerlink" title="Redux 原则"></a>Redux 原则</h1><ol>
<li>单一数据源<br> <strong>描述：</strong> 整个应用的 state 被储存在一个对象树中，对象树存在于唯一的 store 中<br> <strong>说明：</strong> Redux把所有state集中管理，避免了各处临时的状态造成的不可控</li>
<li>State 是只读的<br> <strong>描述：</strong> 惟一改变 state 的方法就是触发 action<br> <strong>说明：</strong> action 是一个含有 type 属性的普通JS对象，type 属性可以用具体的string常量，来表示事件</li>
<li>使用纯函数来执行修改<br> <strong>描述：</strong> 编写 reducers 来描述对应action如何修改 state<br> <strong>说明：</strong> reducer函数是纯函数，无副作用，定义为reducer(state, action) =&gt; newState，一般可以用 switch(action.type) 来判断不同的action，同时return一个新的state</li>
</ol>
<h1 id="Redux-数据流"><a href="#Redux-数据流" class="headerlink" title="Redux 数据流"></a>Redux 数据流</h1><p><img src="http://dreampiggy-image.test.upcdn.net/image/6/ac/b29d443e4577ad15dd62c800c5fc4.png"></p>
<ol>
<li>Component触发一个Action Creator（用来dispatch某个具体的Action的函数），dispatch到Store中    </li>
<li>Reducer进行判断，通过(state, action) =&gt; newState得到新的状态，写回到Store中    </li>
<li>Store绑定到Component，把state赋回Component的props，然后Component就可以render了，整个流程也比较清晰    </li>
</ol>
<h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>Action是一个普通JS对象，至少包括一个<code>type</code>属性代表事件，其他属性可以用来传递数据。实践上对一个流程定义一个函数，流程可以包括网络请求，最后返回Action，这个函数叫Action Creator</p>
<p>Type:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">&#x27;ADD_TODO&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>Action：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> action = &#123; <span class="attr">type</span>: ADD_TODO, <span class="attr">text</span>: <span class="string">&#x27;Build my first Redux app&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>Action Creator：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123; <span class="attr">type</span>: ADD_TODO, <span class="attr">text</span>: input &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/a/b8/1e6f0b3d3f531817fb9bf7aed7ad3.png"><br><img src="http://dreampiggy-image.test.upcdn.net/image/2/5c/d3050cfb96161668957d6b51fe00a.png"></p>
<h1 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h1><p>Reducer是一个函数，根据Store中的前一次的state，和Store中被dispatch过来的Action，返回一个新的state并写入Store，即： <code>(state, action) =&gt; newState</code></p>
<p>Reducer：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toDoReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">		<span class="keyword">case</span> ADD_TODO:</span><br><span class="line">			<span class="keyword">return</span> &#123;<span class="attr">text</span>: action.text,<span class="attr">completed</span>: <span class="literal">false</span>&#125;</span><br><span class="line">		<span class="attr">default</span>:</span><br><span class="line">			<span class="keyword">return</span> state;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>返回的是新state，如果需要保留部分旧state值，使用…state（ES7的对象展开语法，对对象会浅拷贝对应属性，这里等价于Object.assign({}, state, newState)），对应合并state的话只会合并一层，而子属性会被覆盖掉，对复杂state需要手动合并</li>
<li>为了遵循Reducer的纯函数性，不应该直接修改state的值，然后return state，除非使用Immutable.js（见后）</li>
<li>实际中，应当把不同模块的代码，构造不同的Reducer，最后再合并（因为纯函数性，无副作用）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;redux’;</span></span><br><span class="line"><span class="string">import todos from &#x27;</span>./todos’;</span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">&#x27;./counter’;</span></span><br><span class="line"><span class="string">export default combineReducers(&#123; todos, counter &#125;)</span></span><br></pre></td></tr></table></figure>

<p>举例：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/4/2d/bbcfa2df98958ec1a4c027b7a883e.png"></p>
<h1 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h1><p>Store存储了一个Provider的<code>所有的state</code>，同时接收dispatch过来Action。Redux提供的每个Provider根组件有唯一对应的Store。实践中可以拆分多个业务模块到多个Provider组件，每个Provider组件利用Redux架构，绑定自己的Store，模块内的业务流程写到对应的Action Creator中</p>
<p>Store：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/BusListReducer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br></pre></td></tr></table></figure>

<ol>
<li>Store的读写，可以调用getState()来获取当前state，用dispatch()来分发Action改变state</li>
<li>Store创建的时候，除了需要绑定Reducer，还可以应用中间件，比如日志中间件，React Thunk中间件（针对异步Action Creator）    </li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="function"><span class="params">store</span> =&gt;</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;dispatching&#x27;</span>, action);</span><br><span class="line">	<span class="keyword">let</span> result = next(action);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;next state&#x27;</span>, store.getState());</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createStoreWithMiddleware = applyMiddleware([logger, thunk])(createStore);</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/e/c6/3c631d1a7bd31016e1fdf45e63428.png"></p>
<h1 id="Component绑定"><a href="#Component绑定" class="headerlink" title="Component绑定"></a>Component绑定</h1><p>整个控制流，就差最后Store中的state绑定到组件了，我们通过Redux提供的<code>connect()</code>，绑定需要的state以及Action Creator到你的组件的props上，这样组件就可以通过props来调用Action Creator，或者根据不同props来render()不同的组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: state.name</span><br><span class="line">    <span class="attr">age</span>: state.age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">actions</span>: bindActionCreators(actions, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(BusList);</span><br></pre></td></tr></table></figure>

<ol>
<li>注意connect返回的就是绑定后的React Component，用的时候记得export default</li>
</ol>
<p>举例：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/9/19/10bde796c214db134bb166bbac540.png"></p>
<h1 id="State合并和Immutable-js"><a href="#State合并和Immutable-js" class="headerlink" title="State合并和Immutable.js"></a>State合并和Immutable.js</h1><blockquote>
<p>为什么State合并很困难</p>
</blockquote>
<ol>
<li>Reducer中，通过…state对象扩展符，再合并action的state，这种合并是一层合并，不会合并子属性而会直接覆盖掉，意味着对于复杂的state，如果想要修改子层级的属性，就得手动创建一个新的对象，并合并部分state的属性，而不是用…state直接扩展</li>
<li>Reducer为了保持纯函数性，应当禁止对state直接修改部分属性，但直接…state的拷贝在大量项目state树庞大的情形下会有一定的效率影响</li>
<li>在1，2两条的情形下，如何在不修改原始state的前提上，又能返回一个原state属性部分变化后的newState就成了一个问题</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">4</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价写法</span></span><br><span class="line"><span class="comment">// let g = Object.assign(&#123;&#125;, a, &#123;</span></span><br><span class="line"><span class="comment">// 	b: &#123; d: 5 &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="keyword">let</span> g = &#123;</span><br><span class="line">	...a,</span><br><span class="line">	<span class="attr">b</span>: &#123; <span class="attr">d</span>: <span class="number">5</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(g); <span class="comment">// &#123; b: &#123; d: 5 &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Immutable.js解决了什么</p>
</blockquote>
<ol>
<li>Immutable.js的实现复杂不可变对象的高效copy和部分修改，内部通过Persistent Data Structure（持久化数据结构），即一个不可变的对象树。在使用旧数据创建新数据时，通过部分结构共享，如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享</li>
<li>这样既避免了DeepCopy造成的性能开销，又能达到所有返回的数据仍然是不可变的，符合了reducer(state,action) =&gt; newState的纯函数性</li>
</ol>
<blockquote>
<p>具体如何实践配合Redux</p>
</blockquote>
<ol>
<li>对state中<code>部分复杂的属性</code>，可以使用Immutable的数据单独包裹，在组件render()处单独解包所有Immutable对象</li>
<li>如果state本身就含有各种复杂属性，可以直接<code>把state本身包裹</code>，用Immutable.Map表示state本身，然后通过Immutable的API操作修改部分属性，返回一个新的Immutable对象作为newState，在组件的mapStateToProps()方法中，把Immutable对象包裹的state解包为JavaScript的对象</li>
<li>对于其他组件，可以在<code>shouldComponentUpdate()</code>方法中，通过Immutable的比较，来避免无用的re-render</li>
</ol>
<p>举例：ListView简单应用（避免re-render)</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/e/8c/42c765d2eea6cb90e2eef9dfae949.png"><br><img src="http://dreampiggy-image.test.upcdn.net/image/b/71/a6d9a50d4ff1c8eebbd462279c073.png"><br><img src="http://dreampiggy-image.test.upcdn.net/image/7/db/e8fcbe8a12f6d2796e64a37e5c4ae.png"><br><img src="http://dreampiggy-image.test.upcdn.net/image/9/7f/7b039ac17e7828a2fe4f3d033ad73.png"></p>
<h1 id="更多思考"><a href="#更多思考" class="headerlink" title="更多思考"></a>更多思考</h1><ol>
<li>Action的定义规范？（对于不需要rerender的所有Action定义一个单独type？）<br>Reducer中state复杂多级结构，如何规范合并得到newState？（Immutable.js必要性）</li>
<li>大型组件的render方法解耦合方式（switch？）</li>
<li>移动端是否有服务端渲染的必要？（dispatch过去的Action如果需要复杂计算，把整个store交给服务端来计算）</li>
<li>网络请求使用fetch API封装是否足够？</li>
<li>Native Module的JS端引入（callback？还是Promise + async await）</li>
<li>Mock测试的具体实践？（Action，Reducer，Component三个方面）</li>
</ol>
<h1 id="Slides"><a href="#Slides" class="headerlink" title="Slides"></a>Slides</h1><ul>
<li><a href="https://raw.githubusercontent.com/dreampiggy/iOS-Resume/master/React%20Native%E8%BF%9B%E9%98%B6-Redux%E6%9E%B6%E6%9E%84%E5%92%8C%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.pptx">React Native进阶-Redux架构和状态管理.pptx</a></li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="http://facebook.github.io/react-native/docs">React Native官方文档</a></li>
<li><a href="http://redux.js.org/">Redux官方文档</a></li>
<li><a href="http://cn.redux.js.org/">Redux官方文档（中文）</a></li>
<li><a href="https://github.com/camsong/blog/issues/3">Immutable.js解析</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a></li>
<li><a href="http://redux.js.org/docs/recipes/UsingObjectSpreadOperator.html">Object Spread Syntax（对象展开符）</a></li>
<li><a href="http://www.jianshu.com/p/14933fd9c312">React Native Redux架构参考</a></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>React Native</tag>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>Retroactive Data Structure</title>
    <url>//retroactive-data-structure</url>
    <content><![CDATA[<blockquote>
<p>MIT Open Course</p>
</blockquote>
<p><a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-851-advanced-data-structures-spring-2012/lecture-videos/session-2-retroactive-data-structures/">MIT-retroactive-data-structure</a></p>
<h1 id="Time-line"><a href="#Time-line" class="headerlink" title="Time line"></a>Time line</h1><p>Insert(time, ops); Delete(time, ops); Query(time, query);</p>
<p>How to insert ops into two times? -&gt; BST || linked list</p>
<p>How to deal with side effect? -&gt; save all the ops except <code>delete</code></p>
<p><code>Partial Retroactive</code></p>
<p>Query always done at present =&gt; time = $ \infty $</p>
<p><code>Full Retroactive</code></p>
<p>Query can done at whatever time</p>
<h1 id="What-about-formal-defination-of-partial-amp-full"><a href="#What-about-formal-defination-of-partial-amp-full" class="headerlink" title="What about formal defination of partial &amp; full"></a>What about formal defination of partial &amp; full</h1><p>$ query(t,A \cup B) \equiv f(query(t,A),query(t,B)) , f \ is \ O(1)$</p>
<h1 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h1><p><code>segment tree</code> : BST on time</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e5/Segment_tree_instance.gif" alt="title"></p>
<p><code>Commutative updates</code> =&gt; 可交换updates</p>
<p>$ x.y = y.x $</p>
<p><code>Invertible updates</code> =&gt; 可逆updates</p>
<p>$ x.x^{-1} = \emptyset $</p>
<p>Delete(time, ops) === Insert(now, ops^{-1})</p>
<h1 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h1><p>Dynamic hashing</p>
<p>Priority queue</p>
<ul>
<li>  query will cost $ O(lgn) $</li>
<li>  store in BBST (balanced binary search tree)</li>
<li>  leaves : insert =&gt; store by time not value</li>
</ul>
<p>General Transformation</p>
<ul>
<li><p>  rollback: change r time in the past will cost $ O(r) $</p>
</li>
<li><p>  lower bound: $ \Omega(r) $</p>
</li>
</ul>
<h1 id="More-complicated-Non-oblivious-Retroactive"><a href="#More-complicated-Non-oblivious-Retroactive" class="headerlink" title="More complicated - Non-oblivious Retroactive"></a>More complicated - Non-oblivious Retroactive</h1><p>which means after one insert or delete ,you can get <code>the query that change</code></p>
<h1 id="Just-a-little-bit-code"><a href="#Just-a-little-bit-code" class="headerlink" title="Just a little bit code"></a>Just a little bit code</h1><p><code>retroactive queue</code>: <a href="https://github.com/lizhuoli1126/Functional.js#retroactivedata-structure">GitHub-Functional.js</a></p>
<p>Reference: <a href="http://erikdemaine.org/papers/Retroactive/_TALG/paper.pdf">Retroactive Data Structures - ERIK D. DEMAINE, JOHN IACONO, STEFAN LANGERMAN</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift之AnyClass与动态类型</title>
    <url>//swiftzhi-anyclassyu-dong-tai-lei-xing</url>
    <content><![CDATA[<blockquote>
<p>这次写一下关于Swift中AnyClass的使用以及动态类型的实例化和使用场景</p>
</blockquote>
<h1 id="AnyClass与AnyObject"><a href="#AnyClass与AnyObject" class="headerlink" title="AnyClass与AnyObject"></a>AnyClass与AnyObject</h1><p>Swift中，任何自定义的对象都是AnyClass的子类，类似于Java的Object类（但注意，这和Objective-C的NSObject不同，后者在Swift中是专门的UIKit或者AppKit框架里面定义的类型，而非语言所规定的类型）</p>
<blockquote>
<p>AnyClass<br>The protocol to which all class types implicitly conform.</p>
</blockquote>
<p>Declaration<br><code>typealias AnyClass = AnyObject.Type</code></p>
<blockquote>
<p>AnyObject</p>
</blockquote>
<p>protocol AnyObject { … }<br><code>The protocol to which all classes implicitly conform.</code></p>
<p>但是注意，这个AnyObject.Type是一个毕竟是一个接口的Property，所以只能在函数的参数里面使用，如果想要直接获取某个类（而非实例）的类型，使用类名.self即可；如果想要获取一个实例的类的类型，使用.dynamicType；对了，如果对象是NSObject的实例（iOS开发中常用），用classForCoder也是一个选择</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span>(<span class="params">s</span>: <span class="type">AnyClass</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="type">Test</span>.<span class="keyword">self</span></span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="type">Test</span>().dynamicType</span><br><span class="line"><span class="keyword">let</span> c:<span class="type">AnyClass</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>.classForCoder <span class="comment">//注意此时加了classForCoder的方法调用，编译器会推导出&quot;&quot;是一个NSString的实例而不是String</span></span><br><span class="line">f(a) <span class="comment">//Test</span></span><br><span class="line">f(b) <span class="comment">//Test</span></span><br><span class="line">f(c) <span class="comment">//NSString</span></span><br></pre></td></tr></table></figure>

<h1 id="动态实例化"><a href="#动态实例化" class="headerlink" title="动态实例化"></a>动态实例化</h1><p>既然我们有了某个AnyObject的Type，这样我们就可以直接构造出一个类型的实例。使用AnyObject都有的.init方法即可，当然，AnyObject本身并没有init的构造方法……</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> a.<span class="keyword">init</span>() <span class="comment">// d is an instance of Test</span></span><br><span class="line"><span class="keyword">let</span> e <span class="operator">=</span> (c <span class="keyword">as!</span> <span class="type">NSString</span>.<span class="keyword">Type</span>).<span class="keyword">init</span>(stringLiteral: <span class="string">&quot;test&quot;</span>) <span class="comment">// e is &quot;test&quot;</span></span><br></pre></td></tr></table></figure>

<p>当然，你也许肯定奇怪那个required的init是什么意思，其实这是为了避免出现你使用的这个Test.Type有继承的子类，然后子类的构造函数中使用了这个Type来构造父类这种边界情况出现（考虑的真细……）</p>
<blockquote>
<p>Use an initializer expression to construct an instance of a type from that type’s metatype value. For class instances, the initializer that’s called must be marked with the required keyword or the entire class marked with the final keyword.</p>
</blockquote>
<p>而且对于一个Protocol，可以用.Protocol来获取这个Protocol的类型（还是AnyClass），也可以用self来统一处理，因为实际上</p>
<p><code>metatype-type(.self) -&gt; type.Type | type.Protocol</code></p>
<p>这样的话，有了动态就可以开始干活了</p>
<h1 id="Swift的反射"><a href="#Swift的反射" class="headerlink" title="Swift的反射"></a>Swift的反射</h1><p>或许你也想，既然我有了动态的类型实例，那么是不是能通过类似Java的反射，获取某个类型的所有Property，然后直接访问这个Property呢？答案也是有的，不过在Swift中很少用到，这里用到到了Mirror</p>
<blockquote>
<p>struct Mirror { … }<br>Representation of the sub-structure and optional “display style” of any arbitrary subject instance.</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> whatThisProperty:<span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">name</span>:<span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.whatThisProperty <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p <span class="operator">=</span> <span class="type">Person</span>(name: <span class="string">&quot;Bob&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> mirror <span class="operator">=</span> <span class="type">Mirror</span>(reflecting: p)</span><br><span class="line">mirror.children.forEach &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>.label<span class="operator">!</span>)</span>: <span class="subst">\(<span class="variable">$0</span>.value)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的children返回的是一个AnyForwardCollection，也是可以像数组一般用index来访问或者forEach遍历的，不过索引顺是序按照你的Property的声明顺序</p>
<h1 id="最后的小应用"><a href="#最后的小应用" class="headerlink" title="最后的小应用"></a>最后的小应用</h1><p>由于我也不怎么会写iOS，有时候遇到这样一种情况：<br>我提供了一个3D Touch的按钮，四个按钮会对应四种ViewController，iOS提供的API可以获取到用户点击的那个按钮对应的设置的一个字符串值，那么，我可以这样来玩……</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3D Touch 传入的字符串来判断返回某个ViewController</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">shortcutToViewController</span>(<span class="params">type</span>:<span class="type">String</span>)</span> -&gt; <span class="type">UIViewController</span>.<span class="keyword">Type</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> type &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;pe&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">RunningViewController</span>.<span class="keyword">self</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;curriculum&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CurriculumViewController</span>.<span class="keyword">self</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;card&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">SeuCardViewController</span>.<span class="keyword">self</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;nic&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NicViewController</span>.<span class="keyword">self</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="type">UIViewController</span>.<span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是用来判断字符串来产生对应的ViewController.Type的，然后，在真正需要实例化一个新的ViewController来显示一个View的时候，再实例化</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pushToViewController</span>(<span class="params">vc</span>: <span class="type">UIViewController</span>.<span class="keyword">Type</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 确保要显示的ViewController不是顶层显示的ViewController</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> duplication <span class="operator">=</span> navigationController<span class="operator">?</span>.topViewController<span class="operator">?</span>.isKindOfClass(vc) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> duplication &#123; <span class="comment">// 检查失败，重复的ViewController，不需要跳转</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> viewController <span class="operator">=</span> vc.<span class="keyword">init</span>(nibName: <span class="string">&quot;<span class="subst">\(vc.classForCoder())</span>&quot;</span>, bundle: <span class="literal">nil</span>) <span class="comment">// 初始化ViewController</span></span><br><span class="line">    navigationController<span class="operator">?</span>.pushViewController(viewController, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这也是一种比较奇怪的方式……不过如果不这样，就会导致在主类和上层里面引入过多的Switch Case或者导致代码中出现纯字符串定义的nibName，这对以后重构非常不利。</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>嗯，好久没写东西了……主要最近在学编译原理，之后会有几篇讲解通过Java实现一个简单的支持CFG的Yacc(误)的东西……顺便就当复习编译原理的Parser部分了。</p>
<p>Swift如今开源了：<a href="https://github.com/apple/swift">Swift</a>，不到几天Star就超过了2年出头的Rust(lol)……现如今Star也到了2W5的程度</p>
<p>虽然UIKit和AppKit这种宝贵的财富Apple肯定不会开源，不过Swift标准库的实现也是越来越完善，而且也有Linux的版本，很多第三方的库开始加入了对Linux的支持（非面向iOS和OS X开发的，比如对SQLite，Redis的wrapper）</p>
<p>Swift作为一个Rust的对手，一个完全抛弃了C的现代语言，之后在除客户端开发外，更可能的领域就是系统编程和服务端编程了吧。希望能够在在安全性，易用性，效率上达到一个更大的高度，让我们这种开发者也能用的爽，用的顺。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Top Down --自顶向下的文法分析</title>
    <url>//latexce-shi</url>
    <content><![CDATA[<h1 id="Top-Down-–自顶向下的文法分析"><a href="#Top-Down-–自顶向下的文法分析" class="headerlink" title="Top Down –自顶向下的文法分析"></a>Top Down –自顶向下的文法分析</h1><p>读入：读取下一个待匹配字符进去stack，如果为#且栈顶也为＃，成功；如果此时栈顶不为#，失败<br>检查：如果栈顶为终结符，回到读入；<br>否则，随机选择一个规则（假如存在多个规则可以满足的话），使栈顶字符与左部（非终结符）匹配，匹配，用规则的右部（即终结符）替换，整个过程叫做规约(Derivation)<br>    如果找到匹配的规则，回到读入；<br>    否则，BackTracking，回溯到上一次的检查，换另一个规则</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="type">Stack</span> <span class="operator">==</span> <span class="type">None</span> <span class="type">Terminal</span> &#123;</span><br><span class="line">	choose rule <span class="keyword">do</span> divide &#123;</span><br><span class="line">		from right to left, push into stack</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">match &#123;</span><br><span class="line">	pointer move right to read</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not match &#123;</span><br><span class="line">	backtrack</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>example:</p>
<ol>
<li>$ S \to a \ S \to Sa $, 给定 “aa”</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@1</span><br><span class="line">S# | aa#</span><br><span class="line">a# | aa#</span><br><span class="line"># | a# -&gt; backtrack</span><br><span class="line">S# | aa#</span><br><span class="line">@2</span><br></pre></td></tr></table></figure>

<p>存在问题： </p>
<ol>
<li>左递归问题：假如一直选择规则2，将导致无穷循环，无法停止     –&gt;解决：设计文法的时候，消除左递归文法，具体见下专题：<br>$ A \to ** \mid * \ =&gt; \ A \to *B \ B \to \epsilon \ B \to * $</li>
<li>BackTracking花费时间        –&gt;解决：加入预测，对所有的非终结符加入到预测表中，在进行检查选定一个规则的时候，预读下一个字符，查表检查规则产生的右部是否以预测字符相同，相同继续，不相同直接返回错误，避免过多backtracking，具体见下专题：</li>
</ol>
<h2 id="左递归"><a href="#左递归" class="headerlink" title="左递归"></a>左递归</h2><ol>
<li>定义：<br> 直接左递归：$ P \to P\alpha \mid \beta \ $<br> 间接左递归：$ \ P \to Aa \ A \to Bb \ B \to Pc $，可以存在多个中间非终结符，依次传递</li>
<li>消除：<br> 直接左递归：$ P \to \beta P^* \ P^* \to \epsilon \ P^* \to \alpha P^* $<br> 间接左递归：<ol>
<li>首先，对所有参与递归的非终结符，排序，$ B \ A \ P $(其实顺序无关，但是把起始符放在最后，更能简化最终语法，其他顺序产生语法较为复杂）</li>
<li>依次检查非终结符，如果产生的右部，不含有在该非终结符前面序列的终结符，不处理。比如$ B \to Pc $，$ P $在$ B $之后，故直接处理下一个终结符<br> 否则，含有在序列之前的终结符，比如$ A \to Bb $含有$ B $，且$ B $在$ A $之前，则直接把所有$ B $使用$ B $的产生式替换，然后处理下一个终结符<br>$ A \to Pcb  $</li>
<li>直到所有的非终结符被处理，其中可能产生直接左递归式：<br>$ B \to Pc \ A \to Pcb \ P \to Pcba $</li>
<li>对这个直接左递归式，把$ cba $看作$ \alpha $，使用直接左递归消除：<br>$ B \to Pc \ A \to Pcb \ P \to P^* \ P^* \to \epsilon \ P^* \to cbaP^* $</li>
<li>最后一步进行简化，比如此时的$ P \to P^* $，可替换之后的所有$ P^* $为$ P $，多行的非终结符合并</li>
<li>最终结果：$ B \to Pc \ A \to Pcb \ P \to cbaP \mid \epsilon $</li>
</ol>
</li>
</ol>
<h2 id="预测表"><a href="#预测表" class="headerlink" title="预测表"></a>预测表</h2><ol>
<li>定义：<br> 行为所有的终结符以及#，列为所有的非终结符。某一个产生式对应匹配（$ 列 \to 行首字符 $)，比如$ E \to iE^* $匹配[E,i]。匹配的元素标记为1，不匹配的为0</li>
<li>使用：<br> 在Top Down的时候，如果检查选择规则时候，查表发现该规则非终结符在表中的标记为1，则继续，否则直接返回错误，无需继续BackTracking</li>
</ol>
<h1 id="Bottom-Up-–自底向上"><a href="#Bottom-Up-–自底向上" class="headerlink" title="Bottom Up –自底向上"></a>Bottom Up –自底向上</h1><p>读入：读取下一个待匹配字符进去stack，如果为#，停机<br>检查：是否可以被reduction，即可以被某个产生式右部匹配，用左部分替换<br>如果可以，pop待匹配字符，push那个被reduct的字符进去stack，回到检查<br>如果不行，回到读入</p>
<p>存在问题：</p>
<ol>
<li>对于重复的字符匹配，比如 $ A \to ** $，出现一个＊就会被规约，导致错误。使用Handling来特殊处理$ \epsilon $</li>
</ol>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Web入门后端架构有感——Node.js</title>
    <url>//webru-men-hou-duan-jia-gou-you-gan-node-js</url>
    <content><![CDATA[<p>说来也是惭愧，从大一暑假接触到第一门Web后端语言——PHP之后，自己对Web应用程序的认识却一直没有多大改变，对整个Web服务器的运行也没有清晰的概念。不过，这个大二的寒假里面，由于需要架设一个Web多人协作编辑平台，我接触到了这个非常热门尽管国内应用不多的后端架设方式——<code>Node.js</code></p>
<p>说到Node.js，其实很多人也都知道，一个JavaScript在本地的运行时，基于Google的V8引擎。很可惜，由于自己当时学习Web主要走的后端路线，自己对JavaScript的认识也就靠的是w3school的简单说明和了解以及简单的jQuery用法罢了。学Node.js对我印象最大的，就是事件驱动的回调函数。（其实还是与自己并未真正接触到函数式编程有关）</p>
<p>举个例子，就是最简单的Hello World Web应用程序。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">  response.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure>

<p>在JavaScript里面，函数是和变量同地位的一等公民，它可以被传递进当为参数，这种写法初次接触JavaScript的人肯定感觉非常不适应（尤其从Java,PHP转来的），不过习惯之后便发现这样带来了不错的易读性。这里面，那个匿名函数function(request,response)就是一个回调函数，Node.js内置的http对象通过listen进行8888端口的监听，一旦有任何访问便会调用这个回调函数，执行那三行来发送一个Hello World的HTML文本回去</p>
<p>Node.js编写Web程序的体验绝对是Java和PHP很难达到的，因为你不仅要写一个Web应用程序，必须自己写一个HTTP服务器程序。不过这也意味着你可以干更多的事而不用局限于PHP这种解释器一样执行的代码，很多人甚至不知道在一行简单的echo “Hello World!” 的背后的Web应用程序究竟是怎样工作的，你也可以不用再和Apache，Nginx这种Web应用程序的使用打交道，你可以自己写一个类似的出来，定制化更高。   上面关于Node.js的简单认识也就先这样，下面我想说说关于Web应用程序的非常简单的架构组织。</p>
<p>一个Web应用程序，可以分这几个模块来进行编写： </p>
<ol>
<li> <strong>HTTP模块</strong></li>
<li> <strong>路由模块</strong></li>
<li> <strong>请求处理模块</strong></li>
<li> <strong>数据库模块</strong></li>
<li> <strong>外部模块</strong></li>
</ol>
<p>结合MVC模式，可以在请求处理模块这个大模块中进行分层，专门分出View层（使用模版来生成HTML也好，直接生成也好），Controller层（进行一定的业务逻辑判断），Model层（一般抽象出来的类来封装数据，包括了数据库，IO，外部数据等）。</p>
<p>简单的说明一下：首先需要一个HTTP服务器模块，通过监听计算机的端口（一般是80端口）来发现所有对80端口的访问。正如上面的http.listen()一样。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;./node_modules/express/lib/express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>

<p>接下来，你便需要一个简单的路由模块。所谓路由，就是把对不同URL的访问根据URL的不同，指派给不同的请求处理程序来进行相应功能的使用。比如<code>http://dreampiggy.com/help</code>这个URL，你可以获取/help来指定用一个专门负责帮助说明的请求处理程序，返回一个关于帮助说明的HTML页面。对Web应用非常重要的Ajax访问的接口一般也是特定的URL，当然，需要POST/GET过来一定的AppID和Session来防止其他人恶意调用。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(pathname == <span class="string">&quot;/&quot;</span>)&#123;</span><br><span class="line">	handler.home(request,response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	response.writeHead(<span class="number">404</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">	response.write(<span class="string">&quot;404 not found&quot;</span>);</span><br><span class="line">	response.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>路由的目的一般就是把URL请求分离出各参数，然后向请求处理程序传递，不推荐在这个模块进行过多的判断处理。对于请求处理程序而言，就是主要我们需要写Web应用的地方。我们可以通过MVC的方式进行分层，这时候就是你大展伸手的时候了。请求处理程序的Model层少不了和数据库打交道，不过我还是推荐把数据库访问抽象出来，放到一个新的模块，用请求处理模块来调用它。Node.js的模块导出和函数导出也是非常常见的，合理运用让自己的Web应用逻辑更为清晰。</p>
<p>外部模块包含很多，比如你要对XSS注入加以防范，可以通过一定的外部XSS模块或者自己手写一个XSS来使用，然后在请求处理程序的View层进行过滤（当然这种做法不是很好，简单举例）。使用Node.js的一大好处就是你可以随时加入很多非常好的他人写好的模块（npm大法），而且对于不满意的地方自己进行修改，可以加快开发进度（比如我这个协作编辑平台需要的Markdown语法解析器就是用他人的加以改造的）</p>
<p>题外话，对于习惯OO的人来说，JavaScript在继承，多态方面等常见OO的用法上面比较薄弱，而且又由于JavaScript的弱类型语言，你不能使用重载函数来对不同的参数进行判断，所以建议对于Node.js来说，可以使用比如typeof来进行判断再加以封装，多态方面可以通过虚函数来使用。JavaScript透露出的函数式编程还需要我一点点理解，正所谓学什么语言用什么语言思考，谨记不要随意就把PHP/Java的套路往JavaScript上套。</p>
<p>就到这吧……或许几个月回过头来看这篇文章基本是废话，不过这确实是现在的我的一点感悟。</p>
<p><strong>学才能深入，才能知不足。</strong></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Web幻灯片利器（前端工程师福利）——NodePPT</title>
    <url>//webhuan-deng-pian-li-qi-qian-duan-gong-cheng-shi-fu-li-nodeppt</url>
    <content><![CDATA[<p>提到幻灯片，人人第一直觉就想到一个东西：PPT（Microsoft Office PowerPoint），也许还有人可能会小声说到 Keynote，或者Prezi，能提到reveal.js的基本少之又少……</p>
<p>PowerPoint：<a href="http://products.office.com/zh-CN/powerpoint">http://products.office.com/zh-CN/powerpoint</a></p>
<p>Keynote：<a href="http://www.apple.com/cn/mac/keynote">http://www.apple.com/cn/mac/keynote</a></p>
<p>Prezi：<a href="http://prezi.com/">http://prezi.com</a></p>
<p>reveal.js：<a href="http://lab.hakim.se/reveal-js">http://lab.hakim.se/reveal-js</a></p>
<p>不过，常年用这些东西，未免也太”Low”了，我们需要追求更Fasion的幻灯片制方法。</p>
<p>那么，就轮到我们今天的主角登场：NodePPT</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/9/7c/5f478c96f02982f6155b5206c40a3.png"></p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/9/aa/6c75dff6a7972a25e3d7617b2fdbc.png"></p>
<p>怎么样？Markdown语法支持，完美的响应式设计，多种切换动画随意上，自定义主题（CSS上手的时候到了），炫丽的双屏， 远程控制，你还在等什么？？</p>
<p>使用起来很简单，GitHub上项目Fork一下，然后用在ppts/demo.md里面，按照Markdown语法写你的PPT内容，然后找一个服务器挂起来运行起来就O了，像我这种穷人只好再依靠SAE啦～</p>
<p>GitHub上地址链接：<strong><a href="https://github.com/ksky521/nodePPT">https://github.com/ksky521/nodePPT</a></strong></p>
<p>其实现在这个东西还有一些小小的Bug（比如连按下一页，有些提醒动画会不消失……Overview模式下部分页面的切换动画还会显示等等……），希望有致人一起贡献一下，更加完善此项目～</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Web</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Web项目3-基于Node.js的多人协作编辑平台的设计实现</title>
    <url>//webxiang-mu-3-ji-yu-node-jsde-duo-ren-xie-zuo-bian-ji-ping-tai-de-she-ji-shi-xian</url>
    <content><![CDATA[<p>终于，我参加的第三个Web项目基本已经完成了Beta版本的整体架构和实现。</p>
<p>这次的Web项目要求，是制作一个基于Web（或者移动Web）的在线协作编辑平台，主要支持Markdown语法及同步预览，类似于<a title="Google Docs" href="https://docs.google.com/document" target="_blank">Google Docs</a>或者<a title="Office Online" href="https://office.live.com/start/default.aspx" target="_blank">Office Online</a>这样的东西（但是绝对不可能达到国际一流大厂的水平）</p>
<p>由于只有我们4个人开发（其中2个还算专门前端开发），所以尽可能减少后端开发压力，经过初步的讨论，最终选择了使用Node.js作为后端开发语言。Node.js强力的非阻塞IO和异步事件非常适合我们这种IO密集型的应用。而对于协作的部分，我们选择使用<a title="socket.io" href="http://socket.io/" target="_blank">socket.io</a>来进行这种密集文本数据的通信和广播，也能很大的减少开发周期。</p>
<p>嘛，整体架构大概这样，虽然很丑陋，对于我这种没有实际架构Web经验以及Beta版来说，已经足够了。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/e/bc/22d0e801243e1c22305ce85f897b3.png"></p>
<p>话不多说，作为一个多人编辑的平台，首先就需要传统的Web应用的老三样：用户管理，文档管理，项目管理，今天就主要说这些。</p>
<h3 id="一、用户管理"><a href="#一、用户管理" class="headerlink" title="一、用户管理"></a><strong>一、用户管理</strong></h3><p>作为最基础的Web提供的服务，也许不用多说，用PHP当年也是基本这个样子，包括注册登录，信息验证，加上增删改查(REST) <span style="font-size: 13px;"> </span> 借助于Node的模块导出(Module.exports)，我们可以把不同层次的模块分层，比如说，我们可以建立一个user.js模块，存储底层的对user数据库的操作，在上层的account.js模块中直接进行整合，达到上层的用户注册，登陆，编辑，查询，删除，邀请，接受，拒绝的功能。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/4/2c/cbc5296c83216b037c0bd6ac607d0.png"></p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/8/fd/7de6621bfaa012093edbdc6194923.png"></p>
<p>上篇已经说过，Node.js是异步事件编程的，所有对数据库的访问都是异步的，也就是说你不能用同步编程控制顺序来进行验证。怎么办呢？两种方法，要么用回调函数处理（对于著名的callback hell问题，可以使用<a title="async" href="https://github.com/caolan/async" target="_blank">async</a>或者Promises处理，如<a title="Q" href="https://github.com/kriskowal/q" target="_blank">Q</a>），个人的丑陋方法是通过将数据库查询结果传入回调函数来进行调用，分层调用起来也能向面向对象时候使用对象调用一样方便。</p>
<p>信息验证，主要就是指Session，关于这个可以在之后写一下，在此只提供方法：我使用Redis数据库来存取sessionID，存入一个Hashmap中，顺便可以绑定一些常用的信息，比如验证码，状态，减少对MySQL数据库的压力。相关的用法可以查阅：<a title="node-redis" href="https://github.com/mranney/node_redis" target="_blank">node-redis</a>、<a title="express-session" href="https://github.com/expressjs/session" target="_blank">express-session</a>、<a title="cookie-parser" href="https://github.com/expressjs/cookie-parser" target="_blank">cookie-parser</a>等</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/0/fd/64e2f6885fda48496392b72787e42.png"></p>
<h3 id="二、文档管理"><a href="#二、文档管理" class="headerlink" title="二、文档管理"></a><strong>二、文档管理</strong></h3><p>做为比较重要的文档管理，其实也莫过于增删改查四个接口，只不过所有修改你当然需要对用户进行验证，所以这里在设计时需要数据库同步user表的内容到docs表，而且验证的时候可以复用user.js模块中的验证。<br><img src="http://dreampiggy-image.test.upcdn.net/image/9/b4/c5f6392ba72369c19f6ffb1eaa5ef.png"></p>
<p>这里现在是第一版的，之后我会写怎么讲markdown文本内容转入Redis数据库，来满足实时协作编辑的需要。甚至为了功能可以提供一个预览文档的功能，在Redis中进行缓存，可以快速的提取预览，减少对真正读写文档的IO压力。</p>
<h3 id="三、项目管理"><a href="#三、项目管理" class="headerlink" title="三、项目管理"></a><strong>三、项目管理</strong></h3><p>项目管理，当然不再是简单的增删改查啦，不过还是REST那一套，你只需要复用user.js和docs.js中对于文档，对于用户的接口，然后再次封装一下，就可以满足文档的管理（主要是项目新建，删除，编辑，项目用户邀请，权限管理-这个暂时没做，项目中新建文档，查询文档，编辑文档，删除文档这几个接口），数据库表也就随意做一个</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/0/f2/f8a644c7bd838a96205147c28a7bf.png"></p>
<p>主要的接口大概就是这些，配合路由以及Session验证，就可以出来一个简单的API调用。对于我们这个项目，路由就是这种丑陋的写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	app.post(<span class="string">&#x27;/api/user/register&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">		handler.userRegister(req,res);</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="comment">//User Login</span></span><br><span class="line">	app.post(<span class="string">&#x27;/api/user/login&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">		handler.userLogin(req,res);</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="comment">//User Captcha</span></span><br><span class="line">	app.get(<span class="string">&#x27;/api/user/captcha&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">		handler.userCaptcha(req,res);</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="comment">//User Logout</span></span><br><span class="line">	app.post(<span class="string">&#x27;/api/user/logout&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">		handler.userLogout(req,res);</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">//User Info</span></span><br><span class="line">	app.post(<span class="string">&#x27;/api/user/info&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">		handler.userInfo(req,res);</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="comment">//User Invite</span></span><br><span class="line">	app.post(<span class="string">&#x27;/api/user/invite&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">		handler.userInvite(req,res);</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="comment">//User Accept</span></span><br><span class="line">	app.post(<span class="string">&#x27;/api/user/accept&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">		handler.userAccept(req,res);</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="comment">//User Reject</span></span><br><span class="line">	app.post(<span class="string">&#x27;/api/user/reject&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">		handler.userReject(req,res);</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>

<p>而最后handler负责对路由来的请求进行验证，进行缓存，以及进行POST参数提取，静态文件返回等等这种中间件的杂事，controller不需要request对象，model不需要request和response对象两者，这样也能减少藕合度，便于单元测试。（其实感觉这层和controller有重复，不过暂时先这样，加快开发）</p>
<p>一些小东西，比如说验证码，session处理什么的，灵活使用网上的node_modules进行封装，然后便可以快速使用了，想要了解底层实现也可以自己看看源码，对之后开发很重要。</p>
<p>说实话，Node开发比当年用PHP开发难度要大，因为你不可避免要接触到很多HTTP协议的规定，网络编程的知识，而PHP就是纯粹一个模版让你使用，不需要太多编程或者网络知识，对深入学习其实是很不利的。当年对于PHP中Session的理解就是<code>$_SESSION[&#39;name&#39;]</code>这样用，然后另一个也看就可以访问到，却不知道Session的原理，真是太天真了……</p>
<p>先到这里吧，下一篇主要说明</p>
<p><strong>如何设计协作以及对<a title="socket.io" href="http://socket.io" target="_blank">socket.io</a>的使用</strong>，来满足实时协作编辑。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode自带的UI调试工具</title>
    <url>//xcodezi-dai-de-uidiao-shi-gong-ju</url>
    <content><![CDATA[<h2 id="Xcode-or-Reveal"><a href="#Xcode-or-Reveal" class="headerlink" title="Xcode or Reveal"></a>Xcode or Reveal</h2><p>在iOS开发中，UI调试总是一个大问题……原始的暴力调试（View强行着色然后看，或者在@Selector中直接把<code>viewForLastBaselineLayout</code>或者<code>viewForFirstBaselineLayout</code>）利用<code>Swizzle</code> Hook，然后Debug输出相应的内容（比如View的属性，描述符等等）。</p>
<p>这是一个好方法……但是过于暴力，而且非常不直观。虽然iOS开发者都知道的<a href="http://revealapp.com/">Reveal</a>是好东西，然而价格并不是人人都买得起……（不过对iOS专业开发者确实是一个必备的工具）。其实Xcode 7自带了一套UI调试的工具，熟悉使用之后也是非常好用。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用方法很简单，首先自然得运行项目，然后Run(Command R)，然后切换到Debug栏(Command 6)，点击左边栏最右侧的图表，选择<code>View UI Hierarchy</code>即可。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/d/b8/3ee5a4bd1289d16d36db566f3bf1e.png"></p>
<h3 id="UI列表"><a href="#UI列表" class="headerlink" title="UI列表"></a>UI列表</h3><p>进入UI Debugger视图后，App会被lldb暂停，左侧为所有当前的UI对象，以及它们的继承顺序。注意，此时的UIView对象按照由上到下，对应了UIView的层级顺序（即UIView.subviews)，最上方为最底层的View（对应subviews atIndex 0)，最下方即当前的顶层视图。点击对应的UIView可以在右侧的图形化视图中看到。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/a/72/a576918da1fc5658bccaab351b669.png"></p>
<h3 id="层级预览"><a href="#层级预览" class="headerlink" title="层级预览"></a>层级预览</h3><p>右侧的图形化视图，默认下是显示了所有视图以及它们的外边框，并且以实际显示(非3D层次)。点击下方的立方体按钮切换到3D预览（像不像Reveal？）</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/5/8b/c05da0308cc5f1b90e1ee80e14756.png"></p>
<h3 id="配合检查器"><a href="#配合检查器" class="headerlink" title="配合检查器"></a>配合检查器</h3><p>点击控件也可在左侧标记出对象，可以在右侧的Object Inspector来查看它们的属性，还能看到不同View的约束在真实运行时候的表现状态，对于使用大量Autolayout和约束的应用来说非常方便。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/0/4a/c340caefd7bd60c6deb7dd07eef43.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>怎么样，虽然相比Reveal虽然不能实时Debug，但可以用Debug的<code>Continue exec</code>来使App恢复再继续Debug……而且有着非常详细的图形化和属性检测，还有官方支持……对于大部分开发者来说基本足够了，也不必真心追求昂贵的Reveal来支持UI Debug。</p>
<blockquote>
<p>补充：Xcode 7自带的UI Debugger由于在对UIView绘图时，使用了在iOS 9才加入的<code>viewForFirstBaselineLayout</code><br>而iOS 8上使用的<code>viewForBaselineLayout</code>被deprecated，因此默认无法正确调试，如果需要在iOS 8及以下的模拟器或者真机上进行UI Debug，可以参考别人提供一个Swizzle替换</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIView</span> (<span class="title">FixViewDebugging</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    Method original = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewForBaselineLayout));</span><br><span class="line">    class_addMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewForFirstBaselineLayout), method_getImplementation(original), method_getTypeEncoding(original));</span><br><span class="line">    class_addMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewForLastBaselineLayout), method_getImplementation(original), method_getTypeEncoding(original));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Xcode</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发中使用Swift来完成异步事件</title>
    <url>//ioskai-fa-zhong-shi-yong-swiftlai-wan-cheng-yi-bu-shi-jian</url>
    <content><![CDATA[<p>异步事件编程，其实并不是什么新东西了，基本所有涉及到GUI的，网络请求的，数据库读写的，都会有它的身影。</p>
<p>异步事件，就是说这一个代码或者代码块，并不会阻塞程序的运行，程序会立即执行下一条语句，而这条语句，会在相应的方法调用结束之后，执行它自身的回调函数发送一些信号，来表明这个异步事件完成。就像你约会提前1小时到见面地点，先去买点东西踩点什么的（……），等GF/BF到了之后短信通知你，你就立即回来。而不是一直在原地等到对方过来（……）</p>
<p>最早使用异步开发，是在使用JavaScript来开发Web前端的时候，<strong>XMLHttpRequest</strong>或者<strong>jQuery</strong>的**$.ajax**中，都会用到回调函数，来指明成功或者失败之后的处理方法。当对应的网络请求得到响应之后，会调用响应的成功或者失败的回调函数，然后执行里面相应的方法，这大大提升了前端的效率，不会在网络请求时整个页面卡住，而且也不需要一次次轮询看是否有响应，简化了代码的复杂性。</p>
<p>这点Node.js中更为常见，不过也更能表现中滥用异步事件编程的问题。新人使用Node.js总会发现基本任何东西都是异步的，数据库是异步的，IO文件操作是异步的，Session读写是异步的，甚至获得Request对象都是异步的。这就导致很多人一直在嵌套回调函数，导致了著名的<a href="http://www.tuicool.com/articles/Ur2EfmZ">Callback Hell</a></p>
<p>在Node.js中，解决方案有非常成熟的<a href="https://github.com/caolan/async">Async</a>，更有号称能用同步思维写异步的<a href="https://github.com/then/promise">Promises</a>，都是非常棒的解决方案。前者的本质就是一个自动生成回调的封装……，后者则是一个真正意义上的全新的解决方案。</p>
<p>而在Swift和iOS开发中，也有必须用到异步事件编程的地方。除了View层的简单UI和Controller之间的交互以外（这部分一般不需要手写代码处理异步交互或者顺序），其他很多地方需要这些知识。例如网络请求的异步调用，请求队列的处理（虽然可以一个网络请求就是一个线程，但这种方法的效率不高，而且容易导致线程间冲突），SQLite数据库大量数据的读写，本地存储的大量数据读写，复杂UI的渲染顺序等等……这些都是需要进行异步编程的，而不能让同步的代码阻塞住整个应用或者UI。</p>
<p>举个例子，这里是一个UI顺序加载的动画……</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">schoolLifeClicked</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> mydrawerController <span class="operator">=</span> <span class="keyword">self</span>.mm_drawerController <span class="comment">//一个用TableView实现的应用侧边栏抽屉View</span></span><br><span class="line">    <span class="keyword">let</span> schoolLifeViewController:<span class="type">SchoolLifeViewController</span> <span class="operator">=</span> <span class="type">SchoolLifeViewController</span>(nibName: <span class="string">&quot;SchoolLifeViewController&quot;</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">let</span> navSchoolLifeViewController <span class="operator">=</span> <span class="type">CommonNavViewController</span>(rootViewController: schoolLifeViewController)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.mm_drawerController.toggleDrawerSide(<span class="type">MMDrawerSide</span>.<span class="type">Left</span>, animated: <span class="literal">true</span>, completion:&#123;(complete) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> complete&#123;<span class="comment">//如果成功拉出抽屉</span></span><br><span class="line">            mydrawerController.setCenterViewController(navSchoolLifeViewController, withCloseAnimation: <span class="literal">true</span>, completion: <span class="literal">nil</span>)<span class="comment">//设置主视图</span></span><br><span class="line">            mydrawerController.closeDrawerAnimated(<span class="literal">true</span>, completion:<span class="literal">nil</span>)<span class="comment">//关闭抽屉</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)<span class="comment">//一个闭包，成功后调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，Swift很多时候也可以依靠回调函数，把一个闭包扔进去当参数，然后执行，从而控制这种异步事件的流程……</p>
<p>但是，这种方法写起来，就会回到和JS那种匿名函数闭包扔进去当参数一样，小范围用还可以，一旦你要进行复杂的流程控制，比如一系列异步事件，AB同时执行，AB同时完成后执行C，C执行完成后执行D……这种控制下写出来的代码和JavaScript的callback hell是一样的，难以维护。</p>
<p>怎么办呢？其实自己实现一个语法糖或者函数队列来执行也不难，不过这里可以推荐一下GitHub上非常厉害的库，大家有兴趣也要认真看看源码（虽然源码是Objective-C的……但是慢慢来） 链接： <a href="https://github.com/duemunk/Async">Async</a>这个利用了OS X 10.10和iOS8的<a href="http://en.wikipedia.org/wiki/Grand_Central_Dispatch">GCD</a>技术，只能在这个平台以上 <a href="https://github.com/josephlord/Async.legacy">Async.legacy</a>兼容OS X 10.9和iOS7</p>
<p>怎么使用呢？参考人家的Readme，用语法糖可以很简单的使用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Async</span>.userInitiated &#123;</span><br><span class="line">    println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">&#125;.main &#123;</span><br><span class="line">    println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#125;.background &#123;</span><br><span class="line">    println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#125;.background &#123;</span><br><span class="line">    println(<span class="string">&quot;2 all the same&quot;</span>)</span><br><span class="line">&#125;.main &#123;</span><br><span class="line">    println(<span class="string">&quot;stop&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于异步事件的特点，所以整个输出可能就会是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">stop</span><br><span class="line">2 all the same</span><br></pre></td></tr></table></figure>

<p>不要大惊小怪哦。利用这个就可以从繁重的callback中解放出来，简单的处理异步事件的顺序，并且获得很高的性能，这也是网络请求和数据库访问等必须要考虑的地方……</p>
<p>最后，我还是多看看关于异步事件，闭包的知识，对这些知识有了更深的了解，不仅对iOS开发，对Web开发，客户端开发，并行计算算法的实现等都会十分有帮助。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发学习-用继承，静态类封装方法</title>
    <url>//ioskai-fa-xue-xi-yong-ji-cheng-jing-tai-lei-feng-zhuang-fang-fa</url>
    <content><![CDATA[<p>iOS开发中，如果不进行适当的封装，使用协议或者继承类来进行开发，你就会遇到传说中的ViewController（以后简称VC） Hell的问题……</p>
<p>比如说，我们先声网App中为了调用接口，做简单的判断，会有如下的垃圾代码（前辈遗留下来的）：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> color <span class="operator">=</span> <span class="type">UIColor</span>(red: <span class="number">153</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">204</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">204</span><span class="operator">/</span><span class="number">255</span>, alpha: <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">self</span>.navigationController<span class="operator">?</span>.navigationBar.barTintColor <span class="operator">=</span> color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.httpController.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Config</span>.shareInstance().isNetworkRunning <span class="operator">=</span> <span class="type">CheckNetwork</span>.doesExistenceNetwork()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="type">Config</span>.<span class="type">UUID</span> <span class="operator">==</span> <span class="literal">nil</span> <span class="operator">||</span> <span class="type">Config</span>.<span class="type">UUID</span>!.isEmpty</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Tool</span>.showErrorHUD(<span class="string">&quot;去信息门户登录一下吧:)&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> <span class="operator">!</span><span class="type">Config</span>.shareInstance().isNetworkRunning</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Tool</span>.showErrorHUD(<span class="string">&quot;貌似你没有联网哦&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Tool</span>.showProgressHUD(<span class="string">&quot;正在更新校园网信息&quot;</span>)</span><br><span class="line">        sendNicAPI()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendNicAPI</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nicURL <span class="operator">=</span> <span class="string">&quot;http://herald.seu.edu.cn/api/nic&quot;</span></span><br><span class="line">    <span class="keyword">let</span> parameter:<span class="type">NSDictionary</span> <span class="operator">=</span> [<span class="string">&quot;uuid&quot;</span>:<span class="type">Config</span>.<span class="type">UUID</span>!]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.httpController.postToURLAF(nicURL, parameter: parameter, tag: <span class="string">&quot;nic&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">didReceiveDicResults</span>(<span class="params">results</span>: <span class="type">NSDictionary</span>, <span class="params">tag</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> content:<span class="type">NSDictionary</span> <span class="operator">=</span> results[<span class="string">&quot;content&quot;</span>] <span class="keyword">as?</span> <span class="type">NSDictionary</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> tag <span class="operator">==</span> <span class="string">&quot;nic&quot;</span>&#123;</span><br><span class="line">            firstSend <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            <span class="type">Tool</span>.showSuccessHUD(<span class="string">&quot;获取信息成功&quot;</span>)</span><br><span class="line">            println(content.allKeys)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到了吗，每个VC开头都得这样写一发，如果我们有20多个功能呢？会变成什么样子？</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/9/39/e8ffcb7a5101d2e7acd62c6d72e09.png"></p>
<p>所以，这样下去是绝对不行的，必须对整个乱七八糟的初始化，发送请求，请求接受进行封装，这里就会用到Swift最有用的协议，代理，以及闭包了。</p>
<p>这个首先通过协议和代理，闭包放在下一篇。</p>
<p>协议，顾名思义，也就是其他语言里面的接口（C++的抽象类也差不多） 由于Swift不支持普通类型（Int之流）设置为Static，类方法如果是静态，必须加class关键字（我觉得这个很有槽点），只有Struct和Enum可以直接用Static（也有小Tip可以用Struct包裹一个普通类型，设为计算类型，然后充当一个Static成员，但是这里不讲了）</p>
<p>我们首先可以这样封装简单的初始化方法……</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">initNavigationAPI</span>(<span class="title">VC</span>:<span class="title">UIViewController</span>,<span class="title">navBarColor</span>:<span class="title">UIColor</span>) -&gt; <span class="title">HttpController</span>?</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> httpController:<span class="type">HttpController</span> <span class="operator">=</span> <span class="type">HttpController</span>()</span><br><span class="line">    <span class="type">VC</span>.navigationController<span class="operator">?</span>.navigationBar.barTintColor <span class="operator">=</span> navBarColor</span><br><span class="line"></span><br><span class="line">    <span class="type">Config</span>.shareInstance().isNetworkRunning <span class="operator">=</span> <span class="type">CheckNetwork</span>.doesExistenceNetwork()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="type">Config</span>.<span class="type">UUID</span> <span class="operator">==</span> <span class="literal">nil</span> <span class="operator">||</span> <span class="type">Config</span>.<span class="type">UUID</span>!.isEmpty&#123;</span><br><span class="line">        <span class="type">Tool</span>.showSuccessHUD(<span class="string">&quot;请在边栏的个人资料中补全您的信息&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> <span class="operator">!</span><span class="type">Config</span>.shareInstance().isNetworkRunning&#123;</span><br><span class="line">        <span class="type">Tool</span>.showErrorHUD(<span class="string">&quot;貌似你没有联网哦&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">Tool</span>.showProgressHUD(<span class="string">&quot;正在获取信息&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> httpController</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>OK？那个HttpController是另一个接口，来进行网络操作的，代理需要靠它，所以我们返回一个HttpController实例，如果失败就返回nil，在实际VC里面加一个解包判断即可。</p>
<p>以后，想要初始化，就只需要这样了</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    <span class="keyword">var</span> color <span class="operator">=</span> <span class="type">UIColor</span>(red: <span class="number">153</span><span class="operator">/</span><span class="number">255</span>, green: <span class="number">204</span><span class="operator">/</span><span class="number">255</span>, blue: <span class="number">204</span><span class="operator">/</span><span class="number">255</span>, alpha: <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">self</span>.httpController <span class="operator">=</span> <span class="type">Tool</span>.initNavigationAPI(<span class="keyword">self</span>,navBarColor: color) <span class="operator">??</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.httpController <span class="operator">!=</span> <span class="literal">nil</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.httpController<span class="operator">!</span>.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        <span class="type">Tool</span>.sendAPI(<span class="string">&quot;cardDetail&quot;</span>, httpController: <span class="keyword">self</span>.httpController<span class="operator">!</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把一群乱七八糟的代码扔走。下一步就是如果用代理来代理我们所有的请求以及相应的结果了，下一篇文章补上……</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发面试面试知识合集</title>
    <url>//ioskai-fa-mian-shi-mian-shi-zhi-shi-he-ji</url>
    <content><![CDATA[<blockquote>
<p>最近一段时间到南京某公司实习之后，就一直没有更新博客，而校招季节到来，也是投了几家公司，之前不发面经是担心有泄题之类的风险，而且自己也需要调整一下心态。而现在，终于可以谈谈iOS开发的面试了</p>
</blockquote>
<h1 id="面试技术栈"><a href="#面试技术栈" class="headerlink" title="面试技术栈"></a>面试技术栈</h1><p>技术岗位面试，基本上离不开这三方面的东西：</p>
<ul>
<li>数据结构与算法</li>
<li>语言／框架方面基础知识</li>
<li>通用知识，项目</li>
</ul>
<p>所以今天专门整理了一些最近的面试中遇到的问题，对自己的能力也正确的评价一下</p>
<p>#数据结构与算法</p>
<p>对于国内的校招来说，《剑指offer》确实是一个特别好的书，同时也有用Web版的<a href="http://www.nowcoder.com/ta/coding-interviews?page=1">在线答题</a>来做，里面的题基本上面试都会见到，而且并没有超出一般程序员的水平（ACMer请忽略），基本上是人人必备宝典，推荐认真读一遍，<a href="https://leetcode.com/">LeetCode</a>的话，难度是Easy和Normal的题目尽量做（当然，一些特别复杂比如迷宫搜索，就不必强求了）</p>
<p>常见的题目，基本上分两类：数据结构类（比如什么<code>反转链表</code>、<code>各种遍历</code>、<code>二叉搜索树插入删除</code>、<code>最大堆实现</code>）和算法类（<code>ATOI</code>、<code>2sum</code>、<code>TopK问题</code>（很常见）、DP问题如<code>最长公共子串</code>等），基本面试的题目不会特别难（要考虑手写出来的时间），保证基础功好一点，临场不断提出新的解题方法（暴力-&gt;递归-&gt;DP），总会有方法的</p>
<p>数据结构：</p>
<ul>
<li>链表（反转，合并，找环，排序）</li>
<li>二叉树（检查，遍历，高度，反转）</li>
<li>堆（最大堆，最小堆，TopK问题）</li>
<li>哈希表（再散列法，拉链法，冲突处理，简单Hash算法）</li>
<li>字典树（实现，配合TopK问题）</li>
</ul>
<p>算法：</p>
<ul>
<li>排序（插入，选择，冒泡，归并，快排，堆排，基数，计数）</li>
<li>搜索（二分、二叉搜索树、DFS/BFS、图的最小生成树，最短路径（Dijkstra））</li>
<li>递归（树的各种问题，包括迭代求法（stack/queue实现），LCA之类）</li>
<li>贪心（出现的比较少，比如股票问题之类）</li>
<li>动态规划（楼梯、硬币、LCSequence、LCString、回文）</li>
</ul>
<p>#语言方面</p>
<p>iOS的话，基本上面试只会考虑Objective-C，毕竟是国内公司现状，产品线和项目基本都是纯Obejctive-C写的，短期无法改变。Swift可能会作为加分项目，但其实如果熟悉C或者C++的话加分的概率会更大（实际项目中，多是Objective-C和C结合用的）。对于不知道问题的方向的，可以先参考这篇<a href="https://github.com/ChenYilong/iOSInterviewQuestions">《招聘一个靠谱的 iOS》</a>，权当自我检测一下</p>
<p>对于Objective-C的语言知识，基本上下面的都问道过，建议应该打好基础，了解清楚：</p>
<ul>
<li>内存管理（MRC，ARC，assign，weak，strong，copy，unsafe_unretain）</li>
<li>Block（循环引用，__block关键字，block类型，block_copy）</li>
<li>多线程（GCD，NSOperationQueue， NSThread），了解复杂同步异步混合逻辑如何处理，线程安全</li>
<li>消息转发机制（objc_msgSend），五个对应消息转发方法的顺序，isa指针，self/super，method swizzling</li>
<li>RunLoop（Source，Observer，Timer，NSTimer滚动回调问题），AutoreleasePool在RunLoop作用，source源和UIKit事件</li>
<li>Runtime（AssociatedType实现Category属性，消息，swizzling）</li>
<li>AutoreleasePool（UI事件会隐式创建AutoreleasePool，循环体内手动创建避免内存峰值），autorelease消息，Pool drain的时机（Runloop一次周期的休眠前）</li>
<li>KVC/KVO原理（isa_swizzling），和其他方式对比</li>
<li>属性观察（NSNotification、Delegate、KVO）的对比，线程安全</li>
<li>设计模式，观察者模式，代理模式，工厂模式等</li>
<li>响应者链，HitTest，第一响应者概念</li>
<li>ViewController/View生命周期，依次调用方法，手动布局步骤</li>
<li>性能优化、离屏渲染（drawRect和UIBezierPath）</li>
<li>UIView，CALayer的关系，动画处理（Core Animation）</li>
<li>CoreData使用，SQLite对比优/缺点，managedObject跨线程问题</li>
<li>MVC，MVP，MVVM区别</li>
</ul>
<p>#通用知识，项目</p>
<p>通用知识，一般是本科的课程基础知识，基本上以下对于移动开发都是重要的，因此一定要注意。而且面试也会问到（以HTTP/TCP最多）：</p>
<ul>
<li>HTTP协议具体请求/响应格式，HTTPS原理</li>
<li>TCP/UDP区别，TCP/UDP头，TCP三次握手四次挥手，滑动窗口机制</li>
<li>线程和进程的区别，调度方式</li>
<li>操作系统时间片法，多级队列，内存LRU，磁盘SCAN等</li>
<li>数据库范式、索引、数据库锁</li>
</ul>
<p>项目，基本上是你自己做的一些应用，你需要了解自己做的项目的大体架构，同时对一些组件、复用、网络层的功能实现要知晓，使用的开源库的源代码如果也看过或者了解过最好不过了，比如：</p>
<ul>
<li>自动布局/手动布局，解释Constrains，手动布局步骤（initWithFrame:，addSubviews:，layoutSubviews:，sizeThatFits:等之类）</li>
<li>动态TableView高度，下拉刷新控件实现，进度条实现</li>
<li>SDWebImage源码，NSCache原理简介</li>
<li>AFNetworking对RunLoop的利用</li>
<li>JSPatch/wxPatch之类的原理简介</li>
<li>异步请求回调，对象线程安全问题</li>
<li>优化问题，圆角图片等</li>
</ul>
<p>#其他问题</p>
<p>其他问题，一般就是类似HR面的内容，可能会有一些对项目管理的看法，人际交往能力、对待加班态度。注意面试官问到你“你还有什么要问我的吗”一定要主动交谈，可以问一些关于对应事业部的环境、技术氛围、是否可以实习等等问题。但是不必谈薪资或者录用与否，毕竟这主要是最终企业还有多方共同决定的。到这一步的话，面试主要的目的就是一个双方互相了解的过程，所以你也应当主动去问各种问题，去了解公司、团队以及职位等相应内容。</p>
<p>总体来说，基本上原则还是那句话：“真话挑着说，假话绝不说”，保持自信，主动提问，基本上就没问题。如果真到最后却还是失之交臂，一般都是自己前几面表现有些问题，毕竟招聘不是过关制度，最后决定是否录用的时候，前几面的面试官意见都会参考，所以只能说每一面都需要做好准备，尽量表现自己</p>
<p>#学习福利<br>对于我这种自学iOS开发的，很多基本知识都是后来才补的，在这过程中参考了很多资料，这里就列举出其中最有用的吧：</p>
<p><a href="https://github.com/ChenYilong/iOSInterviewQuestions">GitHub-必看面试问题</a></p>
<p><a href="https://objccn.io/issues/">objc期刊-各种iOS进阶知识，架构</a></p>
<p><a href="http://nshipster.com/">NSHipster-包括KVC/KVO，Swizzling等，非常全面</a></p>
<p><a href="http://nshipster.cn/">NSHipster-中文版</a></p>
<p><a href="https://www.raywenderlich.com/46988/ios-design-patterns">iOS设计模式</a></p>
<p><a href="http://www.jianshu.com/p/0b0d9b1f1f19">iOS多线程</a></p>
<p><a href="https://www.raywenderlich.com/115695/getting-started-with-core-data-tutorial">Core Data教程</a></p>
<p><a href="http://blog.ibireme.com/">ibireme博客-主要是Runtime，RunLoop</a></p>
<p><a href="http://blog.sunnyxx.com/">sunnyxx博客-主要是高级iOS知识和优化</a></p>
<p><a href="http://blog.devtang.com/">唐巧的博客-主要是iOS开发工具</a></p>
<p><a href="http://www.jianshu.com/p/ba4cbf8dfe49">SDWebImage原理</a></p>
<p><a href="http://www.jianshu.com/p/358dc280fb33">AFNetworking原理</a></p>
<p><a href="https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3">JSPatch原理</a></p>
<p>#结语<br>经历了某公司实习，还有一些面试的碰壁，也慢慢认清自己的实力，自己在iOS开发这个方向上自己还有很长很长的路要走，现在也应该继续努力提升自己。在祝愿自己的同时，也希望处于就职路途中的iOS程序猿们能够一起共勉，找到心仪的offer</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS逆向&amp;iOS字体Fallback&amp;游戏汉化</title>
    <url>//iosni-xiang-ioszi-ti-fallback-you-xi-yi-hua</url>
    <content><![CDATA[<blockquote>
<p>最近偶然间发现《命运石之门：线形拘束的表征图》(STEINS;GATE 线形拘束のフェノグラム)iOS版的汉化基本完成，只缺测试，于是加入帮忙汉化组……在这中间偶然间学到一些关于iOS逆向和字体相关内容</p>
</blockquote>
<h1 id="字体问题"><a href="#字体问题" class="headerlink" title="字体问题"></a>字体问题</h1><p>游戏是基于iOS UIKit以及Cocos游戏引擎写的（动画效果是Cocos的，文本框是定制的UITextField，而Backlog就是个UIScrollView……）本身支持UTF-8，覆盖汉化脚本后运行，却发现字体渲染不正常，出现了两种字体渲染（看图，”喵”明显是黑体-简，即iOS9之前默认的简体中文字体），更会有很多汉字变为日文汉字（”变” -&gt; “変”，”归” -&gt; “帰”)</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/8/2e/d2b034dd2baab3fa03776f8ec9988.jpg"></p>
<p>起初并没有理解问题，最后查资料才认识到这是iOS字体Fallback所导致的。在查阅资料时候也发现一个异常好用的iOS字体对比渲染网页：<a href="http://iosfonts.com/">iosfonts</a>，直接输入文字，即可查看各种当前固件各种font family的效果（最好用Safari访问，OS X访问的话，相当于查看当前OS X的font family）</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/1/c5/a3c3555692a29541f2a45c8799323.png"></p>
<p>经过对比以及反编译搜索，发现渲染正常的是HiraKakuProN-W6，而其它字体会被Fallback到STHeitiSC-Light(黑体-简,细体)，原因自然的，因为HiraKakuProN并不是中文字体，只是支持部分日文汉字的显示，剩下的中文汉字将被Fallback（这是iOS UIKit的自动处理，不会出现[?][?]这种空白字块的效果）（这一些列支持中文的字体也有，就是大名鼎鼎的冬青黑体(Hiragino Sans)，在iOS 9和OS X 10.10.6之后加入）</p>
<p>同时，做过iOS国际化的也知道，在iOS Bundle的info.pilst里面，有一个键<code>CFBundleDevelopmentRegion</code>，这个键将决定所有文字默认字体，假如你设置为”en”，那么所有英文文字都将Fallback到Helvetica Light(iOS 9之后为San Francisco)，而不是黑体-简的英文字体（参考：<a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-130430">iOS Developer Library</a>）</p>
<p>所以汉化的时候，我们最好确认该值设置为<code>zh_CN</code>（大部分日文游戏会是<code>ja_JP</code>），防止未手动设置的字体Fallback到日文字体</p>
<p>这样的话，我们的目标就是逆向把字体设置为黑体-简了。</p>
<h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><p>iOS逆向入门，大家可以参考<a href="https://www.whitehack.com.au/reverse-engineering-ios-apps/">Reverse Engineering iOS Apps</a>，讲述了关于各种类型的逆向，命令行工具，Hopper Disassembler（最好的iOS(ARM)/OS X(x86)逆向工具，支持反编译Objective-C伪代码），同时，<a href="https://github.com/iosre/iOSAppReverseEngineering">GitHub</a>上有个非常好的电子书，对逆向入门很有帮助。</p>
<p>我们的目标，自然是想办法替换字体名，大家应该都知道，二进制的Hex值你可以替换部分为0x00来无效化，但绝不能随便中间添加插入。因为一旦加入或者删除Hex，后续所有的地址跳转都将挂掉……</p>
<p>通过Hopper静态分析，能发现游戏将我们想要替换的字体名<code>HiraKakuProN-W6</code>写死到一个const NSString中去（实际上，Objective-C会编译为<code>_CFConstantStringClassReference</code>），遗憾的是，<code>STHeitiSC-Medium</code>是16个Byte，而前者只有15个Byte，意味着暴力Hex替换是不可能的。</p>
<p>那么，就没有办法了吗？不是的，就以我不懂逆向来看，也知道至少有两种办法：</p>
<h3 id="调用过程前插入指令"><a href="#调用过程前插入指令" class="headerlink" title="调用过程前插入指令"></a>调用过程前插入指令</h3><p>对所有引用这个常量地址的过程，手动插入ARM汇编指令，暴力将目标字符串放入寄存器。同时，在调用外过程的时候，把这个寄存器传进去，相当于动态创建了新的字符串并传参……</p>
<p>对于ARM汇编来说，与8086汇编最大的差距就是ARM指令是三地址码(<code>mov r0,#0x00</code>)，而且旧版iOS SDK编译的的Mach-O文件更是包含了ARM32(32位指令)和ARM Thumb(16位指令)，需要单独区别。不过熟悉的pc寄存器还是在的，比如这就是进入和函数返回的指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push &#123; r4, r5, r6, r7, lr &#125;</span><br><span class="line">pop &#123; r4, r5, r6, r7, pc &#125;</span><br></pre></td></tr></table></figure>

<p>当然，真要做逆向工程师，需要学习大量ARM汇编知识，对我这种基本不懂的人，一般也不会采取这种方式。</p>
<h3 id="修改常量段和地址引用"><a href="#修改常量段和地址引用" class="headerlink" title="修改常量段和地址引用"></a>修改常量段和地址引用</h3><p>想办法把常量段(__DATA)前面不需要的常量（一般是一些Log的字符串之类）字串缩减，同时对后续所有引用的地址全部修改(减去缩短的字节数)，这样就有了更多空间来修改目标字串。</p>
<p>当然，对于我这种不懂的人，还是选择2方法更好……</p>
<p>通过Hopper全局搜索，发现一个地址为0x002fc50的字串”Not interleaved!”，再通过地址引用，找到调用过程，用伪代码分析一看，是用来做Log的，没有意义，决定用它开刀。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/d/a6/20b6c740e08b4ce50c7726931039d.png"></p>
<p>既然我们目标是把16Byte替换15Byte，那么只需要删除一个Byte(也就选”!”)了，之后，把从该地址开始，到目标地址的所有地址配合Hex Editor，把所有字符串向前一个Byte，然后更新这些常量的被引用地址值（这步骤手工很麻烦，幸好Hopper支持脚本，大工程可以脚本跑）</p>
<p>替换修改后的常量段：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/f/b8/2fd8b75defcd753005347e05e3994.png"></p>
<p>检查没问题，导出可执行文件，测试，结果非常满意，全部被替换为黑体-简(粗体)，相关功能也不受影响（真要说影响，可能就是用户看不到的控制台的Log会输出少个”!”罢了2333）</p>
<p>最终成果（漂亮的黑体-简)：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/5/6b/ba2950239095f36f16e57cd593b21.jpg"></p>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>从中，也可以看出iOS开发的时候，对于常量值，比如一些密码，Key之类的，任何静态分析工具都能轻易找到，并且替换。因此，对敏感的信息，一定要做好相应的安全反逆向。</p>
<p>单纯的宏定义，虽然编译后会展开，但是还是会有一个随机分配标签的常量存在，也容易通过长度和相关函数签名（比如encrypt，key之类名称）的传入参数发现。简单处理，可以加密函数起名A_Function，通过宏定义<code>#define A_Function ENCRYPT_FUN</code>，这样将不会反编译后将不会知道标签，更进一步可以通过宏定义直接封装加密函数和解密函数，减少静态分析工具发现的可能性。</p>
<p>不过对于动态分析工具以及Hook系统调用来说，这些都是没有用的……归根结底还是建议要确保iOS客户端，尽量少保留敏感信息，对服务端API设置Auth，SSL验证等手段，才能减少被逆向者获取信息的可能性。</p>
<p>好了，也扯完了，愉快地去(tui)测(you)试(xi)《命运石之门：线形拘束的表征图》了……这作品是《命运石之门》的剧情补完和外传，而妄想科学ADV系列基本一直是我的最爱，大家有兴趣可以去<a href="http://tieba.baidu.com/p/4260615784">贴吧</a>关注进度。</p>
<p><em>El psy congroo</em></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>逆向</tag>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>个人笔记-《并发编程》</title>
    <url>//ge-ren-bi-ji-bing-fa-bian-cheng</url>
    <content><![CDATA[<ol>
<li><p>线程和锁</p>
<ul>
<li>  线程锁的的问题:</li>
</ul>
<blockquote>
<p>时序问题</p>
<p>原子操作问题(Java内存读写机制-&gt;读.改.写)</p>
<p>竞态条件(操作取决于线程执行的先后顺序)</p>
<p>JVM优化导致的问题（编译器静态优化，JVM动态优化，硬件指令的乱序执行）</p>
<p>两把锁：死锁问题</p>
<p>外部方法或者对象的线程安全问题</p>
<p>效率问题synchronized()</p>
<p>ThreadLocal额外讲解，线程级别的局部变量，适用于数据库连接，网络请求</p>
</blockquote>
<ul>
<li>  使用concurrency</li>
</ul>
<blockquote>
<p>ReetrantLock的手动加锁解锁</p>
<p>死锁也能中断(不推荐的方式lockInterruptibly())</p>
<p>tryLock()虽然能设定超时自动解锁，但是缺点明显：活锁（同时死锁再同时超时）</p>
<p>条件锁：Condition类</p>
<p>原子操作：Atomic 简单的解决方法，坑和缺点</p>
<p>线程池 内置的Exeutors.newFixedThreadPool()</p>
</blockquote>
</li>
<li><p>函数式方法</p>
<ul>
<li>  变量与可变状态导致的并发难题的终极解决方法-&gt;去掉变量</li>
</ul>
<blockquote>
<p>函数式基础概念：顺序无关 map reduce 无穷序列和惰性求值 尾递归</p>
<p>Clojure简单方法：pmap</p>
<p>两种Clojure并发模型：Future(给定一个函数在新线程跑，返回一个future对象) Promise（立即返回，惰性，调用deliver才会执行）</p>
<p>原子变量(atom)，代理(deref @)，由引用(ref)构成的软件事务内存(STM)。对任何多个并发事务进行修改发生冲突，将会导致重试</p>
</blockquote>
</li>
<li><p>actor的魔力（略）</p>
<ul>
<li>  纯粹的消息式的交流，几乎没有限制的进程数，随时加入和进行任务，任由错误发生，集中处理</li>
</ul>
<blockquote>
<p>actor：真正的消息传递，轻量级的进程开销</p>
<p>分布式map，每个进程分配子map</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>主流图片加载库所使用的预解码究竟干了什么</title>
    <url>/2019/01/18/%E4%B8%BB%E6%B5%81%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E9%A2%84%E8%A7%A3%E7%A0%81%E7%A9%B6%E7%AB%9F%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1 id="主流图片加载库所使用的预解码究竟干了什么"><a href="#主流图片加载库所使用的预解码究竟干了什么" class="headerlink" title="主流图片加载库所使用的预解码究竟干了什么"></a>主流图片加载库所使用的预解码究竟干了什么</h1><blockquote>
<p>很多图片库，都会有一个类似叫做Force-Decode，Decode For Display之类的感念，很多人可能对这个过程到底是为了解决什么问题不清楚，这里写一个文章来说明它。</p>
</blockquote>
<p>这里列举了各个图片库各自的说法，其实讲的都是完全相同的一个概念。</p>
<ul>
<li><a href="https://github.com/SDWebImage/SDWebImage/">SDWebImage</a>：使用了<code>forceDecode</code>, <code>decompressImages</code>的概念</li>
<li><a href="https://github.com/ibireme/YYWebImage">YYWebImage</a>：使用了<code>decodeForDisplay</code>的概念</li>
<li><a href="https://github.com/onevcat/Kingfisher">Kingfisher</a>：使用了<code>backgroundDecode</code>的概念</li>
</ul>
<h1 id="为什么需要这个过程，解决了什么问题"><a href="#为什么需要这个过程，解决了什么问题" class="headerlink" title="为什么需要这个过程，解决了什么问题"></a>为什么需要这个过程，解决了什么问题</h1><p>为了解释这个过程具体的解决问题，需要至少了解苹果的系统解码器的工作流程。</p>
<h2 id="Image-IO和惰性解码"><a href="#Image-IO和惰性解码" class="headerlink" title="Image/IO和惰性解码"></a>Image/IO和惰性解码</h2><p><a href="https://developer.apple.com/documentation/imageio">Image/IO库</a>是苹果提供的，跨所有Apple平台的系统解码器，支持常见的各种图像格式（JPEG/PNG/TIFF/GIF/HEIF/BMP等）的编码和解码。同时，有丰富的接口来和诸如Core Graphics库协作。</p>
<p>常见的网络图像解码，由于拿到的是一个压缩格式，肯定需要想办法转换到对应的UIImage。UIImage可以分为CGImage-based和CIImage-based，后者相对开销大一些，主要是用作滤镜等处理，不推荐使用。所以基本上各种图片库解码，为了解码压缩格式，得到一个CGImage，都是用了Image/IO的这个API：</p>
<p><a href="https://developer.apple.com/documentation/imageio/1465011-cgimagesourcecreateimageatindex?language=objc">CGImageSourceCreateImageAtIndex</a></p>
<p>实际上，Image/IO，除了调用具体的解码器产生图像的Bitmap以外，为了和Core Graphics库协作，也直接以CGImage这个数据结构来传递，但是他采取了一种惰性解码的创建方式。因此这里首先要了解CGImage初始化的接口和对应的行为：</p>
<p><a href="https://developer.apple.com/documentation/coregraphics/1455149-cgimagecreate?language=objc">CGImageCreate</a></p>
<p>这里面其他参数都好理解，具体看一个<code>provider</code>参数，这里面需要传入一个<code>CGDataProviderRef</code>，它是一个关于描述怎么样去获取这个Bitmap Buffer二进制数据的结构。再来看看CGDataProvider的初始化方法，这时候发现它有多种初始化方式，决定了后面的行为。</p>
<ul>
<li><a href="https://developer.apple.com/documentation/coregraphics/cgdataprovider/1805224-cgdataprovidercreate">CGDataProviderCreate</a></li>
</ul>
<p>这个方法，允许接受一个<code>CGDataProviderCallbacks</code>参数，看说明，可以知道，这个callbacks是一系列函数指针回调，目的是提供一个sequential-access的访问模式，同时Data Buffer会被copy出去。同时，由于传入的是callbacks，可以做到不立即提供Data Buffer，而是在未来需要的时候再触发。</p>
<ul>
<li><a href="https://developer.apple.com/documentation/coregraphics/1408282-cgdataprovidercreatedirect?language=objc">CGDataProviderCreateDirect</a></li>
</ul>
<p>这个方法，类似于<code>CGDataProviderCreate</code>，但是注明了这个callbacks生成的Data Buffer不会被Copy，Core Graphics只会直接访问返回的Data Buffer指针，需要自己管理好内存。</p>
<ul>
<li><a href="https://developer.apple.com/documentation/coregraphics/1408288-cgdataprovidercreatewithdata?language=objc">CGDataProviderCreateWithData</a></li>
</ul>
<p>这个方法，需要提供一个CFData，同时也不会Copy这个CFData。在Release的同时由Core Graphics自动释放CFData的内存，开发者不需要管理内存。</p>
<p>剩余的具体初始化方法可以看文档说明，总而言之，CGDataProvider提供了各种各样的访问模式，如直接访问，拷贝访问，惰性访问等。而现在问题就来了，前面说到，Image/IO创建CGImage的时候，也需要提供一个DataProvider来指明图像的Bitmap Buffer数据从哪里获取，它是具体用了什么方式呢？</p>
<p>答案是使用了一个私有API<code>CGImageCreateWithImageProvider</code>，经过查看，这个方式实际类似<code>CGDataProviderCreateDirect</code>，也就是通过一组callbacks，提供了一个直接访问，允许惰性提供Data Buffer的方式。换句话说，这也就意味着，Image/IO，其实采取的是一种惰性解码方式。解码器只预先扫描一遍压缩格式的容器，提取元信息，但是不产生最终的Bitmap Buffer，而是通过惰性回调的方式，才生成Bitmap Buffer。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/01/18/15477913743261.jpg"></p>
<p>换句话说，通过所有<code>CGImageSourceCreateImageAtIndex</code>这种API生成的CGImage，其实它的backing store（就是Bitmap）还没有立即创建，他只是一个包含了一些元信息的空壳Image。这个CGImage，在最终需要获取它的Bitmap Buffer的时候（即，通过相应的API，如<code>CGDataProviderCopyData</code>，<code>CGDataProviderRetainBytePtr</code>），才会触发最后的Bitmap Buffer的创建和内存分配。</p>
<h2 id="Image-IO和Force-Decode"><a href="#Image-IO和Force-Decode" class="headerlink" title="Image/IO和Force Decode"></a>Image/IO和Force Decode</h2><p>理解到上面Image/IO的惰性解码行为，理解了上面一点，现在说明Force Decode所解决的问题。</p>
<p>众所周知，iOS应用的渲染模式，是完全基于Core Animation和CALayer的（macOS上可选，另说）。因此，当一个UIImageView需要把图片呈现到设备的屏幕上时候，其实它的Pipeline是这样的：</p>
<ol>
<li>一次Runloop完结 -&gt; </li>
<li>Core Animation提交渲染树CA::render::commit -&gt;</li>
<li>遍历所有Layer的contents -&gt;</li>
<li>UIImageView的contents是CGImage -&gt;</li>
<li>拷贝CGImage的Bitmap Buffer到Surface（Metal或者OpenGL ES Texture）上 -&gt;</li>
<li>Surface（Metal或者OpenGL ES）渲染到硬件管线上</li>
</ol>
<p>这个流程看起来没有什么问题，但是注意，Core Animation库自身，虽然支持异步线程渲染（在macOS上可以手动开启），但是UIKit的这套内建的pipeline，全部都是发生在主线程的。</p>
<p>因此，当一个CGImage，是采取了惰性解码（通过Image/IO生成出来的），那么将会在主线程触发先前提到的惰性解码callback（实际上Core Animation的调用，触发了一个<code>CGDataProviderRetainBytePtr</code>），这时候Image/IO的具体解码器，会根据先前的图像元信息，去分配内存，创建Bitmap Buffer，这一步骤也发生在主线程。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/01/18/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-18%20%E4%B8%8B%E5%8D%881.44.45.png" alt="屏幕快照 2019-01-18 下午1.44.45"></p>
<p>这个流程带来的问题在于，主线程过多的频繁操作，会造成渲染帧率的下降。实验可以看出，通过原生这一套流程，对于一个1000*1000的PNG图片，第一次滚动帧率大概会降低5-6帧（iPhone 5S上当年有人的测试）。后续帧率不受影响，因为是惰性解码，解码完成后的Bitmap Buffer会复用。</p>
<p>所以，最早不知是哪个团队的人（可能是<a href="https://github.com/path/FastImageCache">FastImageCache</a>，不确定）发现，并提出了另一种方案：通过预先调用获取Bitmap，强制Image/IO产生的CGImage解码，这样到最终渲染的时候，主线程就不会触发任何额外操作，带来明显的帧率提升。后面的一系列图片库，都互相效仿，来解决这个问题。</p>
<p>具体到解决方案上，目前主流的方式，是通过CGContext开一个额外的画布，然后通过<code>CGContextDrawImage</code>来画一遍原始的空壳CGImage，由于在<code>CGContextDrawImage</code>的执行中，会触发到<code>CGDataProviderRetainBytePtr</code>，因此这时候Image/IO就会立即解码并分配Bitmap内存。得到的产物用来真正产出一个CGImage-based的UIImage，交由UIImageView渲染。</p>
<h2 id="ForceDecode的优缺点"><a href="#ForceDecode的优缺点" class="headerlink" title="ForceDecode的优缺点"></a>ForceDecode的优缺点</h2><p>上面解释了ForceDecode具体解决的问题，当然，这个方案肯定存在一定的问题，不然苹果研发团队早已经改变了这套Pipeline流程了</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>可以提升，图像第一次渲染到屏幕上时候的性能和滚动帧率</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>提前解码会立即分配Bitmap Buffer的内存，增加了内存压力。举例子对于一张大图（2048*2048像素，32位色）来说，就会立即分配16MB(2048 * 2048 * 4 Bytes)的内存。</li>
</ul>
<p>由此可见，这是一个拿空间换时间的策略。但是实际上，iOS设备早期的内存都是非常有限的，UIKit整套渲染机制很多地方采取的都是时间换空间，因此最终苹果没有使用这套Pipeline，而是依赖于高性能的硬件解码器+其他优化，来保证内存开销稳定。当然，作为图片库和开发者，这就属于仁者见仁的策略了。如大量小图渲染的时候，开启Force Decode能明显提升帧率，同时内存开销也比较稳定。</p>
<h2 id="WebP和软件解码"><a href="#WebP和软件解码" class="headerlink" title="WebP和软件解码"></a>WebP和软件解码</h2><p>当我们说完Image/IO系统库和Force Decode关系后，再来看看另一种情形。近些年来，一些新兴的图像压缩格式，如<a href="https://developers.google.com/speed/webp/">WebP</a>，得益于开源，高压缩率，更好的动图支持，得到了很多开发者青睐。</p>
<p>然而，这些图像格式，并没有被iOS系统解码器所支持，也没有对应的硬件解码。因此，现有的图片库在支持新图像格式的时候，都采取了使用CPU进行软件解码来处理。这些软件解码器，大部分是为了跨平台而实用的，因此，一般都有一个接口直接产出一个Bitmap Buffer来用于渲染。如WebP的官方解码器libwebp，就有这样一个接口：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">WEBP_EXTERN VP8StatusCode <span class="title">WebPDecode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span>* data, <span class="keyword">size_t</span> data_size, WebPDecoderConfig* config)</span></span>;</span><br></pre></td></tr></table></figure>

<p>上面我们知道CGImage和CGDataProvider的不同初始化方式，开发者面临这样的接口，有两个选择：</p>
<ol>
<li>使用CGDataProviderCreateWithData，直接把产出的Bitmap buffer存储到CGImage中</li>
<li>参考Image/IO，使用CGDataProviderCreateDirect，使用惰性解码</li>
</ol>
<p>当然，为了最大程度的利用苹果系统的那套Pipeline和现有代码流程，第一直觉的使用方式当然是方案2。然而，理想是丰满的，现实是骨感的。之所以Image/IO能够采取惰性解码这一套流程，最大的原因在于<strong>Image/IO的原生图像格式都是硬件解码，且解码速度足够快</strong></p>
<p>同样的方式，套用到WebP上，反而会带来更大的问题。首先，WebP格式自身的压缩算法采取了VP8，比起JPEG/GIF的压缩算法要复杂的多，开销大。第二，libwebp只有软件解码的实现，无法利用硬件来加快解码速度。</p>
<p>注：YY的作者有专门跑过测试，对于iPhone 6上，同样压缩比的有损JPEG和WebP相比，解码速度慢大概50%-100%，无损的PNG和WebP相比比较接近。参考：<a href="https://blog.ibireme.com/wp-content/uploads/2015/11/image_benchmark.xlsx">https://blog.ibireme.com/wp-content/uploads/2015/11/image_benchmark.xlsx</a></p>
<p>所以，主流图片库最终的选择方式，都是方案1，即立即生成了一个含有Bitmap Buffer的CGImage。这样，到最终UIImageView渲染的时候，也不会有额外的主线程解码的开销，除了需要提前分配内存以外别的还好。</p>
<h2 id="WebP软件解码和Force-Decode"><a href="#WebP软件解码和Force-Decode" class="headerlink" title="WebP软件解码和Force Decode"></a>WebP软件解码和Force Decode</h2><p>前面说到，对于WebP等非硬件解码器支持的图片压缩格式，大多数图片库采取了方案1。但是现有的一些图片库（如SDWebImage/YYWebImage），仍然对这个非空壳的CGImage，执行了Force Decode的过程，按理论上说已经有了Bitmap Buffer，不会触发主线程解码，这又是为什么？</p>
<p>这个原因，是源于先前的Force Decode的实现机制，利用到了<code>CGContextDrawImage</code>这个接口。</p>
<p><code>CGContextDrawImage</code>，内部实现非常复杂，因为对于一个CGImage来说，他只是Bitmap Buffer+图像元信息的合集，但是一个CGContext，是有一个固定的ColorSpace，渲染模式等等信息，是和具体的上下文相关的。</p>
<p>因此，当通过这个API画在一个画布上时，会触发很多细节的逻辑，这里举几个比较有影响的。</p>
<ol>
<li>首先会根据CGImage的ColorSpace转换到CGContext的ColorSpace（比如说CGImage使用了sRGB，CGContext用了P3+宽色域），需要去对Bitmap的每个像素做转换；如果Bitmap排列（如CGImage采取RGB888，CGContext采取BGRA8888）不同，也会以CGContext为准进行转换。</li>
<li>CGContext如果有Blend Mode，也会在此流程中做Alpha合成。</li>
<li>如果CGContext和大小和CGImage不同，会触发对应的重采样过程，开发者可以控制重采样的质量高低</li>
<li>还有一个关于内存管理的，由于CGContext目标就是为了做渲染层，因此它依赖这个假设，当你调用<code>CGContextDrawImage</code>的时候，会直接把取到的Bitmap Buffer，立马提交到render server进程上（通过mmap），这样最后在渲染Pipeline（前文提到）中，就可以省去第5步（拷贝CGImage的Bitmap Buffer到Surface（Metal或者OpenGL ES Texture）上）。见下：</li>
</ol>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/01/18/Lark20190118-134314.png"></p>
<p>其实对于大部分图片库的Force Decode来说，因为都开的是一个和CGImage同大小的空白画布，这里主要是第1和第4项会影响到性能。一些图片库，因此依旧保留了Force Decode的流程，也有各种各样的具体缘由。</p>
<h2 id="WebP软件解码进行Force-Decode的优缺点"><a href="#WebP软件解码进行Force-Decode的优缺点" class="headerlink" title="WebP软件解码进行Force Decode的优缺点"></a>WebP软件解码进行Force Decode的优缺点</h2><p>了解了为什么对于WebP等软件解码，依然使用Force Decode的缘由，再来看看这种Case下的优缺点</p>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol>
<li>能够提前把Bitmap Buffer转移到渲染进程上，减少了未来渲染时的内存拷贝操作（虽然比起解码来说，这部分时间相当的小）</li>
<li>如果原始解码出来的Bitmap Buffer，iOS硬件屏幕不直接支持（如RGB888，CMYK），会提前转换好，避免渲染时主线程的转换</li>
<li>（？）可以从Xcode视觉上看起来App占用内存变小，因为Bitmap Buffer提前拷贝到render进程了</li>
</ol>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>在已经有Bitmap Buffer的情况下，再开一个画布，并触发Draw，大图会出现一个临时的内存峰值（约250%~300%原始Bitmap Buffer的占用）</li>
</ol>
<p>可以看出，这也是一个类似空间换时间的策略。当然，这个策略的优势没有Image/IO那样大，因为实际上转换和拷贝内存的性能开销，比起解码和创建Bitmap Buffer都是非常低的。但是一些图片库把这个选择权利交给了用户，而自己不做这个策略选择。</p>
<p>PS小轶闻：SDWebImage其实最早只有对Image/IO的那个ForceDecode流程，后来在4.0加入WebP支持的时候，也不清楚这个流程影响，顺便就一块使用这套流程了。可以说是所谓的误打误撞。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章基本介绍了Image/IO的惰性解码流程，以及Force Decode这套流程它所解决的问题，以及优缺点。无论对图片库作者，还是图片库进阶使用者，都解释了相关的疑问。希望对图片编解码方向有兴趣的同学可以多多学习交流。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>偶然发现的，关于C++指针的一点注意事项</title>
    <url>//ou-ran-fa-xian-de-guan-yu-c-zhi-zhen-de-yi-dian-zhu-yi-shi-xiang</url>
    <content><![CDATA[<p>C++的指针是大一时期一直觉得头疼的一个东西。当年一直对指针敬而远之。一旦不小心，指针越界的后果就是程序崩溃……&gt; &lt;</p>
<p>然而，偶然一次学妹问到关于动态数组的问题的时候……才偶然发现当年自己学指针似乎一直没有搞清楚这两者的关系：</p>
<p><code>pointer</code>和<code>pointer[i]</code></p>
<p>比如实现一个简单的动态数组，举例就是看如下代码：</p>
<p>第一种方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arrayInput;</span><br><span class="line">	<span class="keyword">int</span> arraySize = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span>* arrayPointer;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;依次输入数字到这个数组中，输入EOF（Windows下为Ctrl＋Z，Unix/Linux下为Ctrl+D）来停止输入&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">while</span>(cin&gt;&gt;arrayInput)&#123;</span><br><span class="line">		arrayPointer[arraySize] = arrayInput;</span><br><span class="line">		arraySize++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;现在输出数组中元素&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arraySize;i++)&#123;</span><br><span class="line">		cout&lt;&lt;i&lt;&lt;<span class="string">&quot;元素: &quot;</span>&lt;&lt;arrayPointer[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arrayInput;</span><br><span class="line">	<span class="keyword">int</span> arraySize = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span>* arrayPointer;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;依次输入数字到这个数组中，输入EOF（Windows下为Ctrl＋Z，Unix/Linux下为Ctrl+D）来停止输入&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">while</span>(cin&gt;&gt;arrayInput)&#123;</span><br><span class="line">		*(arrayPointer+arraySize) = arrayInput;</span><br><span class="line">		arraySize++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;现在输出数组中元素&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arraySize;i++)&#123;</span><br><span class="line">		cout&lt;&lt;i&lt;&lt;<span class="string">&quot;元素: &quot;</span>&lt;&lt;*(arrayPointer+i)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直到写完了，才发现自己其实一直没有搞懂，这种arrayPointer[i]表示什么。于是做了一个测试～</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout&lt;&lt;<span class="string">&quot;现在输出数组中元素\n第一种：&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arraySize;i++)&#123;</span><br><span class="line">	cout&lt;&lt;i&lt;&lt;<span class="string">&quot;元素: &quot;</span>&lt;&lt;arrayPointer[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n第二种：&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arraySize;i++)&#123;</span><br><span class="line">	cout&lt;&lt;i&lt;&lt;<span class="string">&quot;元素: &quot;</span>&lt;&lt;*(arrayPointer + i)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://dreampiggy-image.test.upcdn.net/image/c/b8/7d8680b175f4e74b2de45bd2733e2.png"></p>
<p>试验了一下，才发现，其实arrayPointer[i] 和*(arrayPointer + i) 是等价的，前者是代表从arrayPointer的首地址开始计数，而arrayPointer[0]代表就是arrayPointer指向的地址所对应的值。这一点应该注意一下（其实以前觉得数组和指针挺像的，但是从这一点就知道数组绝对是指针的一小部分子集）。</p>
<p>给自己提个醒吧－ －顺便怀念一下远去的C++。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一下Java作业－Swing开发的计算器</title>
    <url>//fen-xiang-yi-xia-javazuo-ye-swingkai-fa-de-ji-suan-qi</url>
    <content><![CDATA[<p>上周我们Java课程老师要求我们用Swing来开发一个计算器。</p>
<p>说起来图形化的开发，我最早用的应该就是MFC了，当时就只会拖一下控件，然后双击一下写函数……改改属性什么的……</p>
<p>其次接触到了Qt，是在我们大二上实训的时候。那个时候要求我们做一个Qt跨平台的聊天工具，我们最后的效果差不多就是这样，代码放在了GitHub：</p>
<p><a href="https://github.com/lizhuoli1126/SEU-Chat">https://github.com/lizhuoli1126/SEU-Chat</a></p>
<p>接下来，由于要加入到学校的一个组织（<a href="http://herald.seu.edu.cn/index/">先声网</a>），于是又做了一款简单的Android下的天气应用，接触到了Android开发使用的XML来布局的方法。（为什么Qt不允许手动修改XML里面的内容啊啊啊！）</p>
<p>之后，又做起了iOS开发，发现Xcode的图形化真是赞。无论是Storyboard还是Xib，都既能很好的支持图形化空间，又能手动编辑，而且那种按Control拖拽关联代码和图形空间的方式很有意思，也很有效率。于是就按照教程写了一个小的游戏……（之后会有文章说明）</p>
<p>于是，问题来了，我为什么要说前面这么多呢，那是因为：Swing必须得手动写代码布局啊啊啊！（回声～）</p>
<p>最开始用的是Eclipse，按照老师的方法，手写Java代码来进行界面布局，于是，你就得写几行代码跑一下，看看布局，再改再跑………………折腾了几次之后崩溃，想着必须得找解决办法。</p>
<p>百度一下，就发现了Netbeans这款神器，建Java应用－添加JFrame，然后一个熟悉的GUI空间界面就出现了T.T（拖控件其实相当于在Java代码中自动写进去布局代码）终于可以愉快的玩耍了……</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/a/3c/3bfdef0a075c8130da1ba2fafd3b4.png"></p>
<p>最终的成品就是这个样子（做得不好别打我，代码也不上传了）：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/0/31/6e31b3c293f2be8bd75da3c977780.png"></p>
<p>说这么多，其实我就是想说Java的Swing并没有提供一个把代码和布局通过灵活方式分开的方法（GUI之所以叫GUI，我认为这是一种交互方式，如果用CLI的交互方式开发GUI程序，这绝对产生不出完美的产品）。如果你们有什么想法或者吐槽的地方，尽情说出来吧！评论就有礼品送。:-P</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>发现iOS SDK的Bug - Hopper使用教程向</title>
    <url>/2019/06/13/%E5%8F%91%E7%8E%B0iOS-SDK%E7%9A%84Bug-Hopper%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E5%90%91/</url>
    <content><![CDATA[<h1 id="Hopper简介"><a href="#Hopper简介" class="headerlink" title="Hopper简介"></a>Hopper简介</h1><p>Hopper，全称Hopper Disassembler，是一个macOS和Linux平台上的反汇编IDE。提供了诸如伪代码，子程序，脚本，Debugger，Hex编辑等等一些列工具。相比于其他知名的反汇编工具如<a href="https://www.hex-rays.com/products/ida/">IDA</a>，最大的好处是对平台特性，也就是Objective-C的反汇编有优化，提供非常贴近原始代码的伪代码（IDA目前则会是保留诸如objc_msgSend的伪代码），并且新版本也对Swift提供了一定的反汇编符号优化，因此作为探究iOS平台上的SDK实现，可以说是一利器。</p>
<h1 id="Hopper安装"><a href="#Hopper安装" class="headerlink" title="Hopper安装"></a>Hopper安装</h1><p>Hopper本身目前是收费的软件，提供了免费的使用（30分钟）。官方下载地址为：[<a href="https://www.hopperapp.com](https://www.hopperapp.com/)。Mac版本后解压，拖到Application下即可使用。">https://www.hopperapp.com](https://www.hopperapp.com/)。Mac版本后解压，拖到Application下即可使用。</a></p>
<p>对于个人使用，价格不菲，有两种方案，个人比较推荐第一种</p>
<ul>
<li>Per User：收费为¥700，允许同一时间唯一激活，不绑定机器硬件</li>
<li>Per Computer，收费¥900，和一台电脑的机器硬件绑定</li>
</ul>
<p>对于只是尝鲜或者轻度使用，其实使用免费版即可。网上现在也有针对旧版本的Cracked版本，不过存在一些问题和崩溃。如果是在需要，可尝试<a href="https://xclient.info/s/hopper-disassembler.html">链接</a></p>
<h1 id="Hopper使用"><a href="#Hopper使用" class="headerlink" title="Hopper使用"></a>Hopper使用</h1><p>Hopper提供了一个教程，可以参考<a href="https://www.hopperapp.com/tutorial.html">官方简易教程</a></p>
<p>针对我们的场景：分析iOS的SDK内实现或者问题，我这里提供了一个Step By Step的过程，教你如何查找问题。</p>
<h2 id="获取需要反汇编的二进制文件"><a href="#获取需要反汇编的二进制文件" class="headerlink" title="获取需要反汇编的二进制文件"></a>获取需要反汇编的二进制文件</h2><p>首先，我们需要获取一份iOS SDK的二进制Mach-O文件。最简单的方式，是通过Xcode提供的iPhone模拟器去获取它。在获取之前，我们先了解一下iOS SDK对应的二进制文件路径。</p>
<ul>
<li>Xcode自带模拟器，对应系统根路径：</li>
</ul>
<p>Xcode 11:</p>
<p><code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot</code></p>
<p>Xcode 10:</p>
<p><code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/</code></p>
<ul>
<li>已下载的历史版本固件的模拟器，对应系统根路径，自己根据版本版本修改中间的数字：</li>
</ul>
<p><code>/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\ 11.4.simruntime/Contents/Resources/RuntimeRoot/</code></p>
<ul>
<li>真机的系统根路径，不用说了吧：</li>
</ul>
<p><code>/</code></p>
<p>iOS 系统提的库和二进制，可以简单分以下几类，按照需要选择对应的相对根路径：</p>
<ul>
<li>公开Framework: <code>/System/Library/Framework</code></li>
<li>私有Framework：<code>/System/Library/PrivateFrameworks</code></li>
<li>系统App：<code>/Applications</code></li>
<li>UNIX动态库: <code>/usr/lib</code></li>
</ul>
<p>这里我们以Xcode 10自带的iOS 12 SDK，UIKitCore为例（注意，UIKit从iOS 12开始，为了支持部署到macOS，将代码基本全盘移动到了私有Framework的UIKitCore.framework中，UIKit.framework只是一个外层的壳），我们就能直接去访问这个路径，获取它的Mach-O二进制：</p>
<p><code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore</code></p>
<p>一般来说，iPhone模拟器提供的二进制Mach-O即可够用，虽然它实际上是x86_64架构的编译产物，但是基本上的逻辑和真机上是一致的。如果涉及到需要只能在真机可用的库，如AVFoundation的摄像机，建议可以从真机中提取（也可以从iOS的IPSW固件中提取），见下文。</p>
<h3 id="真机获取系统库的二进制文件"><a href="#真机获取系统库的二进制文件" class="headerlink" title="真机获取系统库的二进制文件"></a>真机获取系统库的二进制文件</h3><h3 id="获取dyld-shared-cache"><a href="#获取dyld-shared-cache" class="headerlink" title="获取dyld shared cache"></a>获取dyld shared cache</h3><p>在真机上，为了加快动态库的加载，并减少iOS 占用磁盘的体积，dyld采取了一个缓存，将多个Mach-O文件合并到一起，由系统启动后就预热。因此，实际上系统库（公开和私有）的路径上，只有Framework和其中的资源文件，却没有对应的Mach-O二进制。我们需要首先获取到这个cache，然后解压出来对应的二进制。参考<a href="https://iphonedevwiki.net/index.php/Dyld_shared_cache">dyld_shared_cache</a></p>
<p>对应dyld shared cache路径（以arm64机器为例）：<code>/System/Library/Caches/com.apple.dyld/dyld_shared_cache_arm64</code></p>
<p>当然，除了使用已经越狱的真机，我们还可以通过IPSW，即iOS的固件包，来直接提取对应的dyld shared cache，并解压得到对应的Mach-O文件。</p>
<p>IPSW可以从这个<a href="https://ipsw.me/">网页</a>上下载，选择你的设备以及iOS版本号，就可以下载对应的IPSW文件。</p>
<p>将下载的IPSW解压（建议使用zip命令行，或者BetterZip之类的解压软件，Mac自带的解压似乎会报错），可以找到一个最大容量的DMG文件，双击即可加载<br><img src="http://dreampiggy-image.test.upcdn.net/image/2019/06/13/15604236336003.jpg"></p>
<p>加载后就是完整的iOS系统根路径了，从对应路径下找到dyld shared cache。</p>
<h3 id="解压dyld-shared-cache"><a href="#解压dyld-shared-cache" class="headerlink" title="解压dyld shared cache"></a>解压dyld shared cache</h3><p>为了解压dyld shared cache，市面上一些工具其实早已过期，要么不支持arm64，要么存在Bug。但实际上，Apple自己开源的dyld源代码，就已经包含了这样一个命令行工具，叫做<code>dsc_extractor</code>，我们这里直接用来源码来编译一份来使用即可。</p>
<p>进入<a href="https://opensource.apple.com/%EF%BC%8C">opensource.apple.com</a>选择最新的macOS的版本，我这里例子使用的是我写这篇文章最新公开的 <a href="https://opensource.apple.com/release/macos-10141.html">macOS 10.14.1</a></p>
<p>然后下载两份代码，一份是<a href="https://opensource.apple.com/tarballs/dyld/dyld-635.2.tar.gz">dyld</a>，一份是<a href="https://opensource.apple.com/tarballs/CommonCrypto/CommonCrypto-60118.220.1.tar.gz">CommonCrypto</a></p>
<p>为了编译，需要一点小技巧，但是对于iOS开发者我觉得挺简单</p>
<ol>
<li>用Xcode，打开dyld代码中的<code>dyld.xcodeproj</code></li>
<li>修改Build Settings中，把对应的Base SDK，从<code>macosx.internal</code>改成公开的<code>macOS</code></li>
<li>进入<code>dsc_extractor.cpp</code>，看到最后有一个<code>test program</code>，把上面的<code>#if 0</code>改成<code>#if 1</code></li>
<li>我在编译新版本时发现依赖了一个叫做<code>CommonDigestSPI.h</code>的私有头文件，这个在下载的CommonCrypto工程中，拖进来改一下引用方式即可</li>
<li>选择<code>dsc_extractor</code>，Archive得到一个产物，叫做<code>dsc_extractor.bundle</code>，然而他实际就是一个Mach-O二进制，直接删掉后缀，chmod+x，即可使用</li>
</ol>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/06/13/15604271114928.jpg"></p>
<p>如果上面的编译比较麻烦，可以直接下载我这里编译好的一份二进制，然后放到你的PATH路径下：<a href="https://raw.githubusercontent.com/dreampiggy/dsc_extractor/master/bin/dsc_extractor">dsc_extractor</a></p>
<p>然后我们可以使用<code>dsc_extractor</code>来解压我们提取到的dyld shared cache，很简单的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dsc_extractor ./dyld_shared_cache_arm64e ./output</span><br></pre></td></tr></table></figure>

<p>会得到所有dyld shared cache中的二进制Mach-O文件，按照路径排列，然后我们就可以用自己想反编译的库，如UIKitCore，来使用Hopper了。</p>
<h2 id="载入Hopper"><a href="#载入Hopper" class="headerlink" title="载入Hopper"></a>载入Hopper</h2><p>现在我们已经有了一个UIKitCore的Mach-O文件了，我们打开Hopper来载入它。我们可以使用Command+Shift+O来选择一个Mach-O文件，也可以将文件拖动到Hopper界面上来打开。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/06/13/15604335461822.jpg"></p>
<p>载入Mach-O文件后，Hopper会弹出框来选择具体分析的内容，大部分情况直接确认即可。如果是分析其他类型的文件，可能有特例如下：</p>
<ul>
<li>分析一个.a或者.dylib，并且该二进制由多个.a或者.dylib合成，这时候会提示你选择具体的某个编译产物</li>
<li>分析一个FAT Binary，这时候会提示你选择具体的某一个架构的文件</li>
</ul>
<p>载入开始后，一般需要等待一段时间来分析（下方会有进度条），等待分析完成后，你可以将当前分析的结果，保存成一个<code>.hop</code>结尾的文件，未来就不再需要分析了，非常有用（注：免费版不可用）。</p>
<h2 id="符号分析"><a href="#符号分析" class="headerlink" title="符号分析"></a>符号分析</h2><p>左侧有一个符号框，从左到右依次表示：</p>
<ul>
<li>Labels: C/C++Objective-C的符号，包括类名，方法名，全局变量等</li>
<li>Proc：子程序，对应C/C++的函数，Objective-C的方法，Block代码段等</li>
<li>Str：常量段，包括了所有C/C++Objective-C字面量，即代码中直接用<code>@&quot;&quot;, &quot;&quot;</code>写的内容</li>
</ul>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/06/13/15592985644004.jpg"></p>
<p>每项内容都支持搜索，一般来说取决于我们要解决的问题，有大概几个场景</p>
<ol>
<li>分析特定方法的实现：使用Proc搜索</li>
<li>运行时抛出的异常或者Log：使用Str搜索关键字</li>
<li>得知一个类的所有方法：可以使用Label，但更好的方式是通过Class-dump获取头文件（见下）</li>
</ol>
<h2 id="Class-dump与私有头文件"><a href="#Class-dump与私有头文件" class="headerlink" title="Class-dump与私有头文件"></a>Class-dump与私有头文件</h2><p><a href="https://github.com/nygard/class-dump">Class-dump</a>是一个能够解析Mach-O文件，对应的Objective-C符号，以生成一个完整的头文件的工具。得益于Objective-C运行时和符号的特点，可以方便的还原回基本接近原始的类声明代码。具体使用也很简单，参见项目的Readme，编译得到二进制，放到PATH中，然后执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class-dump UIKitCore.framework -r -o output -H</span><br></pre></td></tr></table></figure>

<p>对于重头戏，关于iOS SDK的所有头文件，早有专人建立了一个在线网站去分析，点击跳转：<a href="http://developer.limneos.net/">iOS Runtime Headers</a></p>
<p>在这个网页上，可以支持Framework/类/方法级别的搜索，支持点击头文件跳转链接，非常的方便，一般的分析iOS SDK都可以采取这个网页的结果来辅助分析。</p>
<h2 id="伪代码分析"><a href="#伪代码分析" class="headerlink" title="伪代码分析"></a>伪代码分析</h2><p>当我们了解到需要分析的符号方法后，下一步一般就会进行伪代码分析。在Hopper中，点击到一个子程序入口，然后点击上方的这个像是<code>if (b)</code>代码的图标，即可打开伪代码分析框</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/06/13/15592994457947.jpg"></p>
<p>对于简单的代码，我们基本上能够还原回100%可读的Objective-C代码，由于ARC时便一起，我们可以看到对应的Retain和Realse调用</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/06/13/15592995793557.jpg"></p>
<h3 id="分析调用关系"><a href="#分析调用关系" class="headerlink" title="分析调用关系"></a>分析调用关系</h3><p>我们可以通过对应的子程序页面，右键选择”References To Selector”，来查看所有对这个Selector的调用。（由于Objective-C运行时的特点，只能是Selector级别的调用，如果有不同类的同名Selector，可以在弹出的窗口中搜索或者依次检查）</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/06/13/15593006542887.jpg"></p>
<h2 id="常见的分析姿势"><a href="#常见的分析姿势" class="headerlink" title="常见的分析姿势"></a>常见的分析姿势</h2><h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><p>Objective-C会使用到Block，而Block由于其实现原理，会生成对应的C方法，Hopper目前原生解析的Block语法并不是很直观，这里提供一个简单的说明。</p>
<p>其实Hopper反编译出来就是Block实现的原理，如果对于Block实现原理不清楚，建议可以先看一遍<a href="https://blog.devtang.com/2013/07/28/a-look-inside-blocks/">《这个教程》</a></p>
<h3 id="简单Block"><a href="#简单Block" class="headerlink" title="简单Block"></a>简单Block</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Hopper原生反编译如下，实际Block代码会单独在另一个C方法中，在<code>block implemented at:</code>提示对应的方法中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dispatch_async([objc_retainAutoreleaseReturnValue(*__dispatch_main_q) retain], ^ &#123;<span class="comment">/* block implemented at ___29-[ViewController viewDidLoad]_block_invoke */</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ___29-[ViewController viewDidLoad]_block_invoke(<span class="keyword">void</span> * _block) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">0x1</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="捕获变量"><a href="#捕获变量" class="headerlink" title="捕获变量"></a>捕获变量</h3><p>如果Block捕获了变量，那么根据Block的实现原理，可以知道这些变量在Block中可见的变量都是被值宝贝，对于NSObject就是指针</p>
<p>如果使用<code>__block</code>修饰，那么会保留原始的变量的指针，对于NSObject就是对象指针的指针，我们可以通过这个简单识别。</p>
<p>比如对于这样代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NSObject *obj = [NSObject <span class="keyword">new</span>];</span><br><span class="line">__block NSObject *obj2 = [NSObject <span class="keyword">new</span>];</span><br><span class="line">[self testBlock:^(<span class="keyword">int</span> value)&#123;</span><br><span class="line">    NSLog(@<span class="string">&quot;%@&quot;</span>, obj);</span><br><span class="line">    obj2 = nil;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>实际反编译出来的结果长这样：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ___29-[ViewController viewDidLoad]_block_invoke(<span class="keyword">int</span> arg0, <span class="keyword">int</span> arg1) &#123;</span><br><span class="line">    NSLog(@<span class="string">&quot;%@&quot;</span>, *(arg0 + <span class="number">0x20</span>));</span><br><span class="line">    rax = objc_storeStrong(*(*(arg0 + <span class="number">0x28</span>) + <span class="number">0x8</span>) + <span class="number">0x28</span>, <span class="number">0x0</span>);</span><br><span class="line">    <span class="keyword">return</span> rax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的<code>arg0</code>就是第一个参数，而最后参数对应的是<code>block_impl_0</code>实现结构体，可以忽略。</p>
<h2 id="CGRectMake等inline的C方法"><a href="#CGRectMake等inline的C方法" class="headerlink" title="CGRectMake等inline的C方法"></a>CGRectMake等inline的C方法</h2><p>一些带有inline数值计算的方法，会被苹果的clang在编译时优化，实际上并不是你看到的头文件的样子，这种就需要我们枚举出来，人肉还原回他的实现，举个例子：</p>
<p>这样的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CGRect rect = CGRectMake(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">NSLog(@<span class="string">&quot;%@&quot;</span>, NSStringFromCGRect(rect));</span><br></pre></td></tr></table></figure>

<p>反编译结果：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">intrinsic_movsd(xmm1, *double_value_1);</span><br><span class="line">intrinsic_movsd(xmm2, *double_value_2);</span><br><span class="line">intrinsic_movsd(xmm3, *double_value_3);</span><br><span class="line">_CGRectMake(&amp;var_30, _cmd, rdx, rcx);</span><br><span class="line">NSLog(@<span class="string">&quot;%@&quot;</span>, [NSStringFromCGRect(*(&amp;var_30 + <span class="number">0x10</span>), *(&amp;var_30 + <span class="number">0x18</span>)) retain]);</span><br></pre></td></tr></table></figure>

<p>可以看到有<code>mov</code>之类的汇编命令调用，其实这就是为了压栈其实大部分场景我们只要熟悉简单的<code>mov</code> <code>add</code> <code>sub</code> <code>mul</code>几个基本的汇编命令的意义即可。</p>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><p>Swift作为Apple一致力推的下一代官方编程语言，随着iOS 13的发布，现在已经可以作为第一优先的SDK支持语言了，iOS 13上出现了4个Swift Only的库，因此对于Swift相关的反编译需求，也会慢慢出现。然而，不同于动态性强的Objective-C代码，Swift天生的静态强类型语言特性，造成了相当高的反编译难度（堪比C++开O2优化），在这里基本不细讲，只是大概说一下目前的状况。</p>
<p>Hopper从v4开始支持了对Swift符号的符号化，我们不再需要使用swift来反解决mangled的符号名。</p>
<p>由于Swift支持完整的命名空间，查询符号需要带上完整的符号</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/06/13/15604313892455.jpg"></p>
<p>同时，Swift由于clang的优化，会讲很多编译器检查到的频繁的代码调用，自动转换为一个以<code>sub</code>开头的函数，以减少二进制大小。</p>
<p>对于Swift非<code>@objc</code>和<code>dynamic</code>的属性和方法，会类似于C++的虚函数表，实际上的调用都是编译器展开的地址偏移，而不像Objective-C那样有符号可查。这种时候我们需要就是类似C++反编译那样，通过分析Swift class或者struct的属性，来对照偏移量得知调用。</p>
<p>对于Swift的会触发运行态的一些语法，需要你对Swift语言实现有了解，比如Protocol Extension Where子句，会生成Protocol Witness，我们可以在Hooper中搜索到它</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/06/13/15604319451736.jpg"></p>
<p>可以看到，目前的Hopper对Swift有相应的支持，但受限于Swift的语言性质很难直观阅读，必要时候还是需要一些汇编，以及传统C++的反编译分析模式去对待它</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇教程基本上是从我个人的使用经验来介绍，以工具和流程为主，主要是为了给目标iOS平台，且不是专攻二进制安全的人来阅读。</p>
<p>其实对大部分iOS平台开发者，最主要的目的，其实是为在发现一些iOS SDK表现奇怪的行为，或者Crash时，能够有一定的分析和判断能力，去尝试定位原因，绕过问题，并最终能够有底气，去向Apple提交Bug Report。</p>
<p>反编译本身就是二进制安全中的灰色地带，而且还有类似二进制加固等攻防模式，并不是万能方式去了解一个程序运行的方式。还需要配合自己的编写代码经验，才能更好地解决问题</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://github.com/bartcone/reverse-engineering-blog">https://github.com/bartcone/reverse-engineering-blog</a></li>
<li><a href="http://stevenygard.com/projects/class-dump/">http://stevenygard.com/projects/class-dump/</a></li>
<li><a href="https://worthdoingbadly.com/dscextract/">https://worthdoingbadly.com/dscextract/</a></li>
<li><a href="http://iphonedevwiki.net/index.php/Dyld_shared_cache">http://iphonedevwiki.net/index.php/Dyld_shared_cache</a></li>
<li><a href="http://www.toves.org/books/arm/">http://www.toves.org/books/arm/</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>逆向</tag>
        <tag>Hopper</tag>
      </tags>
  </entry>
  <entry>
    <title>发誓我不写Monad教程</title>
    <url>//fa-shi-wo-bu-xie-monadjiao-cheng</url>
    <content><![CDATA[<blockquote>
<p>我保证，不再在网上又发布一篇Monad教程(By Erik Meijer)</p>
</blockquote>
<p>自我娱乐，附赠各种Functional with OO，参见<a href="https://github.com/lizhuoli1126/Functional-OO">GitHub</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Define</span></span><br><span class="line">Monad = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line">Monad.prototype.unit = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Monad.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = func(<span class="built_in">this</span>.value);</span><br><span class="line">    <span class="keyword">var</span> monad = <span class="keyword">new</span> Monad(value);</span><br><span class="line">    <span class="keyword">return</span> monad;</span><br><span class="line">&#125;</span><br><span class="line">Monad.prototype.extract = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Use</span></span><br><span class="line"><span class="keyword">var</span> monad = <span class="keyword">new</span> Monad;</span><br><span class="line"><span class="keyword">var</span> monad = <span class="keyword">new</span> Monad(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">monad.unit(<span class="number">20</span>);</span><br><span class="line">monad.unit(<span class="keyword">new</span> Monad(<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">monad.bind(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123; <span class="keyword">return</span> value &#125;);</span><br><span class="line"><span class="keyword">var</span> result = monad.bind(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.extract() * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.extract());<span class="comment">//60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test</span></span><br><span class="line"><span class="keyword">var</span> monad = <span class="keyword">new</span> Monad;</span><br><span class="line">monad.unit(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(monad.extract());<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstMonad = monad.bind(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value / <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstMonad.extract());<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> secondMonad = monad.bind(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="number">1</span>;</span><br><span class="line">&#125;).bind(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="number">2</span>;</span><br><span class="line">&#125;).bind(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(monad.extract())<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(secondMonad.extract());<span class="comment">//16</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Functional</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>学期感想和总结</title>
    <url>//xue-qi-gan-xiang-he-zong-jie</url>
    <content><![CDATA[<blockquote>
<p>又是一个学期过去了，我在软件工程这条路上又迈出一步，这只是写给自己的，对自己这一学期的总结罢了。</p>
</blockquote>
<h1 id="最后的PHP？"><a href="#最后的PHP？" class="headerlink" title="最后的PHP？"></a>最后的PHP？</h1><p>学期初，最开始便是做的一个基于ThinkPHP的毕业生投票网站，也做了一个简单的微信和手机Web版本。</p>
<p>嘛，关于PHP我还是比较冷静的，PHP适用于传统中等业务逻辑和低并发要求的Web应用。</p>
<p>毕竟没有太多时间，我和另一个同学就直接用了ThinkPHP这种简单无脑框架(当然，还理所应当的踩了坑，这些细节就不说了)</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/5/8c/38da4b884adeda88d1fc1ca859f9f.png"><br>所谓国人自己的框架——ThinkPHP</p>
<p>最后嘛，我基本上只是做了5天就转战别的东西了，留下队友暴力撸前端…最后也没多少钱分，主要就是又熟悉了一下框架，知道了一点SMTP协议的东西和关于数据库事务的设计和使用(毕竟投票需要多次SQL，安全、事务和回滚是非常重要的)。</p>
<h1 id="入坑iOS开发"><a href="#入坑iOS开发" class="headerlink" title="入坑iOS开发"></a>入坑iOS开发</h1><p>对于我这种从来不能静下心来的人，完成了上个Web项目之后，由于加入了学校的<a href="http://herald.seu.edu.cn/index/">先声网</a>，于是我就又有活干了……先声网是我们学校的一个提供各种校园在线服务的组织，一个技术至上的团队（技术栈包括了Java，PHP，C++，Android开发，iOS开发，Web安全等，也承办各种程序设计大赛，短码比赛之类的活动）。当然，作为我这种菜鸟进去的时候前辈已经积累下了很多经验，而我主要最后就加入了iOS开发。</p>
<p>我们最早的iOS客户端－<a href="https://itunes.apple.com/cn/app/xian-sheng/id871801426?mt=8">先声</a>，是由学长开发的，而那名学长最后也转向别的方向，所以我主要就是在此之上二次开发的。对于我这种从前对iOS开发一无所知的新手，看到Objective-C所谓的：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>,<span class="string">@&quot;fuck&quot;</span>);</span><br><span class="line"><span class="keyword">@property</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">compare(<span class="literal">nil</span>, Nil, <span class="literal">NULL</span>, <span class="built_in">NSNull</span>);</span><br><span class="line">compare(<span class="number">0</span>, <span class="number">1</span>, <span class="literal">YES</span>, <span class="literal">NO</span>);</span><br><span class="line">Fuck *fuckPointer = [[Fuck alloc] init];</span><br></pre></td></tr></table></figure>
<p>“优雅”语法，我发现我实在难以平静下心来写，于是就直接上手了Swift来重构整个项目。 学习的过程其实是挺愉快的，最开始当然就是看《The Swift Programming Language》中英配合，大概也就2天时间。Swift的语法真是爱不释手，比如你可以这么写for-in 循环</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">101</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i <span class="operator">%</span> <span class="number">2</span>) <span class="operator">==</span> <span class="number">1</span>&#123;</span><br><span class="line">        println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于Swift支持FP，你甚至可以这么简写闭包函数，与lambda表达式无异</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//little calculator</span></span><br><span class="line">knownOps[<span class="string">&quot;+&quot;</span>] <span class="operator">=</span> <span class="type">Op</span>.<span class="type">BinaryOperation</span>(<span class="string">&quot;+&quot;</span>)&#123; <span class="variable">$0</span> <span class="operator">+</span> <span class="variable">$1</span> &#125;</span><br><span class="line">knownOps[<span class="string">&quot;-&quot;</span>] <span class="operator">=</span> <span class="type">Op</span>.<span class="type">BinaryOperation</span>(<span class="string">&quot;-&quot;</span>)&#123; <span class="variable">$1</span> <span class="operator">-</span> <span class="variable">$0</span> &#125;</span><br><span class="line">knownOps[<span class="string">&quot;*&quot;</span>] <span class="operator">=</span> <span class="type">Op</span>.<span class="type">BinaryOperation</span>(<span class="string">&quot;*&quot;</span>)&#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="variable">$1</span> &#125;</span><br><span class="line">knownOps[<span class="string">&quot;/&quot;</span>] <span class="operator">=</span> <span class="type">Op</span>.<span class="type">BinaryOperation</span>(<span class="string">&quot;/&quot;</span>)&#123; (<span class="variable">$0</span> <span class="operator">!=</span> <span class="number">0</span>) <span class="operator">?</span> <span class="variable">$1</span> <span class="operator">/</span> <span class="variable">$0</span> : <span class="literal">nil</span> &#125;</span><br></pre></td></tr></table></figure>
<p>虽然Swift 2.0之前，没有异常处理（全靠assert，或者optional处理……），不能有static成员（可以自己构造一个计算属性，里面存一个static变量……），可选链经常容易写错……等等各种小问题，但是有各种方法和框架来解决，并且随着如今Swift 2.0已经发布，这些问题都将不会再困扰初学者……</p>
<p>之后，幸好找到了Stanford的<a href="http://web.stanford.edu/class/cs193p/cgi-bin/drupal/">CS193P课程</a>，那个课程老师讲的非常详细，代码写的也是非常顺……（live code），由于紧接着就是五一，所以直接连着看了3天……现在回想起来真是一个悲惨的时光……</p>
<p>从最开始ViewController的生命周期，delegate，消息，UIKit，TableView，Autolayout……一系列以前从未仔细考虑过的东西慢慢的理解。其中对我感触最大的，就是multi-MVC模式，以前对MVC的理解大概只停留在view层分离UI层，controller控制数据流，从模型层拿，而model直接面向数据库或者数据生成……而multi-MVC更上了一层，每个MVC都可以以其它MVC为model，从而使得整体的模型复用程度提升，而又不会导致过高的耦合。消息机制和代理模式的实际使用也让我对GUI编程可能有了更多的理解（只是GUI编程而不是GUI哦，我现在还是很讨厌做UI或者前端……）</p>
<p>总之，技能的培养这样慢慢起来了，原来看起来那样离我很遥远的iOS开发，渐渐的我也可以稍微接触了。当然，我也许不能当一个iOS开发者吧，毕竟所有的UI都是靠XIB拖控件以及使用Autolayout和Size Classes做出来的，并没有一丝代码控制……（实际上我并不会），这在大型项目中是不可能的。或许我只适合写逻辑或者模型层吧。Anyway，我最后还是花了大概1周时间把整个项目重构，iOS客户端就变成了如今的样子……API封装成一个可动态修改的模式，所有类型转换都采用optional控制，也是基本达到了最后的要求……</p>
<p>虽然也许我今后可能不会真正入坑iOS开发，但是GUI编程来说，Cocoa Touch框架以及Swift确实让我感受到了一种编程的乐趣以及这种高效率的爽快（对比Android SDK来说……有点可怕的Activity和Fragment很难让我有这种感觉）。</p>
<h1 id="再战JavaScript-Node-js"><a href="#再战JavaScript-Node-js" class="headerlink" title="再战JavaScript-Node.js"></a>再战JavaScript-Node.js</h1><p>或许是这种二流学校的命吧，我们有一个叫做“SRTP”－课外研学学分的东西，所以，我被迫（也是无奈）选择了一个SRTP项目做。由于我点偏了技能点导致Web后端知识比较多，我们选择了一个实时协作编辑系统作为项目要求，当然，最开始的目标就是做成Google Docs那种可以同时看到多个人编辑的位置。 当时Node.js非常火，而且具有事件驱动和非阻塞IO两大特点，感觉上非常适合这个情景。于是我就再次面对了JavaScript这门比较奇葩的语言。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/8/61/1805572762590de47e5071b94362e.png"><br>我们的目标</p>
<p>如今许多前端工程师都想凭借Node.js深入后端领域，达到所谓大前端或者全栈的理想境界，但实际上，Node.js对新手极不友好…… 首先，由于非阻塞的IO，各种事件，包括数据库读写，文件读写都是异步的，由事件轮询来处理，看起来先后顺序依次的a(),b(),c()三个函数，实际执行顺序完全可能是c()-&gt;b()-&gt;a()。</p>
<p>为了强行让他们按照顺序执行，聪明的你可能会使用回调写法，但是很快就会面对最可怕的<code>callback hell</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   log(<span class="string">&quot;Wait for it ...&quot;</span>);</span><br><span class="line">   <span class="comment">// Sequence of four Long-running async activities</span></span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      log(<span class="string">&#x27;result first&#x27;</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         log(<span class="string">&#x27;result second&#x27;</span>);</span><br><span class="line">         <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            log(<span class="string">&#x27;result third&#x27;</span>);</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               log(<span class="string">&#x27;result fourth&#x27;</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">         &#125;, <span class="number">1000</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line">validate();</span><br></pre></td></tr></table></figure>

<p>由于人类写代码都是竖直向下的，如此横向发展绝对不是一个好事情。当然，我们现如今也有各种解决方案，包括依旧是回调的高级语法糖<code>async</code>，全部使用事件处理的<code>EventEmitter</code>，同步思维写异步的<code>promise</code>，都是不错的解决方法……</p>
<p>Node.js有很多槽点（以至于我不想展开写），但是我基本配合着《Node.js权威指南》，外加网上各种教程，GitHub各种开源轮子，把我们的项目做起来了。说是项目，其实更是一个实验新技术的体验，我们整个技术中，有核心的Node.js,Redis,Mongodb，有我以前从未使用过的Mongoose(ORM框架)，而且由于Node.js的纯粹性，对HTTP协议认识（比如手动实现multipart/form-data），Session手动处理，非关系性数据的组织，路由控制，RESTful API设计都有了一些认识，也许是不幸中的万幸吧……</p>
<h1 id="奇怪的技能点"><a href="#奇怪的技能点" class="headerlink" title="奇怪的技能点"></a>奇怪的技能点</h1><p>当然，我现在承认我就是一个容易三心二意的人，在这一学期中，我又开始点奇怪的技能点了。</p>
<p>最早是括号神教的<code>Lisp</code>（这也是我为什么喜欢Swift的原因，FP自然有它的优势，高阶逻辑写起来是非常爽的一件事）</p>
<p>接下来还有蟒蛇大法<code>Python</code>，也许挺惭愧，大一真的只学过C++的我，一直对Python就是只会Hello world，如今也是真正花了一周入门Python 2（很抱歉不是3……），Python对我的感觉就是非常精简，动态，类似于Ruby的体验（我并未深入过Ruby，不过还是见识一些简单的语法的），以及FP的支持，（lambda），有各种非常好用的库来简化所有开发，你想做什么基本都可以在Python中找到，怪不得Stanford如今采用Python作为CS新生的入门课程……</p>
<p>最后，我也得安利一下微软，<code>C#</code>相比于Java的优势，不是在你看书和Java对比的时候，而是当你写下第一行C#时才会发现……（抱歉又黑了Java），无论是非常丰富的关键字，还是在语法层面提供的委托方法（而不是Java的设计模式撑起的东西），也有灵巧的<code>async</code>和<code>lineq</code>，都会让你眼前一亮。当然，虽然C#已开源，但是跨平台还并不可信，想要靠这个吃饭，还是得跟着微软帝国干。当然，现如今搞游戏用Unity开发也是不错的前景，你看仙剑六，啊不，比如最近我喜欢玩的一个音乐游戏（MUSYNC），无论是画面还是游戏性都是非常之棒，而Java阵营在游戏的表现或许只有那个代码不堪入目的Minecraft吧……</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>也许扯了很长时间，不过反正这也是给自己看的。如果说大一一学期我是完全迷惘地度过，那么大二上我第一次觉得自己能做些什么，大二下我便认为自己能有资格说可以做什么。或许在编程这方面，我已经接触过多，接触过浅，正如我“装作什么都懂的……xx菜鸟，xx菜鸟……”知乎签名一样，我到现在并没有下定决心要去做某个领域的开发，或者其他之类，但是我也许大概了解了这些领域是在干什么，或许在今后的选择中不会茫然无措。</p>
<p>大二终将结束，如此迷茫的我，或许终于找到了一点点前进的方向了吧。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>客户端上动态图格式对比和解决方案</title>
    <url>/2017/03/06/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E5%8A%A8%E6%80%81%E5%9B%BE%E6%A0%BC%E5%BC%8F%E5%AF%B9%E6%AF%94%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<blockquote>
<p>对各种客户端来说，无论是Web还是移动端，图片占据的容量和传输资源一定是非常大的。对于静态图，我们常见的PNG和JPEG格式在压缩率和画质无损上都存在着不尽如人意的地方，而动图格式的GIF更是存在着很多问题，比如因此，在很多情况下，我们需要迁移到新的图片格式。</p>
</blockquote>
<h1 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h1><p>为什么我们不用GIF呢，GIF由于时代限制，存在的天生的问题。GIF的规范最新版本是在1989年制定的，一个24位色都没有普及的时代，因此，GIF规范只支持256色索引颜色，并且只能通过抖动、差值等方式模拟较多丰富的颜色。更为悲剧的是，它的alpha通道只有1bit，换言之，一个像素要么完全透明，要么完全不透明，而不像现在PNG的RGBA的8bit alpha通道，alpha值也可以和RGB一样都有255个透明值。这导致了所有GIF的图片带上透明度以后，边缘会出现明显的锯齿。所以如果你的客户端需要展示带透明度的动图，GIF基本上可以不考虑</p>
<p><img src="http://blog.ibireme.com/wp-content/uploads/2015/11/gif_apng_demo.gif" title="GIF和APNG对比"></p>
<p>实际的在线Demo，建议用Safari或者Chrome+插打开：<a href="http://apng.onevcat.com/demo">http://apng.onevcat.com/demo</a></p>
<h1 id="APNG"><a href="#APNG" class="headerlink" title="APNG"></a>APNG</h1><p>APNG是Mozilla在2008年发布的图片格式，本质上是在PNG的基础上加上一个扩展，而且非常简单即可实现。因此能够完全支持RGBA。规范可以参见<a href="https://wiki.mozilla.org/APNG_Specification">APNG Specification</a>。</p>
<p>虽然这个规范没有加入PNG开发组，但是很多浏览器已经支持了APNG。<br>最主推的是Apple的Safari（OS X 10.10以后的Safari，以及iOS 8以后的Safari和内置WebView），已经完全支持。Firefox亲儿子当然一直是支持的。Chrome桌面端已经从Chrome 59开始支持，现在就差Edge了。具体支持程度参见<a href="http://caniuse.com/#feat=apng">浏览器兼容性</a>。</p>
<p>APNG的优势，在于时间比较长，各种动图制作工具，优化工具都有相应的项目来支持。而且在iOS上的WebView里面是除GIF外，唯一官方支持的动图格式，因此如果做移动端开发需要WebView页引入动图，APNG还是必不可少的。</p>
<p>当然，APNG终究是在PNG的基础上扩展，并没有引入特别出色的压缩算法，而且遗憾的是，短期内APNG还没有引入到Chrome，也就意味着Android平台的WebView也没有原生支持，因此，移动开发又会面临两端兼容性问题，这个后话再说。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/1/14/Animated_PNG_example_bouncing_beach_ball.png" alt="APNG，Chrome需要59或者更高" title="APNG，Chrome需要插件支持或在线预览"></p>
<h2 id="相关APNG工具"><a href="#相关APNG工具" class="headerlink" title="相关APNG工具"></a>相关APNG工具</h2><p>APNG图形化制作工具和在线预览:<a href="http://isparta.github.io/index.html">iSparta</a><br>APNG大小优化:<a href="https://sourceforge.net/projects/apng/files/APNG_Optimizer/">APNG Optimizer</a><br>APNG Chrome插件:<a href="https://chrome.google.com/webstore/detail/apng/ehkepjiconegkhpodgoaeamnpckdbblp">APNG for Chrome</a></p>
<h1 id="WebP"><a href="#WebP" class="headerlink" title="WebP"></a>WebP</h1><p>WebP是Google在2010年发布的图片格式，完全开源，使用了VP8（就是WebM视频所用到的解码器）作为帧压缩编码器，而且在Chrome，Android上得到了原生的支持，具体规范参见:<a href="https://developers.google.com/speed/webp/">WebP</a></p>
<p>同样的支持RGBA，而且静态WebP的压缩率比起同质量PNG平均要高上20%左右。现在各大App厂商已经有开始迁移WebP。除了静态的WebP，还有动态WebP格式(Animated WebP)支持，不过动态WebP需要libwebp 0.4以后才正式支持，并需要mux和demux模块，如果自行编译需要注意。</p>
<p>Google官方提供了libwebp这个解码库在各个平台的二进制版本和Makefile，并且可以定制开启的功能。不过由于不像APNG那样基于PNG扩展，相关的工具很欠缺，基本全靠WebP Project提供的工具。</p>
<p><code>cwebp</code>:PNG/JPEG -&gt; WebP<br><code>dwebp</code>:WebP -&gt; PNG/JPEG<br><code>vwebp</code>:WebP命令行预览工具<br><code>webpmux</code>:多张WebP制作动态WebP<br><code>gif2webp</code>:GIF -&gt; 动态WebP</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/0/9e/63a17a7087e6ab1a209460b54136b.webp" alt="Animated WebP，Safari不支持" title="Animated WebP，Safari不支持"></p>
<h2 id="WebP工具"><a href="#WebP工具" class="headerlink" title="WebP工具"></a>WebP工具</h2><p>基本上来说，手动制作WebP会比较麻烦，因为Google没有提供WebP Optimizer之类的东西，如果我有100帧基本无差别的图使用webpmux合成动图，最终输出的文件大小会比较大。因此，一般推荐的做法，是先通过PNG制作APNG（比如iSparata），经过APNG Optimizer之后，再从APNG转换到动态WebP，这个流程可以用这个项目来一键搞定。<br>同时，也可以使用ffmpeg来转换视频到Animated WebP，一般使用MOV封装格式（UE常用的Pr导出的MOV可以支持alpha通道）。不过经过测试转换出来的Anmimated WebP大小相对比较大的（尤其同样的lossless下），不如PNG-&gt;APNG-&gt;Animtated Webp这个流程效果好。</p>
<p><a href="https://github.com/Benny-/apng2webp">apng2webp</a>:APNG -&gt; Animated WebP<br><a href="https://gist.github.com/dreampiggy/52c658253de3ba22fd3dec4d3f3182ab">ffmpeg</a>:MOV -&gt; Animated WebP</p>
<h1 id="其他粗暴的解决方案"><a href="#其他粗暴的解决方案" class="headerlink" title="其他粗暴的解决方案"></a>其他粗暴的解决方案</h1><p>像国内的微博桌面版，提供的动图是通过PNG配合CSS Spirit，靠着不断JS轮播切换PNG子图所拼出来的，这个带来的带宽消耗会是非常高的，因为完全是多张图片混合，除非有着兼容性包袱（IE之类），一般不推荐使用。</p>
<p><img src="http://img.t.sinajs.cn/t6/style/images/common/steps_gold2.png" alt="暴力实现" title="暴力实现"></p>
<h1 id="APNG和WebP各平台实现"><a href="#APNG和WebP各平台实现" class="headerlink" title="APNG和WebP各平台实现"></a>APNG和WebP各平台实现</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p><a href="http://caniuse.com/#feat=apng">APNG 浏览器支持</a><br><a href="http://caniuse.com/#feat=webp">WebP 浏览器支持，注意Animated WebP支持</a></p>
<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>APNG:</p>
<ul>
<li><a href="https://github.com/ibireme/YYImage">YYImage</a></li>
<li><a href="https://github.com/onevcat/APNGKit">APNGKit</a></li>
</ul>
<p>Animated WebP:</p>
<ul>
<li><a href="https://github.com/ibireme/YYImage">YYImage</a></li>
</ul>
<p>WebP:</p>
<ul>
<li><a href="https://github.com/rs/SDWebImage">SDWebImage</a>，注意SD使用的libwebp并没有加入mux和demux，故无法支持Animated WebP</li>
</ul>
<p>WebView:</p>
<ul>
<li>UIWebView，WKWebView和SafariViewController均只支持APNG（iOS 8以后），不支持Webp和Animated WebP</li>
</ul>
<p>YYImage，对显示动态图，使用了一个UIImageView的子类YYAnimatedImageView，通过直接插入了一个CALayer来作为图片的渲染layer，并用<code>CADisplayLink</code>这个帧定时器来刷新动图帧，通过异步线程处理解码，还有一些C的动态分配和回收内存来避免非常高的内存占用，保证了性能。并且自动处理了从视图消失以及滚动（可以切换到RunLoopCommonMode来滚动时候依然显示动图而不暂停）情况的问题，实现也非常有意思，有兴趣的人可以看一看。</p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>APNG:</p>
<ul>
<li><a href="https://github.com/sahasbhop/apng-view">APNG View</a></li>
</ul>
<p>Animated WebP:</p>
<ul>
<li><a href="https://github.com/facebook/fresco">Fresco</a></li>
</ul>
<p>WebView:</p>
<ul>
<li>Android 4.3以后才支持带lossless和alpha的WebP</li>
</ul>
<p>Android基本上对APNG可以说是没有什么支持的，所以如果是移动开发两个平台兼顾，建议同时准备APNG（for iOS WebView）和Animated WebP，客户端上建议都是用Animated WebP，因为VP8的解码速度相对于APNG有一些优势。</p>
<p><img src="http://blog.ibireme.com/wp-content/uploads/2015/11/anim_bench.png"></p>
<h1 id="存在的坑"><a href="#存在的坑" class="headerlink" title="存在的坑"></a>存在的坑</h1><h2 id="Web和移动端对于APNG和Animated-WebP循环次数不同"><a href="#Web和移动端对于APNG和Animated-WebP循环次数不同" class="headerlink" title="Web和移动端对于APNG和Animated WebP循环次数不同"></a>Web和移动端对于APNG和Animated WebP循环次数不同</h2><p>这个是一个非常大的坑，在Safari for iOS（Safari for macOS正常）和Chrome预览APNG和Animated WebP的时候，动图的循环次数为对应原图的loop+1。比如Animated WebP有100帧，loop为2，那么Chrome会循环总计展示300帧</p>
<p>刚开始我以为是移动端实现库的问题，毕竟Google和Apple这种大厂一般不会出现问题。但是再参阅了APNG和Animated WebP的规范，发现确实是Safari和Chrome本身的问题，可以参考<a href="https://wiki.mozilla.org/APNG_Specification">APNG规范</a>中的<code>num_plyas</code>字段，和<a href="https://developers.google.com/speed/webp/docs/riff_container">WebP规范</a>的<code>loop_count</code>字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Loop Count: 16 bits (uint16)</span><br><span class="line">The number of times to loop the animation. 0 means infinitely.</span><br><span class="line">This chunk MUST appear if the Animation flag in the VP8X chunk is set. If the Animation flag is not set and this chunk is present, it SHOULD be ignored.</span><br></pre></td></tr></table></figure>

<p>规范提到的伪代码描述也表示，loop count为0表示无限循环展示首帧到尾帧，而loop count &gt;= 1，展示首帧到尾帧loop count次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> VP8X.flags.hasAnimation</span><br><span class="line">canvas ← new image of size VP8X.canvasWidth x VP8X.canvasHeight <span class="keyword">with</span></span><br><span class="line">         background color ANIM.background_color.</span><br><span class="line">loop_count ← ANIM.loopCount</span><br><span class="line">dispose_method ← ANIM.disposeMethod</span><br><span class="line"><span class="keyword">if</span> loop_count == <span class="number">0</span>:</span><br><span class="line">    loop_count = ∞</span><br><span class="line">frame_params ← nil</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">next</span> chunk <span class="keyword">in</span> image_data <span class="keyword">is</span> ANMF</span><br><span class="line"><span class="keyword">for</span> loop = <span class="number">0.</span>.loop_count - <span class="number">1</span></span><br><span class="line">    clear canvas to ANIM.background_color <span class="keyword">or</span> application defined color</span><br><span class="line">    until eof <span class="keyword">or</span> non-ANMF chunk</span><br><span class="line">        frame_params.frameX = Frame X</span><br><span class="line">        frame_params.frameY = Frame Y</span><br><span class="line">        frame_params.frameWidth = Frame Width Minus One + <span class="number">1</span></span><br><span class="line">        frame_params.frameHeight = Frame Height Minus One + <span class="number">1</span></span><br><span class="line">        frame_params.frameDuration = Frame Duration</span><br><span class="line">        <span class="comment">#......</span></span><br><span class="line">        Show the contents of the canvas <span class="keyword">for</span></span><br><span class="line">            frame_params.frameDuration * 1ms.</span><br></pre></td></tr></table></figure>

<p>同样的，APNG对应的<code>num_plays</code>字段意思是一样的，大家可以使用这个在线测试用例，Safari表现错误而多循环了一次：<a href="https://philip.html5.org/tests/apng/tests.html#num-plays-1">https://philip.html5.org/tests/apng/tests.html#num-plays-1</a></p>
<p>解决办法：<br>由于不能更改浏览器的实现，部分情况也不好引入JS来手动实现，因此，对于APNG，一般只用在iOS的WebView上，因此可以直接制作APNG图的时候，把循环减一。而Animated WebP，可以在客户端实现加一个Hack，如果loop不是0手动减一，保持和Web一致性（当然，也可以专门提供一个loop count加一的图给Chrome/Android的WebView），希望之后两大浏览器是否可以把这个Bug修复了（当然，不排除联合一起更改了规范的可能性）</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>GIF作为一个动图格式已经太过于古老了，尤其是当前移动和Web站需要引入各种动态表情，头像的时候，GIF的透明问题已经是不可接受的。WebP长期发展也是比较看好（相比APNG没有进入PNG开发组，基本不再活跃），开源外加无授权费用，或许能够和WebM一样，成为互联网下首选的图片和视频格式。而移动客户端，在很多种需求下（动态表情，用户标志，广告）等上面，采用这种APNG和Animated WebP就能够轻松解决。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Web</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>圣诞节快乐</title>
    <url>//sheng-dan-jie-kuai-le</url>
    <content><![CDATA[<p>一年一度的圣诞节又到了……或许这又意味这一年的开始了。</p>
<p>这一年中，有很多人给了我帮助，有欢乐之时，也有低落之时。曾经以为自己能够找到自己的目标，却发现自己还是原地踏步。希望来年之时，心中这份迷茫能够或许减少一分吧。</p>
<p>感慨就到这里，希望在这个圣诞日子中，你我能够忘却烦恼，睁开眼睛发现属于自己的幸福，勇于追求自己的未来，不要被周遭而所困扰。</p>
<p>最后，谨祝愿：</p>
<p>自己能够追寻自己的梦想，看到这的你能够拥抱自己的幸福与喜悦。</p>
<p>最后，献上我的圣诞贺卡～</p>
<p>最近有点忙，所以就找别人做好的模版啦（顺便感觉WebGL好厉害……），以后有空可能自己做一个自己的贺卡～感谢大家</p>
<p>贺卡链接：<a href="http://www.dreampiggy.com/wp-site/christmas/">http://www.dreampiggy.com/wp-site/christmas/</a></p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/1/35/a9f2b746ae91a4d2f985966e93de8.png"></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>开源者行-见识更大的世界</title>
    <url>//kai-yuan-zhe-xing-jian-shi-geng-da-de-shi-jie</url>
    <content><![CDATA[<blockquote>
<p><a href="http://www.ubuntukylin.com/news/shownews.php?lang=cn&id=459">《开源者行》活动链接</a></p>
</blockquote>
<hr>
<h1 id="初到上海"><a href="#初到上海" class="headerlink" title="初到上海"></a>初到上海</h1><p>上周五，我们I++聚乐部的3人<a href="http://www.dreampiggy.com/">我</a>、<a href="http://neverchanje.github.io/">吴涛</a>和杨佳星三人，一同参加了一个叫做《开源者行》上海站的活动。</p>
<p><em>其实当初听说的时候我是拒绝的，因为我看介绍里面没有什么干货，透露着一种安(chuan)利(xiao)开源的性质。但我认为，这次活动远比一次技术讲座来的有意义。</em></p>
<p>不过，经过2个小时的旅途跋涉，1个小时的酒店等待，半个小时的带队路途(?)，我们终于到达了一处别墅：<a href="https://gitcafe.com/">GitCafe</a>的办公地点：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/7/2b/ce5bb993f7ca4e494e7a2c9e9e11d.jpg"></p>
<blockquote>
<p><em>真</em>土豪</p>
</blockquote>
<p>这是我当时的第一感受，当然，里面的设施也是比较豪华的，比如各种Mac……（5K等等）</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/7/1e/dfe067a89b418466913b250387ce9.jpg"></p>
<p>活动人员都是非常热心的，各种福袋、饮料、小吃都上齐了，然后他们自我介绍，我们自我介绍，大家很快就熟识了。里面有来自各地的高校的，上海的，四川的，南京的（东大竟然还有1个<strong>学姐</strong>也来参加了，真是有缘）……</p>
<p>各地的开源社区都不一样，有纯技术导向的，有开源Linux导向的，还有偏宣传的，其中那个<a href="http://www.duohuo.org/">多火团队</a>就非常不错，还有华科来的联创团队的人（真是厉害），大家有些人也在讨论代码问题（当然不是<code>PHP是不是最好的语言</code>这种）。我觉得能有一处让我们这些国内预备<code>程序员(媛)</code>交流的地方，真是非常不错。</p>
<h1 id="讲座"><a href="#讲座" class="headerlink" title="讲座"></a>讲座</h1><p>从活动开始以后，基本每天都会有讲座，来的人各式各样，有开源社区的，有商业公司的，比如<a href="https://www.docker.com/">Docker</a>，<a href="http://www.mopaas.com/">MoPaaS</a>，<a href="https://gitcafe.com/">GitCafe</a>等等，讲座基本有各种方面的，有技术的，有人文方面（比如开源历史），还有一些其他的（比如Web设计，社区管理）……基本是讲到什么算什么，大家只是交流一下，气氛也十分轻松。</p>
<h1 id="Ideathon"><a href="#Ideathon" class="headerlink" title="Ideathon"></a>Ideathon</h1><p>其实这三天的活动安排倒是不是很紧凑，基本就是白天一些简单的讲座，然后第二天晚上布置了任务，进行一场Ideathon(也就是一场创意赛)，围绕着<code>机器人</code>和<code>餐厅</code>关键字头脑风暴并且要有简单的Presentation和可行性分析。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/3/13/b69e8077b787a0c009be79adcbcef.jpg"></p>
<p>其中我们的点子经历过3个阶段，几小时讨论的结果一次次被砍掉，最终才确立了想法，然后便开始各种做PPT和做可行性分析…………晚上1点睡，早上9点过去又继续，直到下午最后演讲前才差不多准备好。</p>
<p>或许是<code>那个评委非常看重技术可行分析吧</code>，我们强大的<a href="http://zh.wikipedia.org/wiki/%E5%BF%83%E6%99%BA%E5%9B%BE">思维导图</a>配合幻灯片呈现出了我们全部的想法，最终我们组获得了第一名，并且我和另一个同学（演讲能力超群的）获得了全程报销的参加华科的Hackathon的资格（最近有参加过Hackathon的求支援！！相关链接：<a href="http://www.zhihu.com/question/20621242">知乎</a>）</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/b/3c/cb820e9a5e716f8e5a964b245e1a0.jpg"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，这次开源者行比我想象的要好的多，其实有时候干货与否，技术与否全看在你的理解，多与各地高校同学交流，你才会发现更大的世界，了解更多的无论是技术还是非技术问题，知道自己存在的问题，对你这条程序员(媛)亦或是其他道路都有非常大的促进作用。</p>
<p>感谢这次GitCafe的活动，或许正如他们的目标：成为全国最大的高校开源盛会，赶紧报名参加吧！！</p>
<blockquote>
<p>全体成员合影</p>
</blockquote>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/d/62/6241981cd7166f4abf6b6a4158ba6.jpg"></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>开源活动</tag>
      </tags>
  </entry>
  <entry>
    <title>我的个人博客建成啦！^^</title>
    <url>//wo-de-ge-ren-bo-ke-jian-cheng-la</url>
    <content><![CDATA[<p>首先，欢迎大家来到我的博客～</p>
<p>本人想着，作为一个软件工程专业的学生，怎么也得有属于自己的一个网站或者博客吧？于是，趁着有空，抽出时间做出了这个博客。</p>
<p>博客主要用于记录个人的生活感想，编程方面的知识，设计方面的想法以及其他杂谈，希望大家能够多多提出意见，与我进行交流，来者不拒。</p>
<p>博客采用了WordPress开发，借用了他人的第三方主题并加以修改（大一学到的PHP终于有了一点用武之地了T.T），服务器为新浪云（SAE），并购买了<a href="http://www.dreampiggy.com域名,大家以后要多多来看哦./">www.dreampiggy.com域名，大家以后要多多来看哦。</a></p>
<p>博客可以在电脑浏览器上浏览，也可以手机浏览（虽然暂时的响应式设计是根据分辨率判断的，可能高分辨率设备会被误认为电脑……以后再改进为UA判断，先让我休息一会……）。</p>
<p>博客允许用多说评论，大家可能不知道多说，这是一个广泛采用的论坛或者博客的评论系统，可以使用第三方，包括微博，QQ，人人等主流平台账号登陆，并且自动更新头像，还可以获取通知，甚至在其他网页上采用多说的评论时会自动同步。希望大家尽量不要游客评论（游客我也分不清呀……用第三方平台账号登陆很快滴）</p>
<p>现在刚建成，内容几乎为0，大家可以在这篇文章后面自由吐槽。我之后会定期更新博文，也可以链接到我的GitHub上面的一些项目，希望能收到各式各样的人的建议，无论你是做什么的，或者对于软件工程一无所知，只要你能浏览我的博客，与我交流，我就心满意足了。</p>
<p>最后，再次祝贺我的个人博客建成，散花！<code>*\(^o^)/*</code></p>
]]></content>
  </entry>
  <entry>
    <title>接上一话，在Swift中使用代理来中转请求和响应</title>
    <url>//jie-shang-yi-hua-zai-swiftzhong-shi-yong-dai-li-lai-zhong-zhuan-qing-qiu-he-xiang-ying</url>
    <content><![CDATA[<blockquote>
<p>这一次主要讲讲代理（Delegate）在iOS开发中的重要意义</p>
</blockquote>
<p>上一次说道通过一个类的静态方法来把所有的垃圾初始化代码扔到一起，减少每次创建新的VC所带来的重复劳动问题，这次主要说一下如果通过代理，来使你的代码更为简单，调用一个API： “Could not be simple”</p>
<p>所谓的代理，就是意思被代理的类把自己的方法交给代理人那个类来执行</p>
<p>首先，为了做一个代理，你必须要定义一个协议（称作APIGetter），这里我是把所有的返回结果放在代理，发送请求通过类的静态方法来使用（类名就叫做HeraldAPI吧～）</p>
<p>协议：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">APIGetter</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">getResult</span>(<span class="params">APIName</span>:<span class="type">String</span>, <span class="params">results</span>:<span class="type">NSDictionary</span>)</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">getError</span>(<span class="params">APIName</span>:<span class="type">String</span>, <span class="params">statusCode</span>:<span class="type">Int</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于我使用的是AFNetworking的库，可以方便的进行网络通信，AFNetworking就不再介绍了，这里还通过上层封装了两个方法，还有一个对AFNetworking的代理（代理也可以传递的……）：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> httpController:<span class="type">HttpController</span><span class="comment">//对AFNetworking的代理，暂时不要管他啦</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">didReceiveDicResults</span>(<span class="params">results</span>: <span class="type">NSDictionary</span>, <span class="params">tag</span>: <span class="type">String</span>)</span><span class="comment">//返回通过POST调用API的结果</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">didReceiveErrorResult</span>(<span class="params">code</span>: <span class="type">Int</span>, <span class="params">tag</span>: <span class="type">String</span>)</span><span class="comment">//返回通过POST请求调用API失败，code为HTTP状态码</span></span><br></pre></td></tr></table></figure>
<p>然后，你便可以大展身手，设置你的代理了。首先，你当然需要一个类的成员变量，一般就叫做delegate</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> delegate:<span class="type">APIGetter</span>?</span><br></pre></td></tr></table></figure>

<p>之后，我是通过类的静态方法来发送的（因为和APIGetter的代理无关可以略过……虽然这个sendAPI用了AFNetworking的代理……所谓可以层层封装代理）</p>
<p>而对于接受请求结果，只需要这样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">didReceiveDicResults</span>(<span class="params">results</span>: <span class="type">NSDictionary</span>, <span class="params">tag</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> tag&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;cardDetail&quot;</span>:</span><br><span class="line">        <span class="keyword">self</span>.delegate<span class="operator">?</span>.getResult(tag, results: results[<span class="string">&quot;content&quot;</span>] <span class="keyword">as</span> <span class="type">NSDictionary</span>)</span><br><span class="line">    <span class="keyword">default</span>:<span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">didReceiveErrorResult</span>(<span class="params">code</span>: <span class="type">Int</span>, <span class="params">tag</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> tag&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;cardDetail&quot;</span>:</span><br><span class="line">        <span class="keyword">self</span>.delegate<span class="operator">?</span>.getError(tag, statusCode: code)</span><br><span class="line">    <span class="keyword">default</span>:<span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，你就已经定义好了一个代理，现在只需要代理人类（就是真正的VC）只要把自己当作代理人（设置自己为delegate就好了）</p>
<p>在你自己的VC中首先确保自己实现了这个协议，比如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">SeuCardTableViewController</span>: <span class="type">UIViewController</span>, <span class="type">UITableViewDataSource</span>, <span class="type">UITableViewDelegate</span>, <span class="type">APIGetter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> <span class="type">API</span> <span class="operator">=</span> <span class="type">HeraldAPI</span>()</span><br><span class="line">	<span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">		<span class="keyword">self</span>.<span class="type">API</span>.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">		<span class="comment">//......</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，在实现代理方法中，干自己想干的任何事情</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getResult</span>(<span class="params">APIName</span>: <span class="type">String</span>, <span class="params">results</span>: <span class="type">NSDictionary</span>)</span> &#123;</span><br><span class="line">    println(results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getError</span>(<span class="params">APIName</span>: <span class="type">String</span>, <span class="params">statusCode</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Oh no!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>你就完成了整个东西……</strong></p>
<p>你可能觉得很奇怪，自己在VC中的getResult里面的results和APIName是从哪里来的？很简单，你实现了这个协议，这个协议，作为被代理者，它不知道自己什么时候执行。然而，当我们每次通过类的静态方法发送一个请求的时候，AFNetworking会通过代理，然后调用</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">didReceiveDicResults</span>(<span class="params">results</span>: <span class="type">NSDictionary</span>, <span class="params">tag</span>: <span class="type">String</span>)</span> &#123;<span class="operator">....</span>&#125;</span><br></pre></td></tr></table></figure>

<p>这时候，在里面的</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.delegate<span class="operator">?</span>.getResult(tag, results: results[<span class="string">&quot;content&quot;</span>] <span class="keyword">as</span> <span class="type">NSDictionary</span>)</span><br></pre></td></tr></table></figure>

<p>会把直接调用被代理者的方法，然后，由于我们在VC中是一个代理者，自然可以接收到这个代理信息（方法的内容），也就完成了数据传递。 <strong>数据的流向：从AFNetworking，经过我们的类，然后转入APIGetter协议，最后到了VC的方法里面</strong></p>
<p>其实，主要是由了AFNetworking这个代理在这里，才让过程分析比较复杂（其实这构成了一个含有2个代理的代理链……）</p>
<p>现在，我任何的VC中只需要6行代码就可以搞定之前需要100行的东西，多重构才是王道……代理的作用十分明显，以后除了内部算法实现，千万千万不要写基于过程或者拿靠函数堆积的那种代码了，多用代理，多用协议，继承，才是真正意义上的iOS开发。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一个Swift以及iOS开发的Git合集</title>
    <url>//tui-jian-yi-ge-swiftyi-ji-ioskai-fa-de-githe-ji</url>
    <content><![CDATA[<p style="text-align: left;">
  地址在此：
</p>

<p style="text-align: left;">
</p>

<p><a title="SwiftGuide" href="https://github.com/ipader/SwiftGuide" target="_blank"><strong>https://github.com/ipader/SwiftGuide</strong></a></p>
<p>里面包括但不限于这些内容：</p>
<ol>
<li> <span style="font-size: 13px;">Swift语法</span></li>
<li> Swift和Objective-C合作</li>
<li> <span style="font-size: 13px;">iOS开发</span></li>
<li> <span style="font-size: 13px;">Cocoa框架</span></li>
<li> 设计模式</li>
<li> 函数式编程思想</li>
<li> 常用UI控件、库</li>
<li> 实际Swift项目</li>
</ol>
<p>喜欢的赶紧过去看看点个Star……重要的事情我只说一遍    </p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>朋友圈好友关系建模设计—动态评论设计</title>
    <url>//peng-you-quan-hao-you-guan-xi-jian-mo-she-ji-dong-tai-ping-lun-she-ji</url>
    <content><![CDATA[<p>接上一篇，我们有了好友关系之后，就又涉及到了怎么样处理“只能看到好友的动态，和好友在好友动态下的评论）</p>
<p>其实关于获取好友状态，已经不成问题，从数据库中读取出来就行了，最后统一出一个好友列表，然后进行查询就行了。关键的地方在于这个好友动态的排序以及评论呈现。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/1/c6/189c18dfe1efe7c7e93052ad0edf2.png"></p>
<p>1、关于评论和动态的获取</p>
<p>我们采取的方式是：后端返回全部动态，前端进行排序。这样的好处是大幅减小了后端的压力，因为如果不这样，后端得依次进行如下操作：</p>
<p><strong>获取当前用户 -&gt; 获取用户的好友列表 -&gt; 对每个用户的好友选择出所有动态 -&gt; 对所有好友选择出来的动态进行排序 -&gt; 对最后结果只返回前n个（后续的再次发送请求获取）</strong></p>
<p>这样的方式对于小型服务器来说是致命的，举个例子，1个人有50个好友，每个好友20个动态，每个动态5条好友评论，光是获取所有好友动态就必须查询50<em>20</em>5=5000条记录，然后还要对这5000条记录进行排序，最后选择出指定100条。这中间还没有包括根据好友进行评论过滤，匿名信息的转换之类的过程，可想而知，一旦大量用户登录查看动态，服务器将压力非常大。</p>
<p>因此，我们将排序做到了前端，后台在进行查询的时候，查询的时候只查询到动态层面，评论在用户点击指定动态之后才会获取，将一步的动作分成两步，用户在下拉浏览的同时发送新的获取评论请求，服务器再返回指定动态的评论，这样就将5000化为50<em>20+n</em>5,n为每页显示的动态数，大大减缓了服务器的压力。同时，通过缓存技术比如Memcached，保存用户的好友动态，防止用户首页快速刷新造成大量的请求。</p>
<p>2、关于评论的呈现</p>
<p>仔细一想，评论其实满足了一种树形结构，因为我不但可以评论这条动态，也可以评论之前的评论，所以，在存储评论的时候，我们可以加入一个parentID，再配合messageID（根节点，动态的ID），就可以进行前端的评论的树形结构生成，大概的数据表就是这样：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2/39/165349718710a96085446deca2c48.png"></p>
<p>这样，基本的功能就完成了，其实现在想想都是很简单的设计，只不过以前并没有做过和思考，导致当时开发遇到了一点点小问题－ －～</p>
<p>就到这里吧，最后再次广告：github：<a href="https://github.com/lizhuoli1126/FriendCircle">https://github.com/lizhuoli1126/FriendCircle</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>朋友圈好友关系建模设计—好友关系设计</title>
    <url>//peng-you-quan-hao-you-guan-xi-jian-mo-she-ji-hao-you-guan-xi-she-ji</url>
    <content><![CDATA[<p>上周学院举办了一个建模比赛中：<a href="http://www.ippclub.org/index.php/archives/33/">http://www.ippclub.org/index.php/archives/33/</a></p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/3/96/05ea1626712a1db418daf7b65050c.png"></p>
<p>最后成品放在了github上面：<a href="https://github.com/lizhuoli1126/FriendCircle">https://github.com/lizhuoli1126/FriendCircle</a></p>
<p>为了实现这个朋友圈的关系，确实有很多值得思考的地方。</p>
<p>第一个难点就在于这种朋友关系的设计。</p>
<p>第一种方案就是最简单直观的方法：一条记录对应一个朋友关系，user1和user2是好友，relation为friend。但是这样导致的问题就是会出现一条重复纪录，因为 ‘朋友’ 是一个双向关系，所以不应当user1,user2,friend和user2,user1,friend重复出现。</p>
<p>第二种方案就是在后端选择的时候加以判断，用 or 来选择两者之一。这样虽然后端的复杂程度增加了，但是其实只是一个选择判断语句，却换来了一半的IO请求，能大幅提高效率。查询的时候使用如下的SQL语句就可以了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$userFriendList</span> = <span class="keyword">$this</span>-&gt;query(<span class="string">&quot;SELECT userID1,userID2 FROM relation WHERE (userID1 = &#x27;%s&#x27; OR userID2 = &#x27;%s&#x27;) AND state = &#x27;friend&#x27;&quot;</span>,<span class="variable">$userID</span>, <span class="variable">$userID</span>);</span><br></pre></td></tr></table></figure>

<p>随后，就是实现添加好友和删除好友。同样的，如果不加以选择，又回产生冗余纪录。添加好友肯定有一方是发送方，一方是接收方。如果不加以判断，会出现user1,user2,send和user2,user1,accept这种等价的两条记录，影响数据库读写效率，不可取。所以，正确的方法应该是在relation里面只有send，通过后端选择的时候进行判断，添加好友时候，如果user1和当前user相同，就是user1,user2,send，否则，就产生一个user2,user1,send。即如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$checkFriendState</span>[<span class="number">0</span>][<span class="string">&#x27;userID1&#x27;</span>]==<span class="variable">$userID1</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$userFriendSet</span> = <span class="keyword">$this</span>-&gt;execute(<span class="string">&quot;UPDATE relation SET state = &#x27;friend&#x27; WHERE userID1 = &#x27;%s&#x27; AND userID2 = &#x27;%s&#x27;&quot;</span>,<span class="variable">$userID1</span>,<span class="variable">$userID2</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个难点，也是二级需求里面的：3、屏蔽指定好友状态 4、禁止指定好友查看个人信息、朋友圈。</p>
<p>仔细分析，其实发现这个问题就是两种屏蔽状态的组合：屏蔽好友动态和屏蔽好友信息。</p>
<p>第一种方案：对屏蔽动态和屏蔽信息看成两个relation，都放在state字段中。这样的想法固然好，但是，如果继续要保证每两个用户之间只有一条记录，不仅state本身需要添加总共4×4（1对2屏蔽，2对1屏蔽，都不屏蔽，都屏蔽）个枚举值，后端的逻辑判断也非常复杂。这种方法虽然能想，但是不可取。</p>
<p>那么怎么办？行不可以咱们就改成列，第二种方案：增加两个新的字段：forbidMessage和forbidInfo，分别对应屏蔽动态和屏蔽信息，每个字段有四种状态（1to2，2to1，none，all）这样，在后端查询的时候多选择两列就可以简单判断出两个好友之间的屏蔽关系（对于数据库，多select出一列远比多扫描一倍字段要来的快）</p>
<p>查询大概就是这样的吧，比如查询是否屏蔽好友动态，可以这样，之后对forbidMessage进行判断就可以了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$userFriendList</span> = <span class="keyword">$this</span>-&gt;query(<span class="string">&quot;SELECT userID1,userID2,forbidMessage FROM relation WHERE (userID1 = &#x27;%s&#x27; OR userID2 = &#x27;%s&#x27;) AND state = &#x27;friend&#x27; AND forbidMessage != &#x27;none&#x27;&quot;</span>,<span class="variable">$userID</span>, <span class="variable">$userID</span>);</span><br></pre></td></tr></table></figure>

<p>有了这样的分析，数据库建立起来就很轻松了，relation表大概就是这样：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/f/80/306bc9a3a895a5a424cb9899824b9.png"></p>
<p>有兴趣的话，大家可以去我的github上看看最后的Demo（注意要看readme）~~~~~</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>SQL</tag>
        <tag>建模</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次Hackathon之旅</title>
    <url>//di-yi-ci-hackathonzhi-lu</url>
    <content><![CDATA[<blockquote>
<p><a href="http://hacks.hustunique.com/">Unique Hackday</a>之旅</p>
</blockquote>
<h1 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h1><p>上周之前，我参加了由GitCafe举办的《开源者行》的上海站，在那里，不仅见识到了很多非常出色的小伙伴，最终的Ideathon上面，我们小组获得了优胜并且我被邀请组队参加了这次的Hackathon。</p>
<p>我们这组小队都是《开源者行》选出的来的，有自北航的<code>林泉沛</code>（ACM算法向）、来自上交的<code>卢涛南</code>（JavaScript好手）、还有来自福建的<code>温荣泉</code>（Unity开发者），在经过1周的水群和漫无止境的脑洞之后，还是没有最终定下Idea。不过Whatever，大家还是非常乐观的一同奔赴武汉。</p>
<p>6月5号，经过长达5小时的旅途（又是一段坑人的旅途），我终于成功面基，林大大展现出他的学长风范，带我小转并且吃了一顿，并深深的体会到了繁华的武汉的意义（对比南京郊区，我感到了深深的恶意……）我、林大还有温荣泉住在一起，大家又快速脑洞了一下，基本提出了几个点子，为了养精蓄锐，大家也就不浪了，快快入睡。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>早上我们早早到了华科的启明学院，感叹华科有钱的同时又感慨学校能够这么重视一个团队（启明学院基本上是各类专业的实验班，主要目标是创新和能力，而联创中大部分人都在启明学院），负责人很是贴心呀，给了各种小奖品还有一个T恤，我们默默的坐在了会议室后面，听前面各种开始讲解联创团队的历史，讲解创新工场的意义…………我们假装听得很感兴趣，底下边考虑着Idea。</p>
<p>终于，到了12点，正式的Hackathon开始了，我们直奔2楼，抢了个风水宝地，大家拿出各式装备（这里省略各种土豪本，Retina MacBook 15`、HKKB等)，有人直接就开始敲起，我们则快速敲定最终idea，上网开始查资料。虽然我们最开始是想要做一个游戏的，但是总找不到好点子（缺少PM的队伍最可怕的结果），经过1个小时的疯狂脑洞，我们最终决定做这个看起来有点无聊，但是又不是那么无聊的弹幕系统</p>
<p><strong><a href="https://github.com/lizhuoli1126/Crystal-Barrage">CrystalBarrage</a></strong></p>
<blockquote>
<p>最终成品</p>
</blockquote>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/e/7a/2ede22b51443bf6ff2fb0629dbc16.png"></p>
<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>这部分其实没有什么说的，我们风骚的敲起代码，我负责Web Server，卢涛南负责前端JS和那个Chrome插件，而温荣泉负责他的Unity版本，林泉沛负责临时当PM以及算法辅助。老样子，基于WebSocket的连接，确保了高效率，快速迭代，后端基本就是靠阿里云，同时微信再现场看看API怎么用，很快基本原型就弄好了。当然，其中也是有很多坑，比如<code>Unity</code>只支持<code>.NET 2.0</code>(我*)，所以WebSocket没有好的库，我和温荣泉硬是现场查了WebSocket协议，基于一个不能用的网络框架再手写让它跑了起来（真是……）</p>
<h1 id="熬夜"><a href="#熬夜" class="headerlink" title="熬夜"></a>熬夜</h1><p>其实我当天觉得精神非常不错，集中到一个点上你就忘记了时间。我基本保持了从中午12点坚持到了第二天早上7点多（原型大概只用了8小时，基本后面时间都在水，细化UI和安全之类），然后睡了2小时，大家一起做了PPT，排演了一下，还有压力测试之类的，10点不到就提交了上去……</p>
<p>当然，我们并不是提交最快的，有一对甚至开场4小时就收工了。中间可以看到各个队伍的黑科技，有带单片机过来的，有的带了几个VR眼睛，还有理所当然的利用LeapMotion的……还有印象的中间提供的饭菜除了夜宵那个小龙虾以外，其他的都是异常之坑爹（……），Anyway，都结束了。</p>
<h1 id="展-nve-示-gou"><a href="#展-nve-示-gou" class="headerlink" title="展(nve)示(gou)"></a>展(nve)示(gou)</h1><p>终于到了展示环节了，一路上，你可以看到各种类型的游戏，有那种设计感非常好的（一看就是带了设计狮过来的），有那种黑科技非常多的（VR之类）……还有那种移动IM，医疗，音调识别等。</p>
<p>我最喜欢的游戏是一个<a href="https://github.com/snowson/Boat4Four"><code>多人划桨游戏</code></a>，大家摇手机表明划桨，每个人会分配到一个船的特定位置，然后根据不同人划桨（摇手机）频率决定了船是向左转还是右转，还是快速前进。无论是这个识别算法还是创意都非常好（大家一起摇手机……）</p>
<p>我们队伍，嘛，充分利用了现场3台显示屏，一台显示PPT外加弹幕，另一台显示网页版的弹幕，还有一台是Unity的弹幕，然后调动现场观众加我们微信公众号，大家的活跃度确实厉害，弹幕基本没有停过，而且三台显示屏的同步效果非常好，至少我们觉得，足够表现我们的产品了。</p>
<p>不过Sadly，最终我们也是酱油了一把（甚至那个划桨游戏也酱油了，不科学……）</p>
<p>最终的大奖是一个基于iPhone的显微成像识别应用，有一个外设显微镜头，可以观察到载玻片上的细胞结构（非常之清晰），还能自动识别分辨出细胞核还是细胞壁，算法也是异常厉害，大家可以看<a href="http://weibo.com/uniquestudio#_rnd1434008868583">这里</a>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>人生中的第一次Hackathon，其实感觉还是非常好的，虽然没有拿上奖，但是Hackathon正如它的精神一样，拿奖更是一个鼓励，只要大家能够享受这次24小时的努力，看着自己的成品从纸上的概念一点点通过代码实现，最终完成的过程，这才是最为吸引人的。同时，你更能体现出团队合作的意义 ，接触到各种你平时不容易接触到的人，无论是程序员还是设计狮们，都是非常有趣的体验！</p>
<p>推荐大家都去尝试一次吧～</p>
<blockquote>
<p>合照</p>
</blockquote>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/6/9f/051d44e76dc8adad53771328a99d2.jpeg"></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Hackathon</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的FP中思想在实际小项目中的应用</title>
    <url>//jian-dan-de-fpzhong-si-xiang-zai-shi-ji-xiao-xiang-mu-zhong-de-ying-yong</url>
    <content><![CDATA[<p><a href="http://zh.wikipedia.org/w/index.php?title=%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80">函数式编程</a>，无论是谁，第一次听到都会感到好奇，疑惑以及畏惧。因为一提到函数式编程就会让人想到很多数学或者计算机科学理论研究的深奥原理，无论是<a href="http://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97">Lamda演算</a>还是<a href="http://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">高阶函数</a>，似乎都和平常自己所接触到的编程语言毫无关系。</p>
<p>随着现代语言的发展，大多数传统面向对象语言已经支持了很多函数式编程中的语法，比如说：</p>
<p><a href="http://zh.wikipedia.org/zh-cn/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">闭包</a>：就是指一个函数块，把连同这个函数所需要的所有参数（全局的or局部的）放入一个闭包中，然后这个函数可以单独用来执行，不会因为外部变量被修改而产生额外影响。相当于这个函数的上下文全部被保留了下来。</p>
<p>Lamda表达式：通俗点说，就是一个简单的闭包函数，通过表达式的方式来进行执行，而不需要再写复杂的逻辑指令式代码，或者无数的花括号来表明相关的上下文逻辑。这点对于简化繁杂的逻辑代码非常有帮助。</p>
<p>回调与改善的异步：其实，回调函数说实话也就是一个函数指针，也许很多人也用过，但是其实它的作用非行强大，如果你一直只接触过Java，C99的话是很难真正理解它对于IO或者网络请求的意义。尤其当你要处理多个异步事件流程，异常处理时，你就会发现它的真正意义。</p>
<p>其实，如果不是一定要从理论高度彻底理解函数式编程，没有必要从头看SICP或者所谓《21天精通Haskell》……（别打我），像Swift，C#，Java8，Python，C++11这种面向现代的语言中，都会有对于Lamda表达式的支持，像JavaScript这种更是纯粹可以当作函数式语言来写。所以，其实你已经在不知不觉中使用了函数式的一些思想，今天我就大概举几个例子来说明一下。</p>
<h2 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1. 闭包"></a>1. 闭包</h2><p>何谓“闭包”？简单的说就是一个把所有自由变量（全局变量，局部变量）包在一起的函数，什么叫做包在一起？就是指这个闭包中进行的任何操作，都不会对外部造成影响，外部变量的修改甚至是销毁，也不会影响闭包内部引用的全局变量。 是不是挺起来感觉有点奇怪，其实很多语言实现闭包的时候，都是把全局变量拷贝了一份到闭包内部，有些语言支持闭包内部修改外部变量（需要特殊的声明，比如说Swift的inout关键字） 比如下面一个简单的数组排序，用函数和闭包两种方法实现</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="operator">=</span> [<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>]</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compareName</span>(<span class="params">s1</span>:<span class="type">String</span>,<span class="params">s2</span>:<span class="type">String</span>)</span> -&gt; <span class="type">Bool</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1 <span class="operator">&lt;</span> s2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sortArrayByFunc <span class="operator">=</span> name.sorted(compareName)</span><br><span class="line"><span class="keyword">var</span> sortArrayByClosure <span class="operator">=</span> name.sorted(&#123;</span><br><span class="line">    (s1:<span class="type">String</span>,s2:<span class="type">String</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    name.removeAll(keepCapacity: <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">return</span> s1 <span class="operator">&lt;</span> s2</span><br><span class="line">&#125;)</span><br><span class="line">println(name)</span><br><span class="line">println(sortArrayByClosure)</span><br></pre></td></tr></table></figure>

<p><img src="http://dreampiggy-image.test.upcdn.net/image/f/fa/c2499a9bce100ff9e18f392609d5d.png"></p>
<p>结果正如我们所料，就算你在闭包内部把name数组清空了，排序后的新数组返回的内容还是不变，这个name数组在闭包被拷贝了一份，你所有更改都不会影响到它（甚至外部的name被release也是）。</p>
<h2 id="2-匿名函数"><a href="#2-匿名函数" class="headerlink" title="2.匿名函数"></a>2.匿名函数</h2><p>匿名函数，顾名思义，就是没有名字的函数……这其实不是很稀奇，因为Swift中就有外部参数名和内部参数名，因为当你认为一个函数可以当作参数的时候，它的名字（外部参数名）就可以省略，也让整个代码看着简单一些。比如JavaScript可以这样写～</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionOne</span> (<span class="params">functionTwo</span>) </span>&#123;</span><br><span class="line">    functionTwo();</span><br><span class="line">&#125;</span><br><span class="line">functionOne(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;I have no name~&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Swift就像这样写：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionOne</span>(<span class="params">functionTwo</span>:()-&gt;())</span> -&gt; void&#123;</span><br><span class="line">    functionTwo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">functionOne(&#123;</span><br><span class="line">    println(<span class="string">&quot;Seems like JavaScript!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>也很好理解吧？就是把一个函数的外部名称去掉而已，简化了代码的繁冗（不然你会看到一段代码中各种无意义的小函数的名称，而且还容易导致名称冲突……） 匿名函数通常都是一个闭包，意思你的匿名函数访问外部变量时候是通过拷贝的，当然，不同语言的语法可能不太一样，建议用的时候要多加注意。</p>
<h2 id="3-尾递归"><a href="#3-尾递归" class="headerlink" title="3.尾递归"></a>3.尾递归</h2><p>递归函数大家都会用，最简单的求阶乘的应用就可以用两行简单的递归搞定。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">factorial</span>(<span class="params">n</span>:<span class="type">Int64</span>)</span> -&gt; <span class="type">Int64</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n <span class="operator">==</span> <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factorial(n <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看起来很完美对吧？（当然，为了简化，没有对参数进行任何验证，而且实际也不应该用Int64来存放数字），但是，有没有想过如果我传过来的参数非常大，比如100这样（结果非常大，实际上这时候的结果已经超过Int的最大值了，有人可能这时候就用String之类来存放结果，但是这里讨论的重点不是这个）</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/b/f8/1d2434005481a33dde2ed357b09de.png" alt="普通递归执行的示意图"></p>
<p>当执行factorial(100)的时候，会发生什么呢？你会在栈中存放100个factorial()，包括函数的地址，函数里面定义的参数，变量……如果再大一点，你马上就见识到<a href="http://en.wikipedia.org/wiki/Stack_overflow">StackOverFlow</a>的美景。</p>
<p>怎么办？这时候尾递归就派上用场了。尾递归，顾名思义，就是把前一次递归的函数直接返回一个结果，释放掉相应的空间（出栈），然后执行新的递归，无论有多深的递归，真实存在于栈中的只有一个，这样就不会因为栈空间不足而导致程序崩溃了。</p>
<p>OK……其实一般来说改造都是很简单的，只需要对原来的参数新加一个，用来存放前一个递归的结果就可以。就像这样～</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">factorialTail</span>(<span class="params">n</span>:<span class="type">Int64</span>,<span class="params">result</span>:<span class="type">Int64</span>)</span> -&gt; <span class="type">Int64</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n <span class="operator">==</span> <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> product <span class="operator">=</span> result <span class="operator">*</span> n</span><br><span class="line">        <span class="keyword">return</span> factorialTail(n <span class="operator">-</span> <span class="number">1</span>,product)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">factorialByTail</span>(<span class="params">n</span>:<span class="type">Int64</span>)</span> -&gt; <span class="type">Int64</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> factorialTail(n, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(为了所谓的用户体验，所以用一个factorialByTail()来调用真正的递归……一般也是这样的，在这里进行一些数值判断或者更好的优化）</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/0/70/4985a8f68dd733af308d0da0c4905.png" alt="尾递归改良版的示意图"></p>
<p>和上一个版本的递归比，确实就是多了一个参数来存放上一次递归的结果，但是能非常有效的解决栈溢出的问题，在实际问题中也是非常实用的（甚至说必不可少的），大概到这里就可以了</p>
<h2 id="4-lambda表达式"><a href="#4-lambda表达式" class="headerlink" title="4.lambda表达式"></a>4.lambda表达式</h2><p>对于没有接触过lambda这个字母（希腊字母）的人，这个东西听起来就和我第一次听到什么半幺群的感觉一样…… 但其实，lamda表达式就是一个匿名函数的简化写法（别打……），不过正如很多编程大师说的，能够写出精简、易懂、易修改的代码才是真正的好代码。如果处处使用匿名函数，你的代码讲会变得异常之长，多层嵌套，各种花括号……这对于阅读和修改都是一个灾难，所以，这时候lamda表达式来拯救我们了。</p>
<p>支持lamda表达式的现代语言有很多，比如C++11、C#、Java8、Scala、Python（可惜Swift只有闭包而没有支持lambda，一般是通过预先定义几个func来传入参数或者使用闭包的简写方法来简化代码，在这几个编程语言中基本我都是只停留在会语法的层面……所以这里我选择使用C++11来写）</p>
<p>既然你已经知道lambda表达式实质就是一个匿名函数，那么我们就直接开始干活吧，看看C++11的写法</p>
<blockquote>
<p><a href="http://en.cppreference.com/w/cpp/language/lambda">详细的C++11 lambda表达式</a></p>
</blockquote>
<p>C++11的lambda写法有点奇葩……大概是这样<a href=""></a>-&gt;void{…}这样写(mutable是值是否在这个匿名函数内部修改外部的自由变量）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">myVector</span><span class="params">(<span class="number">10</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">for_each(myVector.<span class="built_in">begin</span>(), myVector.<span class="built_in">end</span>(),[&amp;](<span class="keyword">int</span> i) <span class="keyword">mutable</span> <span class="built_in"><span class="keyword">throw</span></span>(string) -&gt;<span class="keyword">void</span>&#123;</span><br><span class="line">    cout&lt;&lt;++counter&lt;&lt;endl;</span><br><span class="line">&#125;);</span><br><span class="line">cout&lt;&lt;counter&lt;&lt;endl;</span><br></pre></td></tr></table></figure>

<p>怎么样……相比于for循环来遍历，其实这个有时候看的更清楚（真的吗？），当然，Swift也可以写出类似的优雅的代码～like this:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">init</span>()</span>&#123;</span><br><span class="line">    knownOps[<span class="string">&quot;+&quot;</span>] <span class="operator">=</span> <span class="type">Op</span>.<span class="type">BinaryOperation</span>(<span class="string">&quot;+&quot;</span>)&#123; <span class="variable">$0</span> <span class="operator">+</span> <span class="variable">$1</span> &#125;</span><br><span class="line">    knownOps[<span class="string">&quot;-&quot;</span>] <span class="operator">=</span> <span class="type">Op</span>.<span class="type">BinaryOperation</span>(<span class="string">&quot;-&quot;</span>)&#123; <span class="variable">$1</span> <span class="operator">-</span> <span class="variable">$0</span> &#125;</span><br><span class="line">    knownOps[<span class="string">&quot;*&quot;</span>] <span class="operator">=</span> <span class="type">Op</span>.<span class="type">BinaryOperation</span>(<span class="string">&quot;*&quot;</span>)&#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="variable">$1</span> &#125;</span><br><span class="line">    knownOps[<span class="string">&quot;/&quot;</span>] <span class="operator">=</span> <span class="type">Op</span>.<span class="type">BinaryOperation</span>(<span class="string">&quot;/&quot;</span>)&#123; (<span class="variable">$0</span> <span class="operator">!=</span> <span class="number">0</span>) <span class="operator">?</span> <span class="variable">$1</span> <span class="operator">/</span> <span class="variable">$0</span> : <span class="literal">nil</span> &#125;</span><br><span class="line">    knownOps[<span class="string">&quot;^&quot;</span>] <span class="operator">=</span> <span class="type">Op</span>.<span class="type">UnaryOperation</span>(<span class="string">&quot;^&quot;</span>)&#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="variable">$0</span> &#125;</span><br><span class="line">    knownOps[<span class="string">&quot;√&quot;</span>] <span class="operator">=</span> <span class="type">Op</span>.<span class="type">UnaryOperation</span>(<span class="string">&quot;√&quot;</span>)&#123; <span class="variable">$0</span> <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">?</span> sqrt(<span class="variable">$0</span>) :<span class="literal">nil</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个简单的计算器的计算函数，Op是一个枚举类型，Op.BinaryOperation对应双操作数的运算，Op.UnaryOperation对应单操作数的运算，不需要每个运算（加减乘除）定义一个函数，只需要一个简单的闭包（Swift的闭包简写，如果返回值只有一行语句可以把花括号放到整个参数列表后面，用<code>$0</code>代表第一个参数，所以写起来可以非常简单）</p>
<p>lambda表达式的关键就在于能够配合很多内置的方法来使用，比如map，reduce，避免了繁荣的for循环，而且在多层嵌套里面再也不用数花括号的个数来写，看起来非常简单明晰，便于维护。所以我很推荐使用。</p>
<p><strong>就到这里吧……正如题目所说，这里只写了简单的FP思想，以及简单的应用，不会深究函数式编程的实质和lambda演算的内容……有兴趣的话买一本<a href="http://book.douban.com/subject/1148282">SICP</a>看看你就懂了～～～</strong></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Functional</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>近期参与的APNG和WebP开源项目的经历及感受</title>
    <url>/2017/07/25/%E8%BF%91%E6%9C%9F%E5%8F%82%E4%B8%8E%E7%9A%84APNG%E5%92%8CWebP%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E5%8E%86%E5%8F%8A%E6%84%9F%E5%8F%97/</url>
    <content><![CDATA[<blockquote>
<p>这篇文章讲的是有关近期自己参与的几个开源项目的经历以及感受，不过巧合的是内容都和APNG和WebP这两种图像格式相关，阅读前建议先简单略读一下之前写的一篇文章：<a href="http://dreampiggy.com/2017/03/06/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E5%8A%A8%E6%80%81%E5%9B%BE%E6%A0%BC%E5%BC%8F%E5%AF%B9%E6%AF%94%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">客户端上动态图格式对比和解决方案</a></p>
</blockquote>
<h1 id="SDWebImage"><a href="#SDWebImage" class="headerlink" title="SDWebImage"></a>SDWebImage</h1><p><a href="https://github.com/rs/SDWebImage">SDWebImage</a>是iOS平台上非常著名的图片下载、缓存库，而今年发布的SDWebImage 4.0在架构、接口变动并带来性能优化的同时，还支持了Animated WebP，因此我就高兴地去实验了一下，本想着可以替代之前使用的<a href="https://github.com/ibireme/YYImage">YYImage</a>。但是一测试就发现渲染不正常，追回去看源码，发现SDWebImage的实现可以说是Too naive，压根没有按照WebP规范实现，大部分Animated WebP动图渲染都挂了，完全不可用（连测试都过不了，更别说生产环境了）。演示Demo在此：<a href="https://github.com/dreampiggy/AnimatedWebPDemo">AnimatedWebPDemo</a></p>
<p>总结出来的具体问题有以下几个：</p>
<ol>
<li>SD绘制每帧的canvas大小不正确，在代码中，直接取得当前帧frame的大小，而非整个canvas的大小。这就导致最后生成的所有帧图片的数组中，每帧的图像大小不一致。这样渲染就会出现Bug（把所有帧拉伸到最大的那个图像大小上）。</li>
<li>SD的实现没有考虑过<a href="https://developers.google.com/speed/webp/docs/riff_container#animation">WebP Disposal Method</a>，这个在很多动图中都会用到，因为能够重复利用前一帧的画布，来大幅减少最后生成动图的体积。常见的动图格式如GIF、APNG生成工具一般都采用这种Disposal，不然最终文件体积较大（但Google提供的WebP工具暂时没有自带这种优化的方式，一般使用第三方工具处理）。</li>
<li>UIKit自带的<code>UIImage.animatedImages</code>是非常弱的，SD并没有提供额外的抽象，而是直接用的这个接口。这带来的最大的问题，是UIImage需要提供一个图片数组和总时长，但是会对数组中每个图片平均分配时长。这与Animated WebP的规范就是不同的，后者允许对每帧设置一个不同的持续时长。</li>
<li>UIImageView直接设置<code>image</code>属性，是不支持设置循环次数的，会默认无限循环播放。而有些Animated WebP图片需要有循环次数。</li>
</ol>
<p>既然知道这么多坑，想着SD毕竟是主流框架，就赶紧提了<a href="https://github.com/rs/SDWebImage/issues/1951">Issue</a>，但是过了一周多，SD社区依然没有任何回应。于是尝试自己一个个解决。最后的成果也比较好，上述4个问题都得到了解决。</p>
<h2 id="Canvas大小问题"><a href="#Canvas大小问题" class="headerlink" title="Canvas大小问题"></a>Canvas大小问题</h2><p>这个问题，可以直接通过libwebp的API，修改来使用canvas大小而不是frame大小，确保每帧最后的图像大小相同。其中，为了优化性能，对于透明的且frame比canvas要小的帧，绘制出来等价于将frame平移，然后所有剩余部分填充透明值。在使用CGBitmapContext的时候，可以直接在要传入的Bitmap矢量数据上做变换，减少绘制带来的开销（不过CGBitmapContext本身应该有优化，对于这个开销影响不大，但参考YYImage里面有这一步处理）</p>
<h2 id="Disposal-Method支持"><a href="#Disposal-Method支持" class="headerlink" title="Disposal Method支持"></a>Disposal Method支持</h2><p>在绘制每帧时，按照Animated WebP规范，共享一个全局的CGContext当作canvas，根据每帧不同的Disposal Method，如果为Disposal Background，则在绘制完当前帧后清空CGContext，否则的话不处理，保留到下一帧继续绘制，最终测试和YYImage行为一致。</p>
<h2 id="每帧持续时长相等问题"><a href="#每帧持续时长相等问题" class="headerlink" title="每帧持续时长相等问题"></a>每帧持续时长相等问题</h2><p>这个问题相对比较麻烦，因为你无法改动UIKit实现方式。最后想了一个比较Trick的方式。思路也简单，考虑这样的情况：第1帧持续时间：50ms，第2帧持续时间：100ms，第3帧持续时间：150ms，总共时长300ms。在依然使用UIImage的接口情况下（即数组每帧时长平均分配），那就可以提供一个[1, 2, 2, 3, 3, 3]（元素表示帧的编号）的图像数组，总时长300ms。这样的话平均分到每个元素是50ms，表面上看是6帧但实际渲染是3帧，也能达到最后的显示效果。这样实现的话，只要求一个所有帧持续时间的gcd，然后对每帧图像，按该帧所占的比例重复添加多次就可以了。</p>
<h2 id="循环次数问题"><a href="#循环次数问题" class="headerlink" title="循环次数问题"></a>循环次数问题</h2><p>由于SD的接口问题（用到了UIImageView的<code>sd_setImageWithURL</code>），是直接设置到<code>UIImageView.image</code>上的，而不是<code>animationImages</code>。而直接设置<code>image</code>会无视掉<code>animationRepeatCount</code>这个本来用于设置循环次数的属性。但如果SD框架自动设置<code>animationImages </code>属性的话，可能对使用者现有代码有影响（因为使用者还是用的<code>image</code>属性而不是<code>animationImages</code>属性），因此最后的解决方案，是在UIImage的扩展中，单独提供了一个<code>sd_webpLoopCount</code>的属性来获取循环次数，使用者可以自行设置UIImageView的属性，来实现指定循环次数。</p>
<p>举个例子，一般情形下（显示的动图超过循环次数后停到最后一帧上）就可以这样子用。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[imageView sd_setImageWithURL:webpURL completed:^(<span class="built_in">UIImage</span> * _Nullable image, <span class="built_in">NSError</span> * _Nullable error, SDImageCacheType cacheType, <span class="built_in">NSURL</span> * _Nullable imageURL) &#123;</span><br><span class="line">    imageView.image = image.images.lastObject;</span><br><span class="line">    imageView.animationDuration = image.duration;</span><br><span class="line">    imageView.animationRepeatCount = image.sd_webpLoopCount;</span><br><span class="line">    imageView.animationImages = image.images;</span><br><span class="line">    [imageView startAnimating];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>


<p>这也算是一个解决方式吧。</p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>在写完这些，跑过单元测试，提交了<a href="https://github.com/rs/SDWebImage/pull/1952">Pull request</a>之后，回头来看，才能真正感到YYImage的实力。</p>
<p>YYImage通过一个抽象层YYImageFrame，来把GIF、APNG和Animated WebP三种格式统一到一起，并且提供了Encoder和Decoder可以在三种格式来互相转换（这是重点）。关于绘制部分，还使用到了<a href="https://developer.apple.com/documentation/accelerate">Accelerate Framework</a>，通过vImage的GPU加速的Bitmap变换来替代部分CGBitmapContext绘制。在缓存上，由于SD的抽象层存在，他使用了<a href="https://developer.apple.com/documentation/imageio">ImageIO</a>来直接缓存CGImageSource（SD采用的是缓存了WebP的rawData），效率提升了很高也减少缓存大小（速度对比的话，可以从那个Demo工程看到，checkout到<code>fix_sd_animated_webp_canvas_size</code>分支上运行）。想想还是挺佩服ibireme这个人的，看来以后还要多使用YYKit并多学习。</p>
<h1 id="apng2webp"><a href="#apng2webp" class="headerlink" title="apng2webp"></a>apng2webp</h1><p><a href="https://github.com/Benny-/apng2webp">apng2webp</a>是一个转换APNG到Animated WebP图片的命令行工具，使用Python脚本 + 外部命令行工具来实现。在之前的工作需求中，使用到来优化APNG的大小，并且产出Animated WebP来让客户端使用。</p>
<p>为什么要转换APNG到Animated WebP呢，其实是因为APNG这个规范由于没有进入到PNG标准规范中，一直处于一个不温不火的地步，网上的APNG动图数量也不多，很多网页的PNG图片上传也不支持。虽然如今各大浏览器都对APNG提供了支持（Chrome 59正式支持了APNG，iOS很早从8.0支持，FireFox就是亲爹一直推动），但是客户端上，Android端没有相对靠谱的解码和渲染组件能够使用。反倒是Animated WebP借助Google亲爹推动，成为Android天生支持的图像格式，并且iOS上也有YYImage来提供支持。随着WebP的流行，越来越多设备估计都会支持WebP和Animated WebP，甚至最终超越GIF这个广为流行，但是已有30年历史，只支持256色和1位alpha通道的古老动图格式。</p>
<p>这次对apng2webp项目，主要是贡献了两个功能。</p>
<ol>
<li>Windows的支持，即现在三大桌面端命令行均可使用</li>
<li>CI自动Build和Test</li>
</ol>
<h2 id="Windows的支持"><a href="#Windows的支持" class="headerlink" title="Windows的支持"></a>Windows的支持</h2><p>由于整个外部命令行工具(有四个工具，其中<code>cwebp</code>和<code>webpmux</code>是Google官方提供的，有Windows Build，另两个是源码编译）都是UNIX工具链下的，依赖几个C++库也挺常见，但是尝试过使用VS 2015源码编译跪了，使用<a href="https://github.com/Microsoft/vcpkg">vcpkg</a>这个非常新的Windows上的C++包管理工具，又爆了一堆<a href="https://www.zhihu.com/question/62158323/answer/196189709">link error</a>。对于我这种C++菜鸟来说，最后只好选择了直接上<a href="http://www.msys2.org/">Mysys2</a>和MinGW-w64，一键<code>pacman -S</code>安装依赖，cmake makefile可用，跑了一遍测试也没问题，确实非常方便。由于MinGW-w64的编译产物，会依赖于libgcc，winpthreads，为了使最后的分发方便，于是在Windows上改用静态链接。</p>
<h2 id="CI和单元测试"><a href="#CI和单元测试" class="headerlink" title="CI和单元测试"></a>CI和单元测试</h2><p>关于Python的单元测试，由于这是一个简单的命令行工具，最后就通过引入pytest，直接对main函数和外部工具进行了测试，写起来也特别简单（自动匹配文件名和类名这点挺好）。用起来感觉比起Objective-C和Java的工具要好用多了。</p>
<p>在CI Build上，对于Linux和macOS的话，一般都会使用GitHub官方合作的<a href="travis-ci.org">Travis CI</a>，配置使用yml语法，再加上一系列的Bash命令。而Windows上使用的<a href="https://ci.appveyor.com/">Appveyor</a>也非常好用，自带了<code>VS 2012,2015,2017</code>，<code>Msys2</code>，<code>MinGW-w64</code>，<code>cmake</code>等一系列工具，上手开箱即用。配置的话注意要使用CMD或者PowerShell，如果不熟悉，甚至可以用Msys2装一些UNIX工具来搞定（好处之一）。</p>
<h2 id="感受-1"><a href="#感受-1" class="headerlink" title="感受"></a>感受</h2><p>总体来说，这个项目主要是苦力活，不过也算熟悉了一下UNIX工具在Windows上移植的一种手段，而且还学习到了pytest和开源项目的CI Build方式，也算有点意思吧。</p>
<h1 id="iSparta"><a href="#iSparta" class="headerlink" title="iSparta"></a>iSparta</h1><p><a href="https://github.com/iSparta/iSparta">iSparta</a>是一个图形化的APNG和WebP转换工具，包含了很多功能（APNG合成，WebP转换，图片压缩等），虽说是开源项目，但是上一次提交已经是三年前了。而我最希望的APNG转换Animated WebP功能却没有实现（这也难怪，三年前Animated WebP规范还没出来）。大概看了一眼，使用的是<a href="https://nwjs.io/">NW.js</a>（其实用的是改名前叫做<code>node-webkit</code>的东西），是一个和<a href="https://electron.atom.io/">Electron</a>类似的，使用前端技术栈来构建跨平台应用的框架，本质上都是一个Chromium的运行环境来提供渲染，再加上node.js来提供JS Runtime。上手相对容易。</p>
<p>基本上的目标，是为了提供更好的GUI工具，因此主要就参考了一下iSparta的Issue，解决这几个问题：</p>
<ol>
<li>支持APNG转换Animated WebP</li>
<li>支持i18n国际化</li>
</ol>
<p>由于我并不是专业前端出身（大二学过一段时间前端基本知识和Node.js简单应用，也接触过React Native），经过近两天的奋斗，才终于磕磕碰碰完成。期间遇到过各种问题（NW.js的问题，node第三方库的问题，跨平台行为不一致的问题等等），不过在这里略过说一下重点吧。</p>
<h2 id="APNG支持Animated-WebP"><a href="#APNG支持Animated-WebP" class="headerlink" title="APNG支持Animated WebP"></a>APNG支持Animated WebP</h2><p>关于这个功能，自然可以想到上面的apng2webp命令行工具，不过由于apng2webp本身是Python写的脚本来调用外部工具，没必要在NW.js里打包一个Python环境。因此最后就决定直接在JS里，实现了相同逻辑的脚本来完成。不过实话说这部分花费的时间不长，在GUI布局上才是重头。大体框架参考了项目中的已有写法，但CSS的部分由于实在生疏（原项目有一些布局Hack），最后使用了<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">flexbox</a>布局来搞定的。</p>
<h2 id="i18n国际化"><a href="#i18n国际化" class="headerlink" title="i18n国际化"></a>i18n国际化</h2><p>在网页端支持i18n国际化，这是确实是以前未接触过的地方。考虑到这个项目有大量散落的HTML文本中硬编码了中文文字，而又没有使用类似于Angular、React这种先进的技术来支持模板，因此就需要自行解决。最开始思考了使用服务端渲染的解决方案（即NW.js当作浏览器，本地起node使用express当作服务端，来返回渲染好对应国际化后的HTML），但是遇到了问题，当作纯浏览器后，NW.js无法再使用node端的本地包，这也就意味着无法调用外部的命令行工具（相当于RPC了）。因此这种方案不可行。</p>
<p>再经过尝试后，最后使用的解决方案，是引入了<a href="https://github.com/mashpie/i18n-node">node-i18n</a>和模板引擎（这里用的是<a href="olado.github.io/doT/">doT</a>）。在项目目录下准备好i18n的文本资源（框架支持的是JSON格式）。然后在NW.js应用启动时加载一个空body的页面，执行JS来获取i18n后的字符串，再将这些字符串渲染到只有body的模板中，最后把国际化完成后的HTML body插入到原始的页面的body中。整个过程没有多余的开销（避免了模板未渲染前被显示出来，而且可以缓存模板结果，因为实际上给定一种locale，模板生成的HTML是固定的）。</p>
<h2 id="感受-2"><a href="#感受-2" class="headerlink" title="感受"></a>感受</h2><p>其实现在看看自己平时用到的应用，<code>Atom</code>、<code>VS Code</code>、<code>GitKraken</code>、<code>钉钉</code>，这些看起来已经足够复杂，也都能够用这种前端技术栈构建起来了。以前自己如果提到跨平台桌面客户端应用，第一反应就是Qt，不过现在看来，如果对前端技术栈有所了解，对性能和实时性要求不高，是可以使用Electron或者NW.js这种框架来构建。虽然曾经见过有人批判这些框架（体积庞大-打包了Chromium和Node；内存占用高，效率低下-WebKit渲染而不是原生UI组件），<a href="https://www.reddit.com/r/programming/comments/64oqaq/electron_is_flash_for_the_desktop/">reddit</a>上甚至有讨论说这是新一代的Adobe Flash。</p>
<p>但我个人看来，不排斥这样的框架，只是感觉如今的解决方案并不是十分完美，这些前端栈技术写的客户端最大的问题其实是代码复用问题，基本上是各家有自己的一套组件，而且很多解决方案很Trick。我觉得更为理想的情况，是能够提供一套完整的解决方案，包含了开箱即用的UI组件（并非指Bootstrap这种通用Web UI组件，而是专门针对桌面客户端优化的，符合客户端的交互方式），能够开发，构建，测试，打包一站式自动处理，足够多的Native桥接（这也是一大痛点，见过一些应用又回过头在Electron里面使用Flash），更多的优化，比如共享Chromium容器-不必每个应用的带上200MB的运行环境。</p>
<p>总体来说，Electron或者NW.js这些框架的前途还是比较光明的，毕竟传统意义上的桌面应用开发成本还是太高，尤其是互联网公司的产品，追求跨平台的情况下，在成本，人力还有技术难点考虑来看，也是一个不错的选择。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实，这三个开源项目都是属于一时兴起才去贡献的，并不是为了而去专门寻找的，至于为什么都是WebP相关，或许真的是巧合吧。参与这些开源项目，虽然花费了一定的时间精力，但是获得的知识面上的提升确实非常大，包括但不限于：<code>WebP规范</code>、<code>Accelerate Framework</code>、<code>跨平台C++移植</code>、<code>Python单元测试</code>、<code>CI配置</code>、<code>NW.js</code>和<code>前端i18n</code>。</p>
<p>说实话，参与开源项目的时候，你会发现一些社区是很有意思的，你能够和不认识的人去合作，还能够直观感受到其他人对项目的关注，更能够接触很多你之前从没有接触过的技术栈。我不能说自己是一个愿意花费大量个人时间去贡献开源事业的人，但是其实很多项目参与门槛不是那么高，无论是你自己平时用到的软件、类库，甚至是一个小工具、脚本、翻译、教程，都可以试着参与一下。我觉得程序员的知识，并不是为了单纯为了打工搬砖，能够把自己的想法与他人分享也是一个相当大的乐趣，不是吗？</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>JavaScript</tag>
        <tag>C++</tag>
        <tag>Web</tag>
        <tag>Image</tag>
        <tag>开源活动</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里前端工程师（Node.js）向实习生面试经验</title>
    <url>//a-li-qian-duan-gong-cheng-shi-node-js-xiang-shi-xi-sheng-mian-shi-jing-yan</url>
    <content><![CDATA[<h2 id="前提说明："><a href="#前提说明：" class="headerlink" title="前提说明："></a>前提说明：</h2><p>自己是在北邮论坛中找的学长内推，当时与学长问了关于阿里前端中是否有偏向JavaScript开发（中间件，工具库）的方向，学长说只有杭州有类似岗位，最后把我内推到了淘宝UED的团队去了。</p>
<p>简历说明中侧重讲了关于Node.js的经历，JavaScript轮子的介绍以及一些使用了Node.js技术栈的Web项目。这点对于前端实习也是一个加分项。</p>
<h2 id="一面："><a href="#一面：" class="headerlink" title="一面："></a>一面：</h2><p>一面面试官问了大概有4年开发经验（包括了Java和JavaScript），上来除了标准的自我介绍以外，大概主要谈论了关于Node.js，JavaScript语法以及Web开发的领域，对简历中提到的项目稍微深入问了一下。</p>
<ol>
<li><p>babel或者coffee Script的这些编译到JS的语言是如何工作的？<br>这个问题是最纠结的，因为不太清楚面试官想问什么，大概说了关于Parse的东西，后面补充了关于babel的递归引用JS文件处理的东西，估计有问题。</p>
</li>
<li><p>JavaScript的Async库基本原理是什么？<br>这个网上都有，就是Async的parrllel，waterfall的简单实现，讲出了把callback function替换this域，用一个list来遍历执行，把最终的error或者result参数填回到Async.parallel([functionList], callback(err,result))中，差不多</p>
</li>
<li><p>你写的Functional.js中monad, curry, lazy的解释和意义？<br>基本面向简历的作品，讲解了一点关于monad的简单意义（包裹，传递流，防止外部更改），curry化对JS库函数的意义，还有lazy list或者range对于那种大量数据处理的好处什么的。</p>
</li>
<li><p>Node.js框架同其他语言框架的比较？<br>答出Node.js特色的非阻塞IO和异步性，和Python的Flask对比，再讲解一下express中间件这种模式的特点，差不多了</p>
</li>
<li><p>Node.js与Swift在Web领域的未来？（因为我简历写了iOS开发和Swift）<br>随便扯吧……就是强类型的问题，基于原型面向对象优劣，语法糖的问题，还有支持库什么的。</p>
</li>
</ol>
<p>其他就是自由提问，知道了阿里淘宝对前端实习要求基本不高，主要是JS熟悉，会Node有加分，而且没有固定谁来切图谁写JS，一般都会一点跨栈的东西。</p>
<h2 id="二面："><a href="#二面：" class="headerlink" title="二面："></a>二面：</h2><p>（二面充分暴露了自己的若菜本质）。面试官是Winter，就是那个知乎的温兆伦的Winter（P8）。二面是电话+网页coding的部分，需要在电脑，网络OK情况下进行，要自己提前准备好（不行就说明改个时间……）。开始电话问了一些关于JS的东西，什么闭包，Node.js的require依赖顺序什么的……之后就开始正式网页coding。</p>
<ol>
<li>第一题：设计一个简单的红绿灯策略，比如红灯亮分别为console.log(“red”)这种，要求按照红3s-黄1s-绿1s顺序不断循环展示。</li>
</ol>
<p>这个本来很简单的问题开始愣住了，因为原生的setTimeout好久没用了，问了问可以使用第三方库，但原生其实有笨办法，就是直接硬编三个setTimeout，时间分别为0，3s，4s，然后最外层一个10s延迟的setInterval的来重复。虽然效果但是这肯定不对，因为这直接无视了事件发生相对顺序，靠着全局时间来实现，长期下去由于JS引擎的延时会最终乱掉。</p>
<p>第二种想法，我借用了Promise，大概就是用Promise里面resolve一个setTimeout的函数模拟事件结束，最后由Promsie.then控制流程，好处就是绝对不会出现事件先后顺序错乱，而且写起来简单。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">button</span>(<span class="params">color, time</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			resolve(<span class="string">&quot;Timestamp: &quot;</span> + getTimestamp() + <span class="string">&quot; Color: &quot;</span> + color)</span><br><span class="line">		&#125;, time);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flash</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	button(<span class="string">&quot;red&quot;</span>, <span class="number">3000</span>) <span class="comment">// after last task end, which means the last task will need 3s</span></span><br><span class="line">	.then( <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(v);</span><br><span class="line">		<span class="keyword">return</span> button(<span class="string">&quot;yellow&quot;</span>, <span class="number">3000</span>); <span class="comment">// last spend 3s</span></span><br><span class="line">	&#125;).then( <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(v);</span><br><span class="line">		<span class="keyword">return</span> button(<span class="string">&quot;green&quot;</span>, <span class="number">1000</span>); <span class="comment">// last spend 1s</span></span><br><span class="line">	&#125;).then( <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(v);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二题：算法题，第一问是：给定一个整数金额的整钱n，还有2，3，5元三种货币，要你计算出所有能凑出整钱的组合个数。</li>
</ol>
<p>（这里又暴露自己思维模式问题）应该先从最简单想，假如n=10，把5，3，2元的取的张数定为i,j,k，一定要按照由大到笑顺序，那么就相当于从i=0,j=0,k=0开始循环，一旦组合总金额超过n，那么就break停止（因为从大到小取金额，最小的都无法凑出，那么之后再也不能取了），能凑齐就加一个组合。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countMoney</span>(<span class="params">total</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (total &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> maxAmount = total / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= maxAmount; i++) &#123; <span class="comment">// 5</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= maxAmount; j++) &#123; <span class="comment">// 3</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt;= maxAmount; k++) &#123; <span class="comment">// 2</span></span><br><span class="line">				<span class="keyword">var</span> sum = i * <span class="number">5</span> + j * <span class="number">3</span> + k * <span class="number">2</span>;</span><br><span class="line">				<span class="keyword">if</span> (sum == total) &#123;</span><br><span class="line">					result++;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; total) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(countMoney(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<p>笨方法，但是外层不会超过 n / max[i]，所以复杂度最差也没有到O(n^3)</p>
<p>第二问：假如这个能使用的货币列表是给定的，意思是输入一个整数list，比如[1,2,3,5]，还有金额n，求出所有组合数。<br>现在货币列表不是定的，那么就得想别的方法，当时答的时候说要用递归，但是最终没写出来（唉……），在之后才写出来。</p>
<p>前提思路用的是递归，function countMoney(amount, moneyArr)，amount为剩下的金额，moneyArr为可以选择的货币列表，返回的是产生的组合数，那么初始条件认为amount = n, moneyArr = list（排序，由高往低）。取出当前moneyArr（也就是当前最大的面值<br>）的货币first，剩下的货币可选面额叫做smallerMoneyArr，然后从0到first最大能取的个数开始（即 0 ~ amount / first)，不断递归调用countMoney(remainingAmount, smallerMoneyArr)，加起来所有组合数即可。<br>终止条件很简单，如果剩余余额不为0但可选货币为空，那么分割方法失败，返回0；如果余额是0，那么分割成功，返回1；搞定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Recursive DP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputMoneyArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">inputMoneyArray.sort().reverse(); <span class="comment">// must from higher to lower</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countMoney</span>(<span class="params">amount, moneyArr</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (amount != <span class="number">0</span> &amp;&amp; moneyArr.length == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// no use</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (amount == <span class="number">0</span>) &#123;</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// success one</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> first = moneyArr[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> smallerMoneyArr = [];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; moneyArr.length; i++) &#123;</span><br><span class="line">		smallerMoneyArr[i-<span class="number">1</span>] = moneyArr[i]; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= amount / first; i++) &#123;</span><br><span class="line">		<span class="keyword">var</span> remainingAmount = amount - (first * i);</span><br><span class="line">		sum += countMoney(remainingAmount, smallerMoneyArr);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = countMoney(<span class="number">10</span>, inputMoneyArray);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<p>然而……当时面试脑抽没想出来，后面就问了问一些前端开发要求还有工作环境什么的就没了……唉，还是没有准备的问题，如果真要面试，希望提前准备好一点常见题目，主要是思维方式要对，先最简单（从特例开始，变量假设为固定值），然后推广，复习一下递归，动态规划什么的就很简单。</p>
<h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><p>三面还是技术面，其实我也没有任何准备（以为二面挂了），面试官是淘宝一个P7级别的吧，也是上来自我介绍，然后开始问一些Node.js和JS（有前端JS）的问题，基本我全程都没遇到过HTML5，CSS，Web前端框架，构建工具等问题……可能是简历导致的吧。</p>
<ol>
<li><p>说一下关于Node.js的文件读写方式和实现？<br>基本解释一下fs.readFile，说明异步性，然后面试官开始追问：Node.js是单线程，如何实现多个同时的文件IO？<br>紧接着就开始解释Node.js的fs调用V8的libuv中的<code>uv_fs_open</code>，绑定JS的callback到一个c的函数指针上，然后推入事件列表队列（QueueUserWorkItem），再根据操作系统，Windows下使用IOCP来完成异步IO，*NIX上使用libev来实现。说明Node.js从上层到V8是单线程，从libuv到IOCP或者libev是多线程IO读写</p>
</li>
<li><p>说一下JavaScript几种异步方法和原理？<br>基础问题……先说callback function，说明问题，再讲Promise，包括Promise的原理和实现。然后还有co，利用generator和yield来实现异步控制，顺便也提到了async和await（虽然ES7还是没有加……简直服了），介绍一下使用经验，差不多了。</p>
</li>
<li><p>介绍一下Session和Cookie？<br>不用解释了吧……服务端随机分一个SessionID然后HTTP字段Set-Cookie，内存存一个Map -&gt; 浏览器存Session，以后请求都带Cookie字段（值为SessionID） -&gt; 服务端看到Cookie字段，读SessionID对应的Map，执行逻辑。</p>
</li>
<li><p>前端方面，说明addEventListener使用？作用域？<br>其实问的是如何给一个链接上鼠标事件，先说addEventListener。再追问说，现在IE8和Chrome不一致，IE的addEventListener绑定是window，而标准是document，如何设计一个库来兼容避免对window的污染？<br>然后讲解首先库要做成一个全局匿名闭包，接受一个listener来处理作为执行函数，然后要把window.document保留为内部的变量，然后把listener的this域换位这个闭包的this，就是大概这样？由于不怎么写前端可能是错的……</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">myAddEventListener</span>(<span class="params">type, listener</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document;</span><br><span class="line">	<span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (IE) &#123;</span><br><span class="line">		attachEvent.bind(that);</span><br><span class="line">		attachEvent(type, listener);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		addEventLisener(type, listener);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>谈谈冒泡和捕获事件的区别，应用？<br>就是Event捕获顺序，前者从底向上，后者从顶向下，说明可以stopPropagation，大家都会……</li>
</ol>
<p>然后就没了，最终谈了谈阿里对实习生要求不高，正式校招实习生只有免笔试的优惠，还得面试一轮，不过也觉得可以了。还知道内推是默认团队的，除非再人事申请，公开实习可以选择意向。HR面还没有，基本上没有意外一般不会又问题。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前端工程师还是老老实实干前端吧，我这个面试经历算是特例。其实选择前端是因为阿里的后台开发只有Java岗位，而且都会考很多J2EE的东西（Servlet，SSH，设计模式，中间件，JavaBean什么的）感觉很不喜欢（毕竟是实习，想做一点感兴趣的东西），iOS开发也只要OC而且难度很高。其他公司倒有投后台和iOS的，基本上感觉以后还是很大可能搞iOS了。</p>
<p>其实如果真想毕业找工作，大三下之前就最好决定自己方向（或者一个可选），不要技能栈拉太长，导致深度不够，这是很重要的。面试经历，基本上不准备不太可能（我这是特例……），多刷点简单OJ题（实习面试coding一般很简单），对一些框架，技术原理性要掌握（不一定实践过），项目要写的话一定确保自己还有印象，比较熟悉，不然被问到就很麻烦，基本上这样了。</p>
<p>希望大家都能面试顺利，拿offer拿到手软～</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>CocoaPods的资源管理和Asset Catalog优化</title>
    <url>/2018/11/26/CocoaPods%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%92%8CAsset%20Catalog%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>这篇文章介绍了关于CocoaPods的资源管理行为，对于Pod库作者是必须了解的知识。同时介绍了CocoaPods使用Asset Catalog的注意事项。如果已经了解某方面知识，可以大致略过直接看结论。</p>
</blockquote>
<h2 id="Asset-Catalog和App-Thinning"><a href="#Asset-Catalog和App-Thinning" class="headerlink" title="Asset Catalog和App Thinning"></a>Asset Catalog和App Thinning</h2><p>Asset Catalog，是Xcode提供的一项图片资源管理方式。每个Asset表示一个图片资源，但是可以对应一个或者多个实际PNG图，比如可以提供<code>@1x</code>, <code>@2x</code>, <code>@3x</code>多张尺寸的图以适配；在macOS上，还可以通过指定日间和夜间不同Appearances的两套图片。</p>
<p>这种资源，在编译时会被压缩，然后在App运行时，可以通过API动态根据设备scale factor（Mac上日夜间设置）来选择对应的真实的图片渲染。</p>
<p><a href="https://help.apple.com/xcode/mac/current/#/devbbdc5ce4f">App Thinning</a>，是苹果平台（iOS/tvOS/watchOS）上的一个用于优化App包下载资源大小的方案。在App包提交上传到App Store后，苹果后台服务器，会对不同的设备，根据设备的scale factor，重新把App包进行精简，这样不同设备从App Store下载需要的容量不同，3x设备不需要同时下载1x和2x的图。</p>
<p>但是，这套机制直接基于Asset Catalog，换言之，只有在Asset Catalog中引入的图片，才可以利用这套App Thinning。直接拷贝到App Bundle中的散落图片，所有设备还是都会全部下载。因此如何尽量提升Asset Catalog利用率，是一个很大的包大小优化点。</p>
<h2 id="CocoaPods的资源管理"><a href="#CocoaPods的资源管理" class="headerlink" title="CocoaPods的资源管理"></a>CocoaPods的资源管理</h2><p>CocoaPods是一个构建工具，它完全基于Pods的spec文件规则，在Podfile引入后，生成对应构建Xcode Target。也就是它是一个声明式构建工具（区别于Makefile这种过程式的构建工具）。对于资源的管理，目前有两个方式进行声明并引入，即<code>resources</code>和<code>resource_bundles</code>，参考<a href="https://guides.cocoapods.org/syntax/podspec.html">podspec syntax</a></p>
<p>虽然Podspec中包含所有待构建库的声明，但于CocoaPods也会根据Podfile的配置，动态调整最终的Xcode工程的配置，根据是否开启<code>use_framework!</code>，以下的资源声明最终的行为有所不同，这里分开介绍。</p>
<h3 id="不使用use-framework"><a href="#不使用use-framework" class="headerlink" title="不使用use_framework!"></a>不使用use_framework!</h3><p>当不使用use_framework!时，最终对Pod库，会创建单独的静态链接库<code>.a</code>的Target，然后CocoaPods会对主工程App Target增加自己写的脚本来帮助我们拷贝Pod的资源。</p>
<ul>
<li><code>resources</code>字段</li>
</ul>
<p>对应参数是一个数组，里面可以使用类似<code>A/*.png</code>通配符匹配。所有匹配到的资源，如图片。</p>
<p>在<code>pod install</code>完成后，CocoaPods会插入一个生成的脚本[CP] Copy Bundle Resource（注意，这并非Xcode本身构建过程），拷贝到编译完成后的App Main Bundle的根路径下。</p>
<p>也就是说，如果匹配到了一个<code>A/1.png</code>和<code>A/2.plist</code>，这个<code>1.png</code>和<code>2.plist</code>，最终会出现在ipa包的展开根路径中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Info.plist</span><br><span class="line">| 1.png</span><br><span class="line">| 2.plist</span><br><span class="line">| News</span><br><span class="line">| xxx</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li>最简单暴力，而且由于固定了资源的路径在根路径上，如果先前在主工程目录中使用的代码，不需要更改一行即可继续使用（原因是主工程的你拖一个图片文件夹，Xcode的构建过程默认就是把资源放到App Main Bundle的根路径上的）。</li>
</ol>
<p>缺点：</p>
<ol>
<li>严重的命名冲突问题，由于通配符会拷贝所有文件到根路径，因此如果出现如下 <code>A/1.png, B/1.png</code>两个文件同时匹配（B是另一个库的文件夹），将会出现冲突，CocoaPods采取的方式是暴力合并，会有一个被替换掉。因此，这要求所有资源文件命名本身，加入特定的前缀以避免冲突。类似的不止是图片，所有资源如<code>bundle</code>, <code>js</code>, <code>css</code>都可能存在这个问题，难以排查。而且由于这种拷贝到根路径的机制，这个问题不可从根源避免。</li>
<li>无法享用任何Xcode的优化，Xcode对于所有内建的Copy Bundle Resource中添加的PNG/JPEG图片，会进行一次压缩减少大小（注意，这和App Thinning不一样）。而CocoaPods这种使用自己的Shell脚本暴力拷贝，源文件和Bundle的文件是完全一样的。</li>
</ol>
<ul>
<li><code>resource_bundles</code>字段</li>
</ul>
<p>对应参数是一个字典，里面的Key表示你所希望的一组资源的资源名，常见值是<code>库名+Resource</code>，Value是一个数组，里面和<code>resources</code>一样允许通配符匹配资源。</p>
<p>当<code>pod install</code>完成后，CocoaPods会对所有的Pods中声明了<code>resource_bundles</code>资源，以Key为名称建立一个单独的Bundle Target，然后根据Value匹配的值，把这些图片资源全部加到这个Target的Xcode内建Copy Bundle Resource过程中。然后通过一个Shell脚本添加到App Main Bundle中。假设我们这样写 <code>&#39;DemoLibResource&#39; =&gt; [A/1.png, &#39;A/2.plist&#39;]</code>匹配到了一个<code>1.png</code>和<code>2.plist</code>，会是以这个Target建立一个Bundle父文件夹。然后这些Bundle父文件夹，拷贝到App Main Bundle根路径下，最后得到这样一个ipa结构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Info.plist</span><br><span class="line">| DemoLibResource.bundle</span><br><span class="line">|- 1.png</span><br><span class="line">|- 2.plist</span><br><span class="line">| News</span><br><span class="line">| xxx</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li>解决了命名冲突问题，由于使用了一级的Key值，作为一个单独的父文件夹隔离，不同的Pods库不太可能出现命名冲突（遵守<code>库名+Resource</code>，则库之间不会不出现同样的Key值）。</li>
<li>能利用Xcode本身的优化过程，由于单独构建了一个Target，使用Xcode原生的Copy Bundle Resource过程，PNG图片等会自动享受压缩</li>
</ol>
<p>缺点：</p>
<ol>
<li>由于最终资源产物增加了一级Resource Key的父文件夹，如果有先前依赖Main Bundle路径位置的加载代码，需要进行更新。典型的用法如<code>NSBundle.mainBundle pathForResource:ofType:</code>取本地Bundle中一个文件路径，这时候需要更新为<code>[NSBundle bundleWithPath:] pathForResource:ofType:</code>的代码调用。对于<code>UIImage imageNamed:</code>方法，它也支持Bundle，看情况需要更新。</li>
</ol>
<p>举例子说明，原来使用方式为:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接访问路径</span></span><br><span class="line"><span class="built_in">NSString</span> *plistPath = [<span class="built_in">NSBundle</span>.mainBundle pathForResource:<span class="string">@&quot;test&quot;</span> ofType:<span class="string">@&quot;plist&quot;</span>];</span><br><span class="line"><span class="comment">// 获取Bundle中的UIImage，只是示例，推荐使用Asset Catalog替代这种裸的图片引用</span></span><br><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;1&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>现在需要更新为：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路径变化，这步骤可以封装库级别的工具方法，或者宏，Static对象，都行</span></span><br><span class="line"><span class="comment">// 由于采取了Static Library而没有使用use_framework!，因此此时[NSBundle bundleForClass:]和mainBundle是相同的，原因是类其实在mainBundle的二进制中，而不是Framework中。但是为了代码统一，建议都使用bundleForClass:（后面讲）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NSString *bundlePath = [NSBundle.mainBundle.resourcePath stringByAppendingPathComponent:@&quot;DemoLibResource.bunbdle&quot;]; // 虽然也能Work，为了统一代码（开启use_framework!）用下面的更好</span></span><br><span class="line"><span class="built_in">NSString</span> *bundlePath = [[<span class="built_in">NSBundle</span> bundleForClass:DemoLib.class].resourcePath stringByAppendingPathComponent:<span class="string">@&quot;DemoLibResource.bunbdle&quot;</span>];</span><br><span class="line"><span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleWithPath:bundlePath];</span><br><span class="line"><span class="comment">// 直接访问路径</span></span><br><span class="line"><span class="built_in">NSString</span> *plistPath = [bundle pathForResource:<span class="string">@&quot;test&quot;</span> ofType:<span class="string">@&quot;plist&quot;</span>];</span><br><span class="line"><span class="comment">// 获取Bundle中的UIImage，只是示例，推荐使用Asset Catalog替代这种裸的图片引用</span></span><br><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;1&quot;</span> inBundle:bundle compatibleWithTraitCollection:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<p>总体来说，结合优缺点，大部分的组件库，对于通用资源的引用，应当避免使用<code>resources</code>，而转为使用<code>resource_bundles</code>声明。能够从源头上避免冲突。改动成本也不算大，封装个库内部的工具方法/宏替换下即可。</p>
<p>Tips：如果在使用<code>resource_bundles</code>的情况下，我还想避免Xcode的图片优化策略（如无损的图片等），这时候可以采取将图片放入一个自己建立的Bundle文件夹中，然后<code>resource_bundles</code>引入这个Bundle本身，注意路径需要再加一层。</p>
<h2 id="使用use-framework"><a href="#使用use-framework" class="headerlink" title="使用use_framework!"></a>使用use_framework!</h2><p>当使用了use_framework!之后，CocoaPods会对每个Pod单独建立一个动态链接库的Target，每个Pod最后会直接以Framework集成到App中。而资源方面，由于Framework本身就能承载资源，所有的资源都会被拷贝到Framework文件夹中而不再使用单独的脚本处理。</p>
<ul>
<li><code>resources</code></li>
</ul>
<p>在使用<code>resources</code>声明时，同不使用use_framework!相比，改动的点在于这些Pod库资源的路径。此时，这些Pod库资源会被拷贝到Pod库自己的Fraemwork根路径下，而不在App Main Bundle的根路径下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Info.plist</span><br><span class="line">| Frameworks</span><br><span class="line">|- DemoLib.framework</span><br><span class="line">|-- 1.png</span><br><span class="line">|-- 2.plist</span><br><span class="line">| News</span><br><span class="line">| xxx</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li>虽然在不使用use_framework!的情况下，这种声明会造成命名冲突。但是在使用use_framework!的情况下，由于资源本身被拷贝到Framework中，已经能最大程度减少冲突，因此这时候一般不需要考虑名称冲突问题</li>
</ol>
<p>缺点：</p>
<ol>
<li>在use_framework!的情况下，能够保证代码一行不改，但是使用use_framework!后就不行了。原因在于此时Bundle资源路径已经发生变化，到Framework自身的文件夹中而不是App Main Bundle中，需要进行更新。这个更新的路径和<code>resource_bundles</code>不同，不需要额外拼接一层Key值的名称。直接使用bundleForClass即可，比较简单</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用bundleforClass替代mainBundle即可</span></span><br><span class="line"><span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleForClass:DemoLib.class];</span><br><span class="line"><span class="comment">// 直接访问路径</span></span><br><span class="line"><span class="built_in">NSString</span> *plistPath = [bundle pathForResource:<span class="string">@&quot;test&quot;</span> ofType:<span class="string">@&quot;plist&quot;</span>];</span><br><span class="line"><span class="comment">// 获取Bundle中的UIImage，只是示例，推荐使用Asset Catalog替代这种裸的图片引用</span></span><br><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;1&quot;</span> inBundle:bundle compatibleWithTraitCollection:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li><code>resource_bundles</code></li>
</ul>
<p>在使用<code>resource_bundles</code>声明时，同不使用use_framework!相比，改动的点在于对应这些Key生成的Bundle的位置。此时，这些生成的Bundle父文件夹，会放入Pod库自己的Framework的根路径下。而每个Pod库Framework本身，在App Main Bundle的<code>Frameworks</code>文件夹下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Info.plist</span><br><span class="line">| Frameworks</span><br><span class="line">|- DemoLib.framework</span><br><span class="line">|-- DemoLibResource.bundle</span><br><span class="line">|--- 1.png</span><br><span class="line">|--- 2.plist</span><br><span class="line">| News</span><br><span class="line">| xxx</span><br></pre></td></tr></table></figure>

<p>优点：同上<br>缺点：同上。但有点区别，在于Bundle的路径变化。此时，<code>NSBundle bundleForClass:</code>不再等价于mainBundle了，因此对应代码更新示例里面，一定不能用mainBundle而要用bundleForClass替代。传入的Class是哪一个Pod库的Class，就会取到对应Pod库Framework里面的Bundle文件夹。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 再抄一遍，害怕忘记了，此时不能用mainBundle的resourcePath去拼接</span></span><br><span class="line"><span class="built_in">NSString</span> *bundlePath = [[<span class="built_in">NSBundle</span> bundleForClass:DemoLib.class].resourcePath stringByAppendingPathComponent:<span class="string">@&quot;DemoLibResource.bunbdle&quot;</span>];</span><br><span class="line"><span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleWithPath:bundlePath];</span><br></pre></td></tr></table></figure>

<h2 id="CocoaPods与Asset-Catalog图片资源"><a href="#CocoaPods与Asset-Catalog图片资源" class="headerlink" title="CocoaPods与Asset Catalog图片资源"></a>CocoaPods与Asset Catalog图片资源</h2><p>前面花了大篇章说了关于CocoaPods处理通用的资源引用的方式，是为了业务库作者能有清晰认识到，在从主工程沉库代码后，需要怎么样更改来处理资源。</p>
<p>现在回到正题说一下Pod库中的Assets Catalog需要怎么样处理以利用App Thinning。Assets Catalog的好处都有啥已经说过了，因此我们需要尽量保证大部分情况下优先使用Assets Catalog而非将图片拷贝至App Bunlde中（虽然Xcode会压缩优化，但是这种方式无论如何都无法利用App Thinning）。</p>
<p>Assets Catalog本身的文件夹<code>xcassets</code>一定不会出现在最终的App包中，它在编译时会产生一个二进制产物<code>Assets.car</code>，而这个二进制目前只能由UIKit的方法，去读取产生一个UIImage内存对象，其他代码无法直接访问原始的图片文件路径和ImageData。同时，按照官方文档的说明，<a href="https://developer.apple.com/documentation/uikit/uiimage/1624154-imagenamed?language=objc">UIImage imageNamed:inBundle:compatibleWithTraitCollection:</a> 实际上，会优先去查找指定Bundle（<code>UIImage imageNamed:</code>即为mainBundle）的路径下的<code>Assets.car</code>文件并展开，然后找不到再去寻找Bundle路径下同名的图片文件。所以，从API使用上来看，一个图片具体是在散落在Bundle根路径下，还是在被编译到Bundle路径下的<code>Assets.car</code>中，代码应该是一致的。</p>
<p>值得说明的是，CocoaPods不会自动根据你在Spec中的声明，创建Asset Catalog，你必须通过Xcode手动创建，添加，然后在Spec中引入它。类似这样。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">spec.resources = [<span class="string">&#x27;A/DemoLib.xcassets&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>有了这些知识，我们就结合前面的CocoaPods资源处理策略，以及UIKit的行为，再来回顾上述这些声明的行为，以及我们应该怎么样从代码上去使用。</p>
<p>下面的例子统一都以上面这个示例举例子，假设这个Asset Catalog中含有<code>1.png</code>, <code>1@2x.png</code>, <code>1@3x.png</code>.</p>
<h3 id="不使用use-framework-1"><a href="#不使用use-framework-1" class="headerlink" title="不使用use_framework!"></a>不使用use_framework!</h3><ul>
<li><code>resources</code></li>
</ul>
<p>不同于普通资源那种暴力拷贝的方式，CocoaPods这下没法暴力拷贝这个编译产物的<code>Assets.car</code>到根路径了，因为它会直接覆盖掉App本身的编译产物。所以，CocoaPods采取的方案，是合并Asset Catalog。首先会编译得到工程App的<code>Assets.car</code>，然后通过便利所有Pod的<code>resources</code>引入的<code>xcassets</code>，使用atool工具进行多个Asset Catalog合并，最后输出到App Main Bundle根路径下的<code>Asset.car</code>里。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Info.plist</span><br><span class="line">| Assets.car (编译进去了1.png）</span><br><span class="line">| News</span><br><span class="line">| xxx</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li>继承了普通资源的处理方式，由于采取了Asset Catalog合并，原来主工程代码不需要更改一行可继续使用。相当于库的Assets Catalog资源直接添加到主工程Assets Catalog中</li>
</ol>
<p>缺点：</p>
<ol>
<li>一贯的命名冲突问题，由于Asset Catalog还会和主工程以及其他Pod库进行合并，一旦出现了重名的资源，最终编译产物<code>Assets.car</code>会根据合并顺序替换掉之前的。因此还是得每个Asset Catalog中资源名也得添加前缀</li>
</ol>
<ul>
<li><code>resource_bundles</code></li>
</ul>
<p>类似对于普通资源的处理，如果使用<code>resource_bundles</code>，对于每个Key生成的Bundle父文件夹，会把生成的<code>Assets.car</code>拷贝到这个Bundle父文件夹中。如果当前Pod库引用了多个xcasset文件，对引用的这几个做合并。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Info.plist</span><br><span class="line">| DemoLibResource.bundle</span><br><span class="line">|- Assets.car（含有1.png）</span><br><span class="line">| News</span><br><span class="line">| xxx</span><br></pre></td></tr></table></figure>

<p>优点：同普通资源<br>缺点：同普通资源。代码使用方面，由于之前提到的UIImage API，对于同路径下的<code>Assets.car</code>编译产物，和散落的普通图片名，代码使用方式是一致的，因此这里也没有额外的变化。</p>
<h3 id="使用use-framework-1"><a href="#使用use-framework-1" class="headerlink" title="使用use_framework!"></a>使用use_framework!</h3><ul>
<li><code>resources</code></li>
</ul>
<p>在使用use_framework!的情况下，对应编译产物<code>Assets.car</code>会被拷贝到Pod库Framework的根路径下，其他的行为类似。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Info.plist</span><br><span class="line">| Frameworks</span><br><span class="line">|- DemoLib.framework</span><br><span class="line">|-- Assets.car</span><br><span class="line">| News</span><br><span class="line">| xxx</span><br></pre></td></tr></table></figure>

<p>优点：同普通资源<br>缺点：同普通资源，代码使用方面也同普通资源的情形</p>
<ul>
<li><code>resource_bundles</code></li>
</ul>
<p>在使用use_framework!的情况下，也会创建Key为名称的父Bundle文件夹，拷贝到Pod库Framework根路径下，然后对应编译产物<code>Assets.car</code>放到了这个自动生成Bundle文件夹下，其他行为类似。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Info.plist</span><br><span class="line">| Frameworks</span><br><span class="line">|- DemoLib.framework</span><br><span class="line">|-- DemoLibResource.bundle</span><br><span class="line">|--- Assets.car</span><br><span class="line">| News</span><br><span class="line">| xxx</span><br></pre></td></tr></table></figure>

<p>优点：同普通资源<br>缺点：同普通资源，代码使用方面也同普通资源的情形</p>
<h2 id="最佳实践和总结"><a href="#最佳实践和总结" class="headerlink" title="最佳实践和总结"></a>最佳实践和总结</h2><p>可以看出，CocoaPods，对待普通资源和Asset Catalog都支持，唯一的行为不同的点，在于普通资源如果发生重名，不会进行合并而是直接替换。但是Asset Catalog如果出现多个引用，会进行合并。</p>
<p>虽然表面看起来，我们分析了总共会有 <strong>使用resource还是resource_bundle</strong> * <strong>是否使用use_framework!</strong> * <strong>普通资源还是Asset Catalog</strong>，8种情形。但是实际上从世纪代码使用上，由于Asset Catalog和普通图片API可以统一，同时动态/静态的Bundle位置也可以统一处理，实际上只有两种Case：</p>
<h3 id="使用resource-bundle：推荐，避免命名冲突"><a href="#使用resource-bundle：推荐，避免命名冲突" class="headerlink" title="使用resource_bundle：推荐，避免命名冲突"></a>使用resource_bundle：推荐，避免命名冲突</h3><p>推荐做法，对于每个需要引入资源的库，以<code>库名+Resource</code>为Key（不强制，推荐），然后引入资源，Asset Catalog。代码必须更新，以使用对应的Bundle名来获取。参考上面的代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *bundlePath = [[<span class="built_in">NSBundle</span> bundleForClass:DemoLib.class].resourcePath stringByAppendingPathComponent:<span class="string">@&quot;DemoLibResource.bunbdle&quot;</span>];</span><br><span class="line"><span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleWithPath:bundlePath];</span><br></pre></td></tr></table></figure>

<h3 id="使用resource：不推荐，因为会导致命名冲突。"><a href="#使用resource：不推荐，因为会导致命名冲突。" class="headerlink" title="使用resource：不推荐，因为会导致命名冲突。"></a>使用resource：不推荐，因为会导致命名冲突。</h3><p>除非你能保证分所有资源都已加入前缀，而且目前代码不好更改的情况下，可以保持继续使用主工程的直接访问mainBundle的代码；其他的任何情况，使用<code>NSBundle bundleForClass:</code>来获取Bundle，然后加载路径，或者使用<code>UIImage imageNamed:inBundle:compatibleWithTraitCollection</code>加载图片。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleForClass:DemoLib.class];</span><br></pre></td></tr></table></figure>

<p>对于Pod库开发者，需要尽量使用<code>resource_bundle</code>来处理资源，同时，Pod自身代码可能需要更新，以使用正确的方式加载图片或者其他Bundle资源。并且，对于图片资源，如果无特殊用处，建议都建立Asset Catalog以利用App Thinning。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title>FRP对比—ReactiveCocoa、RxSwift、Bacon以及背后的Functional</title>
    <url>/2016/11/17/FRP%E7%AE%80%E4%BB%8B%E2%80%94ReactiveCocoa%E3%80%81RxSwift%E3%80%81Bacon%E4%BB%A5%E5%8F%8A%E8%83%8C%E5%90%8E%E7%9A%84Functional/</url>
    <content><![CDATA[<h1 id="ReactiveCocoa和RxSwift"><a href="#ReactiveCocoa和RxSwift" class="headerlink" title="ReactiveCocoa和RxSwift"></a>ReactiveCocoa和RxSwift</h1><p>iOS的开发上，Objective-C可以说既是一个巨大的成功，也是一个巨大的限制。Cocoa Touch提供的原生API本身就是目标当年的事件驱动和消息派发的GUI编程模型，并且专门为Objective-C这门类smalltalk的消息式OO语言设计的，更为尴尬的是iOS上没有OS X上自带的<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CocoaBindings/CocoaBindings.html">Data Binding</a>。种种原因，导致Target-Acion，KVO，Notification，Apple式MVC架构才会一直成为iOS开发的主流。然而，做过开发的都知道，这套架构在大型App，尤其复杂是网络请求和人机交互特别多的情况下，非常容易让整个App架构变得难以维护。</p>
<p>Apple式的MVC，又称为Massive View Controller，会让你整个业务代码和UI绑定代码充斥同一个文件中，并且导致很多人经常会在View中，直接#include一个Modeld的头文件，然后起一个<code>configureInfo: </code>的方法，直接在里面把Model的数据拿来绑定到View的属性上。不信？试试搜一遍你所有的View，把Model的头文件删掉，看看能否编译通过。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userCell <span class="operator">=</span> tableView.dequeueReusableCellWithIdentifier(<span class="string">&quot;identifier&quot;</span>) <span class="keyword">as</span> <span class="type">UserCell</span></span><br><span class="line">userCell.configureWithUser(user)</span><br></pre></td></tr></table></figure>

<p>MVP架构或许是你的救星，不过实际上，MVP只是一个工程化的解决问题，把Massive View Controller变成Massive View Presenter，带来相对明确的架构分层的副作用就是近乎两倍的代码量。而在这种情况下，MVVM的架构就是一个非常大的突破，和MVP一样把View/ViewController扔到一起，但是引入单独的ViewModel，通过View到ViewModel的单向绑定，ViewModel对Model的订阅，既避免了MVC造成的代码混乱，又减少了MVP的造成的重复代码。而实践上，提到MVVM，就得 提到<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>或者<a href="https://github.com/ReactiveX/RxSwift">RxSwift</a>，这两者都是FRP的GUI框架实现。</p>
<h2 id="ReactiveCocoa"><a href="#ReactiveCocoa" class="headerlink" title="ReactiveCocoa"></a>ReactiveCocoa</h2><blockquote>
<p>为了统一术语，ReactiveCocoa中的概念这里都描述成Rx中类似的概念，本质上都是一样的东西</p>
</blockquote>
<p>ReactiveCocoa把事件流的接口，定义为<code>RACStream</code>。而实际上，通常的事件流实现都是<code>RACSignal</code>对象，这个Signal是一个冷事件流（也可以叫做push-driven），即有订阅者订阅后，才会<code>开始从头依次发送事件</code>。而对应的冷事件流接口叫做<code>RACMulticastConnection</code>，即没有订阅者也会发送事件流。热事件可以通过<code>publish</code>和<code>multicast</code>转换到热事件流，这对于很多请求，比如WebSocket这种不需要重入的事件流来说很有用。</p>
<p>另外，为了支持Objective-C语言上对泛函性的缺乏，提供了另一个事件流的实现<code>RACSequence</code>对象，用来处理集合类型的事件流。</p>
<p>一旦订阅之后，事件流就可以解包，拿到不同状态下的数据，Objective-C的接口就是和Rx类似的三种：<br><code>void (^next)(id) </code>：拿到事件本身，事件流本身继续流动<br><code>void (^error)(NSError *)</code>：处理错误事件，error和completed后事件流均结束，两种状态必局其一<br><code>void (^completed)()</code>：事件流正常结束的处理</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[[<span class="keyword">self</span>.usernameTextField.rac_textSignal</span><br><span class="line">filter:^<span class="built_in">BOOL</span>(<span class="keyword">id</span> value)&#123;</span><br><span class="line">   <span class="built_in">NSString</span>*text = value;</span><br><span class="line">   <span class="keyword">return</span> text.length &gt; <span class="number">3</span>;</span><br><span class="line">&#125;]</span><br><span class="line">subscribeNext:^(<span class="keyword">id</span> x)&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, x);</span><br><span class="line">  &#125;];</span><br></pre></td></tr></table></figure>

<p>这里，<code>rac_textSignal</code>就是一个事件源，而后面的filter，是一个操作符，对事件流的事件变换到真正订阅者关心的数据，最后的<code>subscribeNext</code>是一个便捷方法，订阅并生命next状态的处理方式。整个流程模拟的是一个TextFiled的用户输入事件流的走向，用户的所有输入，一旦超过3个文本，就会流动并且打印出来，注意冷事件流是<strong>整个流从头开始的</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hel</span><br><span class="line">hell</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<p>就如上一篇简介中提到的那样，我们可以不断添加新的操作符，来灵活处理我们的关心的事件流。虽然Objective-C本身没有任何泛函性的接口，但是ReactiveCocoa封装的<code>RACSequence</code>本身提供了相当丰富的操作符，包括常见的<code>map</code>,<code>flatmap</code>,<code>filter</code>,<code>combine</code>,<code>switch</code>等，比如你可以把用户名和密码框的检验事件应用<code>combineLastest</code>来确保二者永远同时满足才允许登陆。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">RACSignal *signUpActiveSignal =</span><br><span class="line">  [RACSignal combineLatest:@[validUsernameSignal, validPasswordSignal]</span><br><span class="line">                    reduce:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span> *usernameValid, <span class="built_in">NSNumber</span> *passwordValid) &#123;</span><br><span class="line">                      <span class="keyword">return</span> @([usernameValid boolValue] &amp;&amp; [passwordValid boolValue]);</span><br><span class="line">                    &#125;];</span><br></pre></td></tr></table></figure>

<p>为了和非Reactive代码和谐相处，ReactiveCocoa提供了一个<code>RACSubject</code>类型，是用来处理有副作用的流的，即这个流是可变的。你可以手动创造一个新的流，并不断调用<code>sendNext:</code>来手动发送事件给其他订阅者，这就类似了传统的消息事件绑定机制。这个对于一些条件下，比如类似连续加载页面的信号，视图跳转等等有一定的作用，不过对于网络请求等，应当使用<code>RACSignal</code>。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[[_button rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;  </span><br><span class="line">    [<span class="keyword">self</span>.loggerSubject sendNext:<span class="string">@&quot;pop&quot;</span>];  </span><br><span class="line">    [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];  </span><br><span class="line">      </span><br><span class="line">&#125;];  </span><br></pre></td></tr></table></figure>

<p>如前面所说，ReactiveCocoa是一个方便打造MVVM架构的框架，提供的<code>RAC宏</code>可以方便的进行单向绑定，把事件结果同你的UI对象属性绑定起来，避免了繁琐的代码处理，达到Reactive Programming</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">RAC(<span class="keyword">self</span>.passwordTextField, backgroundColor) =</span><br><span class="line">  [validPasswordSignal</span><br><span class="line">    map:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span> *passwordValid) &#123;</span><br><span class="line">      <span class="keyword">return</span> [passwordValid boolValue] ? [<span class="built_in">UIColor</span> clearColor] : [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>

<p><img src="https://koenig-media.raywenderlich.com/uploads/2014/01/CombinePipeline.png"></p>
<p>简单来看，ReactiveCocoa真不愧是Cocoa，所有的设计围绕Cocoa的设计模式，提供了方便的宏，并且弱化了泛函概念，提供了很多副作用处理的方式，不像Rx那样纯粹。然而随着Objective-C语言的慢慢淡化，整个项目之后也转为依赖ReactiveSwift的实现。在当前iOS开发的情况下，如果使用Objective-C语言，那么这就是不二的FRP之选。但是如果使用Swift，最好使用正统的RxSwift。</p>
<h2 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h2><p><img src="https://pic3.zhimg.com/v2-4b572f2ac5bc28905f043c7999c83c2a_r.jpg"></p>
<p><a href="http://reactivex.io/">ReactiveX</a>，也就是Rx，是一个大的语言无关的FRP架构设计，只要你了解了一个语言下的用法，那么就可以达到<code>learn once, write everywhere</code>（跑……）</p>
<p>在Rx中，事件流定义为一个<code>Observable</code>，而订阅者对应的是<code>Disposable</code>接口（RxJava里面对应的就是<code>Subscriber</code>），事件流可以通过subscribe来订阅，也是对应了三个状态<code>onNext</code>，<code>onError</code>，<code>onCompleted</code>。</p>
<p>这里，就以RxSwift为准，介绍一下简单的区别。首先，得益于Swift的语法，ReactiveCocoa的Data Binding也变得更简单了，不需要宏包裹和提前声明，看起来更为清晰</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> primeTextField.rx.text           <span class="comment">// Observable&lt;String&gt;</span></span><br><span class="line">	.map &#123; <span class="type">WolframAlphaIsPrime</span>(<span class="type">Int</span>(<span class="variable">$0</span>) <span class="operator">??</span> <span class="number">0</span>) &#125;      <span class="comment">// Observable&lt;Observable&lt;Prime&gt;&gt;</span></span><br><span class="line">	.concat()                                       <span class="comment">// Observable&lt;Prime&gt;</span></span><br><span class="line">	.filter &#123; <span class="variable">$0</span>.isPrime &#125;                          <span class="comment">// Observable&lt;Prime&gt;</span></span><br><span class="line">	.map &#123; <span class="string">&quot;number <span class="subst">\(<span class="variable">$0</span>.n)</span> is prime&quot;</span> &#125;              <span class="comment">// Observable&lt;String&gt;</span></span><br><span class="line">	.bindTo(resultLabel.rx.text)                    <span class="comment">// bind to label text</span></span><br></pre></td></tr></table></figure>

<p>另外，Rx中，不同于ReactiveCocoa，事件流本身都是<code>Observable</code>，至于是冷还是热，是通过<code>publish</code>和<code>connect</code>操作得到的，不同于ReactiveCocoa中的<code>RACSignal</code>和<code>RACMulticastConnection</code>这种分开的设计，导致必须用对应的操作符，在Rx中，所有的操作符都是一致的表现，这点是一个非常大的改进。</p>
<p>同时，Rx的操作符也是最丰富的，什么<code>lift</code>，<code>switch</code>这种常用的，在ReactiveCocoa中就得自己组合一套。当然，Rx的自定义操作符也很多简单，你只需要一个<code>T -&gt; Observable&lt;T&gt;</code>类型的函数来定义</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ObservableType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">replaceWith</span>&lt;<span class="type">R</span>&gt;(<span class="params">value</span>: <span class="type">R</span>)</span> -&gt; <span class="type">Observable</span>&lt;<span class="type">R</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> map &#123; <span class="keyword">_</span> <span class="keyword">in</span> value &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整体上看，Rx是如今比较有名，并且成套的FRP解决方案，并且迁移到不同平台上的学习成本非常低。ReactiveCocoa本身如今已经分离为Swift版和Objective-C版，并且后者不再继续维护，因此对于混合Objective-C和Swift，或者纯Swift项目，RxSwift是一个构建MVVM和FRP架构的不二选择。</p>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>为什么这里要提到Promise呢，因为Reactive Programming需要处理的很多，就是对异步请求和频繁事件响应的处理。而Promise是一个比较流行的JavaScript平台异步解决方案。在和FRP的配合上面，可以通过不断的then组合成需要的Promise事件，并且Promise的超集，也就是Future，本身就有搭配不同的Future操作符来达到类似于Rx的组合效果。</p>
<p>不过，Promise的目的，在于对异步请求流程的控制，而本身并没有对事件流的管理。原始的Promise虽然有着类似Rx的事件流类似特点：<code>不可变性</code>、<code>可组合性</code>，但是关键区别在于Promise自身是单次流动，数据流只会从then开始走到结束或者catch掉，无法多次重新流动；不支持流程中断取消；需要配合其他框架层面的东西，来达到完整事件流和GUI数据绑定，这里就得提到<a href="https://github.com/baconjs/bacon.js/">Bacon</a></p>
<h1 id="Bacon"><a href="#Bacon" class="headerlink" title="Bacon"></a>Bacon</h1><p><img src="https://baconjs.github.io/logo.png"></p>
<p>Bacon是JavaScript上的一个FRP框架，借鉴于知名的<a href="https://github.com/dominictarr/event-stream">EventStream</a>所实现的事件流，Bacon在这之上完成了FRP所需要的一切：事件流，变换，数据绑定，比起正统的RxJS来说，提供了更适合Web前端应用的的<code>EventStream</code>和<code>Property</code>，不需要被RxJS的Hot/Cold Observerable烦扰。并且原生支持了所有惰性求值，在benchmark上比起RxJS有着不错的性能优势。</p>
<ul>
<li>示例——计数器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> plus = $(<span class="string">&quot;#plus&quot;</span>).asEventStream(<span class="string">&quot;click&quot;</span>).map(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> minus = $(<span class="string">&quot;#minus&quot;</span>).asEventStream(<span class="string">&quot;click&quot;</span>).map(-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> both = plus.merge(minus)</span><br><span class="line">	.scan(<span class="number">0</span>, add) <span class="comment">// add +1 or -1 base on click eventstream</span></span><br><span class="line">	.onValue(<span class="function"><span class="params">sum</span> =&gt;</span> $(<span class="string">&quot;#sum&quot;</span>).text(sum))</span><br><span class="line">	.onError(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e))</span><br><span class="line">	.onEnd(<span class="function">() =&gt;</span> alert(<span class="string">&#x27;total: &#x27;</span> + $(<span class="string">&quot;#sum&quot;</span>).text));</span><br></pre></td></tr></table></figure>

<p>除了专门提供的EventStream和Propery的两种Observable，并且提供了更好的事件源支持，你可以从原生的DOM事件来触发事件源，可以从Promise来触发（这是一个大的优势），甚至从callback或者自定义的binder都可以。在RxJS的基础上有了比较大的提升。不过具体工程上讲两者都是Rx实现的FRP，取舍还要看自己的特定选择（幸好我不做前端）</p>
<h1 id="Functional"><a href="#Functional" class="headerlink" title="Functional"></a>Functional</h1><blockquote>
<p>由于自己也不是Haskell Guy，仅仅接触过一点点JS、Closure和Swift这些有泛函编程思想的语言 ，如果想具体了解函数式编程中，关于<code>Functor</code>、<code>Applicative</code>以及<code>Monad</code>的知识，推荐花上10分钟看一下简单的图文教程：分别有<a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">原文(推荐)</a>、<a href="http://www.mokacoding.com/blog/functor-applicative-monads-in-pictures/">Swift版</a>和<a href="https://medium.com/@tzehsiang/javascript-functor-applicative-monads-in-pictures-b567c6415221#.5upsphilw">JS版</a></p>
</blockquote>
<p><img src="http://adit.io/imgs/functors/bind_def.png"></p>
<p>下面这些内容，默认为已经掌握了上述简单理解，如果看不太懂可以回过头重新看一下对应的Functional知识</p>
<h2 id="ReactiveX"><a href="#ReactiveX" class="headerlink" title="ReactiveX"></a>ReactiveX</h2><p>Rx的<code>Observable</code>的本质就是一个<code>Event Monad</code>，即上下文（就是图文教程中包裹的盒子）为Event的一个Monad，这里的Event定义，可以对应语言的struct或者enum，包括了<code>next</code>、<code>error</code>和<code>complete</code>三个上下文即可。这里截取的是Swift语言的实现，<code>map</code>方法实现拆装箱（类似Optional，即Haskell的Maybe）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Event</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/// Next element is produced.</span></span><br><span class="line">    <span class="keyword">case</span> next(<span class="type">Element</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Sequence terminated with an error.</span></span><br><span class="line">    <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Sequence completed successfully.</span></span><br><span class="line">    <span class="keyword">case</span> completed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Maps sequence elements using transform. If error happens during the transform .error</span></span><br><span class="line">    <span class="comment">/// will be returned as value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;<span class="type">Result</span>&gt;(<span class="keyword">_</span> <span class="params">transform</span>: (<span class="type">Element</span>) <span class="keyword">throws</span> -&gt; <span class="type">Result</span>)</span> -&gt; <span class="type">Event</span>&lt;<span class="type">Result</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">let</span> .next(element):</span><br><span class="line">                <span class="keyword">return</span> .next(<span class="keyword">try</span> transform(element))</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">let</span> .error(error):</span><br><span class="line">                <span class="keyword">return</span> .error(error)</span><br><span class="line">            <span class="keyword">case</span> .completed:</span><br><span class="line">                <span class="keyword">return</span> .completed</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> <span class="keyword">let</span> e &#123;</span><br><span class="line">            <span class="keyword">return</span> .error(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>而Rx的<code>subscribe</code>方法就是一个解包，也就是<code>Monad&lt;Event&gt;.map()</code>，接收一个<code>(Event) -&gt; void</code>的参数。或者使用更一般直观的三个参数<code>onNext: (Element) -&gt; Void</code>、<code>onError: (Error) -&gt; Void</code>、<code>onCompleted: (Void) -&gt; Void</code>方法（在其他语言实践上，RxJS就是三个function参数，而RxJava为了支持Java7可以使用匿名内部类）</p>
<p>理论：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="type">Monad</span> <span class="type">Event</span> &lt;$&gt; subscribe</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">0.3</span>)</span><br><span class="line">	.subscribe &#123; event <span class="keyword">in</span></span><br><span class="line">		<span class="built_in">print</span>(event) <span class="comment">// unwraped event</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cancel <span class="operator">=</span> searchWikipedia(<span class="string">&quot;me&quot;</span>)</span><br><span class="line">	.subscribe(onNext: &#123; results <span class="keyword">in</span></span><br><span class="line">		<span class="built_in">print</span>(results)</span><br><span class="line">	&#125;, onError: &#123; error <span class="keyword">in</span></span><br><span class="line">		<span class="built_in">print</span>(error)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>Rx的Operator是<code>Functor</code>，也就是说<code>(Event) -&gt; Event</code>，因此可以通过Monad不断<code>bind</code>你想要的组合子，直到最终符合UI控件需要的数据</p>
<p>理论：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="type">Monad</span> <span class="type">Event</span> &gt;&gt;= map &gt;&gt;= concat &gt;&gt;= filter &gt;&gt;= map &lt;$&gt; subscribe</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> primeTextField.rx.text           <span class="comment">// Observable&lt;String&gt;</span></span><br><span class="line">	.map &#123; <span class="type">WolframAlphaIsPrime</span>(<span class="type">Int</span>(<span class="variable">$0</span>) <span class="operator">??</span> <span class="number">0</span>) &#125;      <span class="comment">// Observable&lt;Observable&lt;Prime&gt;&gt;</span></span><br><span class="line">	.concat()                                       <span class="comment">// Observable&lt;Prime&gt;</span></span><br><span class="line">	.filter &#123; <span class="variable">$0</span>.isPrime &#125;                          <span class="comment">// Observable&lt;Prime&gt;</span></span><br><span class="line">	.map &#123; <span class="variable">$0</span>.intValue &#125;                            <span class="comment">// Observable&lt;Int&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="Promise-Future"><a href="#Promise-Future" class="headerlink" title="Promise / Future"></a>Promise / Future</h2><p>Promise本质上也是一个<code>Monad</code>，包裹的上下文就是<code>resolve</code>和<code>reject</code>。<br>你可能反驳说<code>Promise.then(f)</code>中的<code>f</code>，可以是<code>value =&gt; value</code>，而并不是一个被Promise包裹的类型啊。但是实际上，由于JavaScript类型的动态性，Promise.then中直接返回value类型是个语法糖罢了，实际上会处理为<code>value =&gt; Promise.resolve(value)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">.then(<span class="function"><span class="params">v</span> =&gt;</span> v+<span class="number">1</span>) <span class="comment">//便捷写法罢了，返回的是resolved状态的Promise对象</span></span><br><span class="line">.then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(v+<span class="number">1</span>)) <span class="comment">//完整写法</span></span><br><span class="line">.then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;error &#x27;</span> + v)) <span class="comment">//想要返回rejected状态，无便捷方法</span></span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e)) <span class="comment">// error 3</span></span><br></pre></td></tr></table></figure>

<p>原理：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="type">Monad</span> <span class="type">Promise</span> &gt;&gt;= <span class="keyword">then</span> &gt;&gt;= <span class="keyword">then</span> &gt;&gt;= catch &gt;&gt;= <span class="keyword">then</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v + <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line">  &#125;.then(<span class="function"><span class="params">v</span> =&gt;</span>  &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>); <span class="comment">//reject</span></span><br><span class="line">  &#125;.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e); <span class="comment">// error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">0</span>);</span><br><span class="line">  &#125;.then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;end&#x27;</span>, v); <span class="comment">// end 0</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>FRP本身发展时间并不长，主要是因为当年的GUI程序的复杂度和需求变化成都，和现如今相比有着明显的差距。传统的事件驱动在构件原型和简单交互的App确实非常简单，但随着架构的发展和业务增多，到了连MVP都无法承担的地步，MVVM的提出和相应的FRP框架就是一个救命稻草。</p>
<p>虽然现如今来说，FRP的主要问题在于入门门槛相对高一点，不过在我看来，这就和当年Web走向Angular和React一样，都是需要一段时间过渡的。在Android平台上，RxJava已经获得了相当大的成功和推广，ReactiveCocoa可能在国内并不如RxJava那样出名，但估计在日后，FRP＋MVVM＋Reactive Native＋Redux这种混合App架构将会得到更大推广和发展，如果Apple或者Google再加一把推手，到那时候才可以说Reactive Programming的时代真正到来了吧。</p>
<p>#参考资料</p>
<ul>
<li><a href="https://github.com/ReactiveCocoa/ReactiveObjC">RxObjc</a></li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveSwift">RxSwift</a></li>
<li><a href="http://reactivex.io/">ReactiveX</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a></li>
<li><a href="https://github.com/baconjs/bacon.js/">Bacon</a></li>
<li><a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">Monad</a></li>
<li><a href="http://nshipster.cn/reactivecocoa/">NSHipster</a></li>
<li><a href="https://www.raywenderlich.com/62699/reactivecocoa-tutorial-pt1">ReactiveCocoa Tutorial</a></li>
<li><a href="http://blog.leichunfeng.com/blog/2015/11/08/functor-applicative-and-monad/">ReactiveCocoa Monad</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Functional</tag>
        <tag>JavaScript</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C代码库的实现隐藏</title>
    <url>/2017/06/04/Objective-C%E4%BB%A3%E7%A0%81%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F/</url>
    <content><![CDATA[<blockquote>
<p>虽然Swift现在是开发iOS推荐入手的最佳语言，但是对于代码库而言，最大的一个问题是Swift ABI仍然没有定下（今年发布的的Swift 4.0，依然放弃ABI稳定性，而注重于Swift源代码3.x-&gt;4.0的兼容性）。所以这就意味着Swift 3.x编译的二进制库，在Swift 4.0将无法链接，只能重新代码编译。看来这又将是Objective-C这门古老的语法，能够作为一些framework首选开发语言的一年。</p>
</blockquote>
<p>对于一个代码库来说，有时候我们为了隐藏一些实现的细节，或者内部处理流程，需要编译到二进制进行分发，并提供Public Header来供其他开发者调用。</p>
<p>因此，开发代码库的时候，需要明确哪些API是对外公开的，可以由其他开发者调用。那些是库内部之间互相调用的，不应该由外部使用者调用。而Objective-C不像C++提供了private关键字来限制直接访问成员变量和成员方法。因此，就需要尽量避免私有属性和私有方法的定义出现在头文件中。只要不引入私有的头文件，那就无法直接访问这些属性和方法。</p>
<h1 id="隐藏内部属性"><a href="#隐藏内部属性" class="headerlink" title="隐藏内部属性"></a>隐藏内部属性</h1><p>私有属性，可以分成两种，一种是希望放到类内部而纯粹不想暴露给任何人的，可以叫做内部属性。一种是希望暴露到Private Header中，只限于引入该头文件的地方进行访问。</p>
<p>内部属性的声明非常简单，我们可以直接使用类扩展声明属性，而编译器会自动生成getter和setter，不需要任何额外工作。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person.m</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSObject</span> *internalObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h2 id="改变属性修饰符"><a href="#改变属性修饰符" class="headerlink" title="改变属性修饰符"></a>改变属性修饰符</h2><p>对于很多情况，我们需要对外暴露属性是readonly的，以防止使用者手动修改，但是内部流程的时候也需要这个属性，并且希望是readwrite的，这个在类扩展中直接可以重新声明已有的属性，并修改属性修饰符。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) <span class="built_in">NSNumber</span> *number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="comment">// Person.m</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readwrite</span>) <span class="built_in">NSNumber</span> *number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>注意，由于类扩展是可以在任何地方声明的（不限于.m实现文件），我们也可以把属性修饰符的修改，放到Private Header（可以用<code>+Private</code>后缀，也可以参考UIKit等框架起名为<code>UIKitInternal.h</code>）中，这样引入了Private Header的地方可以readwrite，没有引入的地方是readonly。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person+Private.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readwrite</span>) <span class="built_in">NSNumber</span> *number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h1 id="隐藏私有属性"><a href="#隐藏私有属性" class="headerlink" title="隐藏私有属性"></a>隐藏私有属性</h1><p>但是很多时候，我们希望一些属性是私有的，即类实现处和引入了Private Header的地方才可以访问。这种时候就需要采取别的方式了。常见的方法是通过类扩展（主要针对类的实现文件可见）或者使用关联对象（主要针对类的实现文件不可见，如其他第三方库的类）两种方式。</p>
<h2 id="类扩展（Class-Extension）"><a href="#类扩展（Class-Extension）" class="headerlink" title="类扩展（Class Extension）"></a>类扩展（Class Extension）</h2><h3 id="通常情形"><a href="#通常情形" class="headerlink" title="通常情形"></a>通常情形</h3><p>类扩展，不同于Category，最大的优势在于可以直接添加实例变量ivar到类的本身实现中，而Category是无法添加实例变量的。而在类扩展中声明的属性，也可以自动在编译期合成，同普通类声明属性的方式相同，不了解的参见：<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html">CustomizingExistingClasses</a>。因此，实际上类扩展非常适合隐藏私有属性。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person+Private.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *privateID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>


<h3 id="自定义存取方法"><a href="#自定义存取方法" class="headerlink" title="自定义存取方法"></a>自定义存取方法</h3><p>对于通常case来说，这是非常好的解决方法（不用任何额外代码）。但是有一个问题，如果你想<strong>自定义这个属性的存取方法</strong>（比如，实例变量的惰性初始化），那就会遇到问题。因为属性合成的ivar，是只在类本身实现中创建的，在Category中无法创建，而且类的实现只能实现一次（在原始的<code>Person.m</code>中实现）。试想一下这样子的情况，就会出现编译错误：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person+Private.m</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)privateID</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_privateID) &#123; <span class="comment">//Compile Error: undeclared identifier:_privateID</span></span><br><span class="line">        _privateID = <span class="string">@&quot;foo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> _privateID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第一种解决方案：</strong></p>
<p>最简单的方式，就是直接把自定义的存取方法写在类本身实现文件中，然后在Category中暴露头文件，并用<code>@dynamic</code>来标记这个属性（否则由于Category看不到编译器自动生成的getter和setter会报warning）。自定义存取方式就和普通的写法一模一样。这相当于是一种把内部属性暴露出来的方法。不过容易导致耦合（因为其实我们的私有属性目标是用于和外部类交互的，不希望放到Private Category以外）。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person.m</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *privateID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)privateID</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_privateID) &#123;</span><br><span class="line">        _privateID = <span class="string">@&quot;foo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> _privateID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person+Private.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *privateID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person+Private.m</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"><span class="keyword">@dynamic</span> privateID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p><strong>第二种解决方案：</strong></p>
<p>当然，聪明的你自然会想到，既然Category没法定义ivar，那直接在类扩展中声明一个ivar不就行了。于是你可以这样写，但是这会出现一个编译警告：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person+Private.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> () </span>&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *_privateID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *privateID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Person+Private.m</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Compile Warning: category override method from class</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)privateID</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_privateID) &#123;</span><br><span class="line">        _privateID = <span class="string">@&quot;foo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> _privateID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于在类扩展中已经定义了属性，那么这个类在编译期间会自动合成存取方法，而在Private Category中覆盖就会覆盖本身合成的方法（虽然我们确实需要这样），但由于可以在多处定义Category，并且方法覆盖的顺序不定，无法保证你的存取方法就是真实想要的，所以这是编译警告。对于这种需要自定义存取方法的私有属性的case，应该在类扩展中定义ivar，在Private Category中定义属性并实现。注意由于在类扩展定义了ivar，不会自动生成getter+setter，<strong>需要自行同时定义setter和getter</strong>，注意对不同属性修饰符，比如<code>copy</code>的话setter需要用<code>[-copy]</code>，<code>weak</code>的话ivar要标注<code>__weak</code>等。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person+Private.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> () </span>&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *_privateID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *privateID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Person+Private.m</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)privateID</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_privateID) &#123;</span><br><span class="line">        _privateID = <span class="string">@&quot;foo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> _privateID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setPrivateID:(<span class="built_in">NSString</span> *)privateID</span><br><span class="line">&#123;</span><br><span class="line">    _privateID = privateID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分类（Category）和关联对象"><a href="#分类（Category）和关联对象" class="headerlink" title="分类（Category）和关联对象"></a>分类（Category）和关联对象</h2><p>由于Objective-C的属性，其实就是ivar+getter方法+setter方法，我们可以在使用的地方通过Runtime来获取ivar。但是这种方式实际上来说是用的人非常少。第一个是复杂，第二个是不好使用一个通用的宏进行转换（因为ivar需要计算offset，根据不同类型的type encoding还不同……），而且对于这种需求来说优点大材小用了。因此我们一般都是使用关联对象（不了解的参见：<a href="http://nshipster.com/associated-objects/">Associated Object</a>）</p>
<p>使用了关联对象后，为了方便不必要繁琐地书写<code>objc_getAssociatedObject</code>、<code>objc_setAssociatedObject</code>，我们可以定义一些宏来方便使用。由于属性是包括了语义和引用计数相关内容的，因此针对不同的属性修饰符，需要采用不同的宏来保证属性的语义。</p>
<p>属性修饰符的语义，可以参考clang官网的说明：<a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#property-declarations">Objective-C Automatic Reference Counting</a>，如下：</p>
<blockquote>
<p><code>assign</code> implies <code>__unsafe_unretained</code> ownership.<br><code>copy</code> implies <code>__strong</code> ownership, as well as the usual behavior of copy semantics on the setter.<br><code>retain</code> implies <code>__strong</code> ownership.<br><code>strong</code> implies <code>__strong</code> ownership.<br><code>unsafe_unretained</code> implies <code>__unsafe_unretained</code> ownership.<br><code>weak</code> implies <code>__weak</code> ownership.</p>
</blockquote>
<p>由于属性修饰符只会影响setter，而不是getter，我们可以定义一个通用宏。对应的setter就需要单独根据情况编写。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __GET_PROPERTY(property) objc_getAssociatedObject(self, @selector(property));</span></span><br></pre></td></tr></table></figure>

<h3 id="strong-retain"><a href="#strong-retain" class="headerlink" title="strong(retain)"></a>strong(retain)</h3><p><code>strong</code>或者<code>retain</code>，就是所有对象的默认属性存取行为，隐含着对对象进行retain而使引用计数+1。这个可直接通过关联对象的行为设置。</p>
<p>宏：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SET_STRONG(property) objc_setAssociatedObject(self, @selector(property), property, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSNumber</span> *number;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)number</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __GET_PROPERTY(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setNumber:(<span class="built_in">NSNumber</span> *)number</span><br><span class="line">&#123;</span><br><span class="line">    __SET_STRONG(number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p><code>copy</code>属性修饰，表示在调用setter的时候，首先需要对对象进行<code>copy</code>操作，然后再表示<code>strong</code>，在Objective-C中其实就是发送了<code>copyWithZone:</code>消息。这个可直接通过关联对象的行为设置。</p>
<p>宏：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SET_COPY(property) objc_setAssociatedObject(self, @selector(property), property, OBJC_ASSOCIATION_COPY_NONATOMIC);</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __GET_PROPERTY(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    __SET_COPY(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="unsafe-unretained"><a href="#unsafe-unretained" class="headerlink" title="unsafe_unretained"></a>unsafe_unretained</h3><p><code>unsafe_unretained</code>和<code>assign</code>的语义是相同的，前者是ARC下加入的，而后者从MRC开始存在。一般来说，对于原始类型（<code>int</code>、<code>double</code>、<code>BOOL</code>、<code>NSInteger</code>)这些，由于本身就是copy by value，而且不存在对象和引用计数管理，因此属性声明用<code>assign</code>（很少见写<code>unsafe_unretained</code>，虽然允许）。</p>
<p>而对于对象而言，一般如果想表示不改变任何引用计数的弱引用，现在都用的是<code>weak</code>，因为<code>unsafe_unretained</code>不会像<code>weak</code>那样，在对象引用计数降到0被销毁后，自动置nil，而会保持指向的地址，因此可能随时都成为野指针而不安全。但是由于历史代码缘故，还有很少的代码库在用，姑且暂时保留。</p>
<p>这里我们定义一个宏，仅用于表示对象的<code>unsafe_unretained</code>和<code>assign</code>。这个可直接通过关联对象的行为设置。而对于原始类型的属性，参见下面的<code>assign</code></p>
<p>宏：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SET_UNSAFE_UNRETAINED(property) objc_setAssociatedObject(self, @selector(property), property, OBJC_ASSOCIATION_ASSIGN);</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">unsafe_unretained</span>) <span class="built_in">NSObject</span> *unsafeObject;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSObject</span> *)unsafeObject</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __GET_PROPERTY(unsafeObject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setUnsafeObject:(<span class="built_in">NSObject</span> *)unsafeObject</span><br><span class="line">&#123;</span><br><span class="line">    __SET_UNSAFE_UNRETAINED(unsafeObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><p>区别于上面针对对象的<code>unsafe_unretained </code>和<code>assign</code>语义，这里的<code>assign</code>特指对原始类型的属性修饰符。由于Runtime的Associated Object一定是一个Object，因此我们需要把原始类型进行装箱，封装为一个Object，在getter中拆箱，拿到真实的原始数据。这个过程由于我们一定是一个Object箱子，只装一个真实的原始数据，因此没有必要进行copy（箱子是唯一的，但是内容的原始数据来源是copy by value）。可以用<code>strong</code>来修饰。</p>
<p>对于不同的原始类型，装箱的方式不同，一般来说，对于数值类型（int、double、NSInteger），可以使用NSNumber来装箱。对于其他类型，比如结构体，可以使用NSValue来进行装箱（比如CGRect，NSRange, Pointer）。对于不同的装箱来说方式不同，因此不好在宏里面进行处理，直接接收一个装好箱的value就可以了。</p>
<p>宏：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SET_ASSIGN(property, value) objc_setAssociatedObject(self, @selector(property), value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span></span><br></pre></td></tr></table></figure>

<p>由于装箱方式不同，拆箱方式肯定不同。不过只要拿到箱子之后，自己根据类型来进行相应拆箱即可。</p>
<p>示例：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGRect</span> frame;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)age</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *value = __GET_PROPERTY(age);</span><br><span class="line">    <span class="keyword">return</span> value.intValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setAge:(<span class="keyword">int</span>)age</span><br><span class="line">&#123;</span><br><span class="line">    __SET_ASSIGN(age, @(age));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGRect</span>)frame</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSValue</span> *value = __GET_PROPERTY(frame);</span><br><span class="line">    <span class="keyword">return</span> value.CGRectValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithCGRect:frame];</span><br><span class="line">    __SET_ASSIGN(frame, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="weak"><a href="#weak" class="headerlink" title="weak"></a>weak</h3><p><code>weak</code>属性指的是一个弱引用，不改变对象的引用计数，同时和<code>assign</code>和<code>unsafe_unretained</code>的最大区别，在于有着自动置nil的安全性质。一旦weak对象被销毁，该引用不会成为一个野指针，而会被立即置为nil，保证了安全。对于如今的现代Objective-C，能表示弱引用全部使用weak，应当避免使用<code>assign</code>和<code>unsafe_unretained</code>表示一个弱引用（就算考虑上性能问题，weak立即置nil采用了一个全局的weak表，由Runtime管理，开销和手动release基本一致，不太可能成为性能问题）。</p>
<p>由于<code>weak</code>的特殊性（全局weak表），关联对象本身就没有提供weak的语义行为，但是我们可以来模拟一个等价的行为。</p>
<p><strong>第一种解决方案：</strong><br>我们使用一个WeakContainer，只包含一个weak的属性，来存放真实的weak引用对象。这样，通过关联对象把整个WeakContainer关联到Category的属性上，然后存取使用的时候进行装箱和拆箱，解决方案即可。不过唯一的缺点是由于需要引入一个WeakContainer类，无法做到Header Only。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WeakObjectContainer</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> object;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)containerWithObject:(<span class="keyword">id</span>)object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WeakObjectContainer</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)containerWithObject:(<span class="keyword">id</span>)object</span><br><span class="line">&#123;</span><br><span class="line">    WeakObjectContainer *container = [[WeakObjectContainer alloc] init];</span><br><span class="line">    container.object = object;</span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>宏：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;WeakObjectContainer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SET_WEAK(property) objc_setAssociatedObject(self, @selector(property), [WeakObjectContainer containerWithObject:property], OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __GET_WEAK(property) [objc_getAssociatedObject(self, @selector(property)) object];</span></span><br></pre></td></tr></table></figure>


<p><strong>第二种解决方案：</strong></p>
<p>为了做到Header only，我们需要借助一个匿名的block，首先定义一个weak引用指向属性值，然后block捕获它。这样子，只要把block关联到对象上，那么在getter的时候，通过直接执行block返回这个weak对象，就可以拿到真正的弱引用（实现时，block要用copy，而且要判空）。</p>
<p>宏：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SET_WEAK(property) id __weak __weak_object = property; \</span></span><br><span class="line"><span class="meta">  id (^__weak_block)() = ^&#123; return __weak_object; &#125;; \</span></span><br><span class="line"><span class="meta">  objc_setAssociatedObject(self, @selector(property), __weak_block, OBJC_ASSOCIATION_COPY);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __GET_WEAK(property) objc_getAssociatedObject(self, @selector(property)) ? ((id (^)())objc_getAssociatedObject(self, @selector(property)))() : nil;</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> delegate;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)delegate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __GET_WEAK(delegate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setDelegate:(<span class="keyword">id</span>)delegate</span><br><span class="line">&#123;</span><br><span class="line">    __SET_WEAK(delegate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义存取方法-1"><a href="#自定义存取方法-1" class="headerlink" title="自定义存取方法"></a>自定义存取方法</h3><p>自定义存取方法一般类的属性写法类似。比如说想要惰性初始化（即只有在第一次调用getter的时候，才会初始化属性）这里就不用<code>_name</code>来操作ivar，而是通过setter（当然也能用<code>__SET_* </code>宏来直接操作关联对象）就可以了。</p>
<p>示例：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *name = __GET_PROPERTY(name);</span><br><span class="line">    <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">        name = <span class="string">@&quot;foo&quot;</span>;</span><br><span class="line">        [<span class="keyword">self</span> setName:name];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    __SET_COPY(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="隐藏内部方法"><a href="#隐藏内部方法" class="headerlink" title="隐藏内部方法"></a>隐藏内部方法</h1><h2 id="类扩展实现类的内部方法"><a href="#类扩展实现类的内部方法" class="headerlink" title="类扩展实现类的内部方法"></a>类扩展实现类的内部方法</h2><p>Objective-C没有真正意义上的私有方法，毕竟是C语言的超集嘛。但是Objective-C提供了一个类扩展语法，允许定义方法的接口。因此，只要我们在.m实现文件中定义了一些内部方法，就可以对外隐藏（当然，class-dump selector这些是可以直接调用的）</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person.m</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> ()</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)internalMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)internalMethod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h1 id="隐藏私有方法"><a href="#隐藏私有方法" class="headerlink" title="隐藏私有方法"></a>隐藏私有方法</h1><h2 id="分类实现类的私有方法"><a href="#分类实现类的私有方法" class="headerlink" title="分类实现类的私有方法"></a>分类实现类的私有方法</h2><p>但一些情况下，我们需要很多库内部使用的类的私有方法（私有方法和内部方法虽然都不对外可见，但是其实目标不一样，私有方法一般是一些可以直接设置实例的状态，内部数据的危险方法，用于库内部的一些类之间，互相调用来使用。而内部方法一般放一些复杂流程处理，工具方法，是为了简化代码逻辑而使用的）这些方法需要和公开头文件的方法分开，保持对外隐藏。这时候就得用到Category。</p>
<p>我们可以把想要隐藏的私有方法，全部放到一个Private Category里面，库内部其他需要操作的地方，引用这个头文件即可。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person+Private.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)privateMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Person+Private.m</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)privateMethod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h2 id="暴露公开类的内部方法"><a href="#暴露公开类的内部方法" class="headerlink" title="暴露公开类的内部方法"></a>暴露公开类的内部方法</h2><p>对于公开类，我们有可能在实现中定义很多内部的方法，这些方法可能依赖一些上下文，或者是只在类扩展里面定义的属性（而不是在我们的Private分类里面）。当我们在库的其他地方，也想使用这些内部方法时，但是方法定义不在Private Header中（虽然实际上在类内部已经实现了）。我们需要一种方式来暴露类的内部方法。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person.m</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)publicMethod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    [<span class="keyword">self</span> internalMethod];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//我们想暴露这个方法给其他引用了Private Header的地方使用</span></span><br><span class="line">- (<span class="keyword">void</span>)internalMethod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第一种解决方案（错误示范）：</strong></p>
<p>使用一个Private Category，在头文件中暴露这个方法。但是由于是类本身而不是Category的方法，编译器会报找不到<code>internalMethod</code>的实现的warning（虽然它确实在本身的类中实现了）。我们是可以警告编译器，忽略warning，因为你知道实际上这个方法已经有了实现，只不过头文件没有暴露罢了。但是这种方法忽略警告，会忽略所有Private Category的方法检查，假如Person+Private.h中定义的方法真的没有在Person+Private.m中实现，也不会有任何警告，所以非常不推荐。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person+Private.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)internalMethod; <span class="comment">//在类本身实现中的内部方法，想要暴露出去</span></span><br><span class="line">- (<span class="keyword">void</span>)privateMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person+Private.m</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic ignored <span class="meta-string">&quot;-Wincomplete-implementation&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic pop</span></span><br></pre></td></tr></table></figure>

<p><strong>第二种解决方案：</strong></p>
<p>使用类拓展（而不是Private Category）来暴露一个内部方法，实际上这才是最佳的方式，因为类扩展并不局限于任何地方，而且可以在任何.h或者.m中进行声明。实际上，类扩展只有@interface而不能有@implementation，是方法的接口而不是实现，不会出现方法重定义或者覆盖的问题。这样，我们在类扩展中加入实际类的内部方法即可。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person+Private.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> ()</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)internalMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)privateMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person+Private.m</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span> (<span class="title">Private</span>)</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>因为类扩展在编译器检查时，是需要对类本身实现的方法进行检查的，因此假如Person类本身没有实现internalMethod，编译器会报warning，这也保证了正确性。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Objective-C毕竟已经几十年的语言了，语法层面上对抽象隐藏支持的就不好，不像Swift提供了四种访问控制关键字：<code>public</code>、<code>internal</code>、<code>fileprivate</code>、<code>private</code>，而且支持Module，再也不用担心命名和重定义问题了。不过Swift的现状，在Swift 4.0 ABI还不能稳定的情况下，代码库分发就只能使用源代码，这点对于很多开发者还有企业的影响确实比较大。不过了解Objective-C的实现也不是什么坏事，毕竟谁不定总会有需要写的的时候。希望这些代码库的接口与实现隐藏的方法，能够帮到一些平时没有接触过代码库开发的人吧。</p>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ol>
<li><a href="https://gist.github.com/dreampiggy/2f2da443874b329a2f5d12f546a7a0cf">完整Category属性宏</a></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>WatchKit渲染原理以及SwiftUI桥接</title>
    <url>/2019/12/10/WatchKit%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8ASwiftUI%E6%A1%A5%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="WatchKit渲染原理以及SwiftUI桥接"><a href="#WatchKit渲染原理以及SwiftUI桥接" class="headerlink" title="WatchKit渲染原理以及SwiftUI桥接"></a>WatchKit渲染原理以及SwiftUI桥接</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Apple Watch作为苹果智能穿戴设备领域的重头，自从第一代发布已经经历了6次换代产品，操作系统的迭代也已经更新到了watchOS 6。</p>
<p>不同于iPhone的App，watchOS上的大部分App都侧重于健康管理，并且UI交互以直观，快速为基准。在2015年WWDC上，苹果发布的watchOS的同时，面向开发者发布了WatchKit，以用于构建watchOS App。</p>
<p><img src="https://cdn.macrumors.com/article-new/2019/06/apple-watch-watchos-apps-home-screen.jpg" alt="watchkit-app.jpg"></p>
<p>这篇主要讲了关于WatchOS上的App的架构介绍，基本概念，并深入分析了WatchKit的UI渲染逻辑，也谈了一些WatchOS和SwiftUI相关的问题。</p>
<p>其实写这个文章的最主要的原因，是在于自己前段时间写库时候，在SwiftUI与watchOS的集成中，遇到了相当多的问题，迫使我对WatchKit进行了一些探索和逆向分析，这里共享出来，主要原因有多个：</p>
<ol>
<li>能够了解WatchKit的背后实现细节，回答诸如这种问题：“为什么WatchKit使用Interface Object的概念，而不能叫做View“</li>
<li>能够理解WatchKit的架构设计，作为库开发者提升自己的分层抽象，架构能力，甚至可以自己做一套类似WatchKit的实现（上层封装布局框架或者DSL）</li>
<li>了解到SwiftUI和WatchKit之间的坑点在于什么，在开发时候遇到奇怪问题能够进行分析归因</li>
<li>实在被逼无奈的时候，可以考虑利用渲染机制走UIKit（注意私有API风险）</li>
</ol>
<h2 id="WatchKit架构介绍"><a href="#WatchKit架构介绍" class="headerlink" title="WatchKit架构介绍"></a>WatchKit架构介绍</h2><p>一个标准WatchKit App，可以分为至少两个部分：</p>
<ul>
<li>Watch App Target：只有Storyboard和资源，用来提供静态的UI层级，你不允许动态构建View树（可以隐藏和恢复）</li>
<li>Watch Extension：管理所有逻辑代码，Interface Controller转场，更新UI</li>
</ul>
<p>如果没有接触过WatchKit，推荐参考这篇文章快速概览了解一下：<a href="https://nshipster.cn/watchkit/">NSHipster - Watch​Kit</a>。只需要知道，我们的核心的UI构造单元，是Interface Object和Interface Controller，类似于UIKit的View和ViewController。</p>
<p>Interface Controller用于管理页面展示元素的生命周期，而Interface Object是管理Storyboard上UI元素的单元，且只能触发更新，无法获取当前的UI状态（setter-only）。</p>
<p><img src="https://trymakedo.files.wordpress.com/2014/11/watch_app_lifecycle_simple_2x.png"></p>
<p>在watchOS 1时代，WatchKit采取的架构是WatchKit Extension代码，运行在iPhone设备上，于Apple Watch使用无线通信来更新UI，并且由于运行在iPhone上，可以直接访问到App的共享沙盒和UserDefaults。这受当时早期的Apple Watch硬件和定位导致的一种局限性。</p>
<p>在watchOS 2时代，为了解决1时候的更新UI延迟问题，WatchKit进行了改造，将Extension代码放到Apple Watch中执行，就在同样的进程当中，避免额外的传输。为了解决和iPhone的存储同步问题，与此同时推出了WatchConnectivity框架，可以与iPhone App进行通信。</p>
<p><img src="https://developer.apple.com/library/archive/documentation/General/Conceptual/AppleWatch2TransitionGuide/Art/architecture_compared_2x.png"></p>
<h2 id="WatchKit-UI布局原理"><a href="#WatchKit-UI布局原理" class="headerlink" title="WatchKit UI布局原理"></a>WatchKit UI布局原理</h2><p>WatchKit本身设计的是一个完整的客户端-服务端架构，在watchOS 1时代，由于我们的Extension进程在iPhone手机上，而App进程在Apple Watch上，因此通信方式必定是真正的网络传输，苹果采取了WiFi-Direct+私有协议，来传输对应的数据。</p>
<p>watchOS 1时代的App性能表现很糟糕，一旦iPhone和Apple Watch距离较远，整个watchOS App功能基本是无法使用，只能重新连接。</p>
<p>在watchOS 2上，苹果取巧的把Extension进程放到了Apple Watch本身，而上层已有的WatchKit代码不需要大幅改变。但是，Apple并没有因为这个架构改变，而提供真正的UIKit给开发者。类似的，一些贯穿于iOS/macOS/tvOS的基本框架，Apple依旧把它保留为私有，包括：</p>
<ul>
<li>CoreAnimation</li>
<li>Metal</li>
<li>OpenGL/ES</li>
<li>GLKit</li>
</ul>
<p>开发者在watchOS上，除了使用WatchKit以外，只能采取SceneKit或者SpriteKit这种高级游戏引擎，来开发你的watchOS App。</p>
<p>虽然苹果这样做，有很多具体的原因，比如说兼容代码，比如性能考量，甚至还有从技术层面上强迫统一UI风格等等。不过随着watchOS 6的发布，watchOS终于有真正的UI框架了。</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>WatchKit的客户端，指的是Apple Watch App自带的WatchKit Extension部分。</p>
<p>在watchOS 1上，客户端的进程位于iPhone当中，而不是和Apple Watch在一起。之间的传输需要走网络协议。在watchOS 2中，之间的传输依旧保持了一层抽象，但是实际上最终等价于同进程代码的调用。</p>
<p>由Storyboard创建的WKInterfaceObject，一定会有与之绑定的WKInterfaceController，这些Controller会保留一个viewControllerID，用于向服务端定位具体的UIKit ViewController（后面提到）</p>
<p>WKInterfaceObject的<strong>所有</strong>公开API相关属性设置，比如width height，alpha, image等，均会最终转发到一个<code>_sendValueChanged:forProperty:</code>方法上。Value是对应的对象（CGFloat会转换为NSNumber，部分属性会使用字典），Property是这些属性对应的名称（如width，height，image，text等）。</p>
<p>根据是否WatchKit 2，会做不同的处理。WatchKit 2会经过Main Queue Dispatch分发，而Watch 1采取的是自定义的一个通信协议，通过和iPhone直连的WiFi和私有协议传输。</p>
<p>简单来说，等价于如下伪代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WKInterfaceObject</span></span></span><br><span class="line">- (<span class="keyword">void</span>)setWidth:(<span class="built_in">CGFloat</span>)width &#123;</span><br><span class="line">  [<span class="keyword">self</span> _sendValueChanged:@(width) forProperty:<span class="string">@&quot;width&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)_sendValueChanged:(<span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)value forProperty:(<span class="built_in">NSString</span> *)property &#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *message = @&#123;</span><br><span class="line">      <span class="string">@&quot;viewController&quot;</span>: <span class="keyword">self</span>.viewControllerID,</span><br><span class="line">      <span class="string">@&quot;key&quot;</span>: <span class="string">&quot;wkInterfaceObject&quot;</span>,</span><br><span class="line">      <span class="string">@&quot;value&quot;</span>: value,</span><br><span class="line">      <span class="string">@&quot;property&quot;</span>: property,</span><br><span class="line">      <span class="string">@&quot;interfaceProperty&quot;</span>: <span class="keyword">self</span>.interfaceProperty</span><br><span class="line">    &#125;;</span><br><span class="line">    [[SPExtensionConnection remoteObjectProxy] sendMessage:message];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>这里的提到服务端，在watchOS 1时代其实就是Apple Watch上单独跑的进程，而在watchOS 2上，它和Extension都是在Apple Watch上，也实际上运行在同一个进程中。</p>
<p>对于每个watchOS App，它实际可以当作一个UIKit App。它的main函数入口是一个叫做WKExtensionMain的方法，里面做了一些Extension的初始化以后，就直接调用了<br>有UIApplicationMain。watchOS App有AppDelegate（类名为<a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/master/watchOS/Frameworks/WatchKit.framework/SPApplicationDelegate.h">SPApplicationDelegate</a>），会有一个全屏的root UIWindow当作key window。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2019/12/10/watchkit1.jpg" alt="watchkit1"></p>
<h4 id="UI初始化"><a href="#UI初始化" class="headerlink" title="UI初始化"></a>UI初始化</h4><p>在服务端启动后，它会加载Storyboard中的UI。对每一个客户端的Interface Controller，实际上服务端对应会创建一个View Controller，对应UIViewController的生命周期，会转发到客户端，触发对应的Interface Controller的willActivate/didAppear方法。</p>
<p>因此，watchOS创建了一个<a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/master/watchOS/Frameworks/WatchKit.framework/SPInterfaceViewController.h">SPInterfaceViewController</a>子类来统一做这个事情，它继承自<a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/master/watchOS/Frameworks/WatchKit.framework/SPViewController.h">SPViewController</a>，父类又继承自UIViewController，使用客户端传来的Interface Controller ID来绑定起来。</p>
<p>对于UI来说，每一种WKInterfaceObject，其实都会有一个原生的继承自UIView的类去做真正的渲染，比如：</p>
<ul>
<li>WKInterfaceButton: <a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/master/watchOS/Frameworks/WatchKit.framework/SPInterfaceButton.h">SPInterfaceButton</a>，继承自<code>UIControl</code></li>
<li>WKInterfaceImage: <a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/master/watchOS/Frameworks/WatchKit.framework/SPInterfaceImageView.h">SPInterfaceImageView</a>，继承自<code>UIImageView</code></li>
<li>WKInterfaceGroup: <a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/master/watchOS/Frameworks/WatchKit.framework/SPInterfaceGroupView.h">SPInterfaceGroupView</a>，继承自<code>UIImageView</code></li>
<li>WKInterfaceMap: <a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/master/watchOS/Frameworks/WatchKit.framework/SPInterfaceMapView.h">SPInterfaceMapView</a>，继承自<code>MKMapView</code></li>
<li>WKInterfaceSwitch: <a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/master/watchOS/Frameworks/WatchKit.framework/SPInterfaceSwitch.h">SPInterfaceSwitch</a>，继承自<code>UIControl</code></li>
<li>WKInterfaceTable: <a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/master/watchOS/Frameworks/WatchKit.framework/SPInterfaceListView.h">SPInterfaceListView</a>，继承自<code>UIView</code></li>
</ul>
<p>SPInterfaceViewController的主要功能，就是根据Storyboard提供的信息，构造出对应这些UIView的树结构，并且初始化对应的值渲染到UI上（比如说，Image有初始化的Name，Label有初始的Text）。实际上，这些具体的初始化值，都存储在Storyboard中，比如说，这里是一个简单的包含Table，每个TableRow是一个居中的Label，它对应的结构化数据如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    controllerClass = <span class="attr">&quot;InterfaceController&quot;</span>;</span><br><span class="line">    items =     (</span><br><span class="line">                &#123;</span><br><span class="line">            property = interfaceTable;</span><br><span class="line">            rows =             &#123;</span><br><span class="line">                default =                 &#123;</span><br><span class="line">                    color = EFF1FB24;</span><br><span class="line">                    controllerClass = <span class="attr">&quot;ElementRowController&quot;</span>;</span><br><span class="line">                    items =                     (</span><br><span class="line">                                                &#123;</span><br><span class="line">                            alignment = center;</span><br><span class="line">                            fontScale = 1;</span><br><span class="line">                            property = elementLabel;</span><br><span class="line">                            text = Label;</span><br><span class="line">                            type = label;</span><br><span class="line">                            verticalAlignment = center;</span><br><span class="line">                        &#125;</span><br><span class="line">                    );</span><br><span class="line">                    type = group;</span><br><span class="line">                    width = <span class="number">1</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">            type = table;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    title = Catalog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些信息会在运行时用于构建真正的View Tree。</p>
<p>值得注意的是，watchOS由于本身的UI，这些SPInterfaceViewController的rootView，一定是一个容器的View。比如说一般的多种控件平铺的Storyboard会自带<code>SPInterfaceGroupView</code>，一个可滚动的Storyboard会自带一个<code>SPCollectionView</code>，等等。这里是简单的伪代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SPInterfaceViewController</span></span></span><br><span class="line">- (<span class="keyword">void</span>)loadView &#123;</span><br><span class="line">  Class rootViewClass;</span><br><span class="line">  <span class="built_in">UIView</span> *rootView = [[rootViewClass alloc] initWithItemDescription:<span class="keyword">self</span>.rootItemDescription bundle:<span class="keyword">self</span>.bundle stringsFileName:<span class="keyword">self</span>.stringsFileName];</span><br><span class="line">  <span class="keyword">self</span>.view = rootView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h4 id="UI更新"><a href="#UI更新" class="headerlink" title="UI更新"></a>UI更新</h4><p>UI创建好以后，实际上我们的Extension代码会触发很多Interface object的刷新，比如说更新Label的文案，Image的图片等等，这些会从客户端触发消息，然后在服务端统一由AppDelegate接收到，来根据viewControllerID找到对应先前创建的SPInterfaceViewController。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SPApplicationDelegate</span> : <span class="title">NSObject</span> &lt;<span class="title">SPExtensionConnectionDelegate</span>, <span class="title">UIApplicationDelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SPApplicationDelegate</span></span></span><br><span class="line">- (<span class="keyword">void</span>)extensionConnection:(SPExtensionConnection *)connection interfaceViewController:(<span class="built_in">NSString</span> *)viewControllerID setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key property:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> ([key isEqualToString:<span class="string">@&quot;wkInterfaceObject&quot;</span>]) &#123;</span><br><span class="line">        SPInterfaceViewController *vc = [SPInterfaceViewController viewControllerForIdentifier:viewControllerID];</span><br><span class="line">        [vc setInterfaceValue:value forKey:key property:property];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>因此，拿到UIViewController以后，WatchKit会根据前面传来的interfaceProperty来定位，找到一个需要更新的View。然后向对应的UIView对象，发送对应的property和value，以更新UI。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SPInterfaceImageView</span> : <span class="title">UIImageView</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SPInterfaceImageView</span></span></span><br><span class="line">- (<span class="keyword">void</span>)setInterfaceItemValue:(<span class="keyword">id</span>)value property:(<span class="built_in">NSString</span> *)property &#123;</span><br><span class="line">    <span class="keyword">if</span> ([property isEqualToString:<span class="string">@&quot;width&quot;</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.width = value.doubleValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([property isEqualToString:<span class="string">@&quot;image&quot;</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.image = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>后续的流程，就完全交给UIKit和CALayer来进行渲染了。</p>
<h2 id="总结流程"><a href="#总结流程" class="headerlink" title="总结流程"></a>总结流程</h2><p><img src="http://dreampiggy-image.test.upcdn.net/2019/12/10/watchkit2.jpg" alt="watchkit2"></p>
<p>通过这张图，其实完整的流程，我们可以通过调用栈清晰看到，如图各个阶段：</p>
<ol>
<li>开发者调用WKInterfaceObject的UI方法</li>
<li>客户端的WKInterfaceObject统一封装发送消息</li>
<li>传输层传输消息（watchOS 1走网络，watchOS 2实际上就Dispatch到main queue）</li>
<li>服务端接收到消息，消息分发给对应的ViewController</li>
<li>ViewController分发消息给rootView（会递归处理）</li>
<li>View解码消息，得到对应的需要设置的UIKit属性和值</li>
<li>调用UIKit的UI更新方法</li>
</ol>
<p>可以看出来，其实WatchKit这边主要的工作就是抽象了一层Interface Object而不让开发者直接更新UIView。在watchOS 1时代这是一个非常好的设计，因为Extension进程在iPhone中，而App进程在Apple Watch上。但是到了watchOS 2以后，依然保留了这一套设计方案，实际上开发者能自定义的UI很有限。</p>
<h2 id="WatchKit与Long-Look-Notification"><a href="#WatchKit与Long-Look-Notification" class="headerlink" title="WatchKit与Long-Look Notification"></a>WatchKit与Long-Look Notification</h2><p>watchOS除了本身的App功能外，还有一些其他特性，比如这里提到的Long-Look Notification。这是在Apple Watch收到推送通知时候展示的页面，它实际上类似于iOS上的Notification Extension，可以进行自定义的UI。</p>
<p><img src="https://docs-assets.developer.apple.com/published/2d2f6b930c/52360133-b314-48c5-aa59-f2cb6c5e4e8f.png"></p>
<p>苹果这里面对Notification提供了3种类型，根据能不能动态更新UI/能不能响应用户点击可以分为：</p>
<ul>
<li>Static Notification（固定UI，点击后关闭）</li>
<li>Dynamic Notification（可以更新UI，点击后关闭）</li>
<li>Dynamic Interactive Notification（可以更新UI，可以响应交互，不默认关闭）</li>
</ul>
<p>和普通的WatchKit UI一样，Notification依然使用Storyboard构建。并且有单独的Storyboard Entry Point。在代码里面通过WKUserNotificationInterfaceController的方法<code>didReceive(_:)</code>，来处理接收到通知后的UI刷新，存储同步等等逻辑。</p>
<p><img src="https://docs-assets.developer.apple.com/published/0599a724ac/8487cfa2-b872-481d-b0ae-409d1aaea6d1.png"></p>
<p>如图所示，整体的生命周期比较简单，可以参考苹果的文档即可：<a href="https://developer.apple.com/documentation/watchkit/enhancing_your_watchos_app_with_notifications/customizing_your_long-look_interface">Customizing Your Long-Look Interface</a></p>
<h3 id="Long-Look-Notification原理"><a href="#Long-Look-Notification原理" class="headerlink" title="Long-Look Notification原理"></a>Long-Look Notification原理</h3><p>按照之前说的，WatchOS的Native App中，使用了SPApplicationDelegate作为它的AppDelegate，也直接实现了UNUserNotificationCenterDelegate相关方法。</p>
<p>当有推送通知出现时，如果watchOS App正处于前台，会触发一系列UserNotification的通知。类似于UIKit的逻辑，就不再赘述。</p>
<p>如果watchOS App未启动，那么会被后台启动（且不触发UserNotification的通知），对应Storyboard中的WKUserNotificationInterfaceController实例会被初始化。加载完成UI后，会调用<code>willActivate()</code>方法并自动弹起。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2019/12/10/watchkit4.jpg" alt="watchkit4"></p>
<p>其实可以看出来，WatchKit主要做的事情，是在于watchOS App未启动时，需要对用户提供的WKUserNotificationInterfaceController，桥接对应的UserNotification接口和生命周期。</p>
<ol>
<li>当SPApplicationDelegate的<code>userNotificationCenter:willPresentNotification:withCompletionHandler:</code>被调用，它会向客户端发送消息，触发WKUserNotificationInterfaceController的<code>didReceive(_:)</code>方法</li>
<li>当用户点击了Notification上面的按钮时，SPApplicationDelegate的<code>userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:</code>被调用，如果App不支持dynamic interactive notification，它会直接关闭通知，并唤起watchOS App到前台</li>
<li>如果支持dynamic interactive notification(watchOS 5/iOS 12)，那么用户点击的Button/Slider之类，会调用WKUserNotificationInterfaceController上绑定的Target-Action，开发者需要手动在交互完毕后调用<code>performNotificationDefaultAction</code>，<code>performDismissAction</code>关闭通知（系统不再自动关闭通知），另外，系统给通知的最下方提供了一个默认的Dismiss按钮，点击后会强制关闭。</li>
</ol>
<p>个人见解：之所以watchOS非要封装一层，主要原因是watchOS 1时代，不支持自定义通知；在watchOS 2时代，UserNotification这个框架还不存在，UIKit和AppKit都各自有一套接收Notification的实现，而WatchKit也照猫画虎搞了一套（当时就用的UILocalNotification）。UserNotification这个跨平台的通知库，是伴随着watchOS 3才出现的，但是已经晚了，因此WatchKit继续在已有的这个WKUserNotificationInterfaceController上新增功能。</p>
<p>其实可以看到，WKUserNotificationInterfaceController实际上提供的接口，基本完全等价于UserNotifications + UserNotificationsUI，方法名类似，有兴趣的话自行参考官方文档对比一下<a href="https://developer.apple.com/documentation/watchkit/enhancing_your_watchos_app_with_notifications">watchOS Custom Notification Tutorial</a> 和 <a href="https://developer.apple.com/documentation/usernotificationsui/customizing_the_appearance_of_notifications">iOS Custom Notification Tutorial</a></p>
<h2 id="WatchKit和SwiftUI"><a href="#WatchKit和SwiftUI" class="headerlink" title="WatchKit和SwiftUI"></a>WatchKit和SwiftUI</h2><p>在WWDC 2019上，苹果发布了新的全平台UI框架，SwiftUI。SwiftUI是一个声明式的UI框架，大量使用了Swift语法特性和API接口设计，提倡Single Source of Truth而不是UIKit一直以来的View State Mutation。</p>
<p>为什么专门要讲SwiftUI，因为实际上，SwiftUI才是Apple Watch上真正的完整UI框架，而WatchKit由于设计上的问题，无法实现<strong>Owning Every Pixel</strong>这一点，在我心中它的定位更类似于TVML的级别。</p>
<p><img src="https://developer.apple.com/assets/elements/icons/swiftui/swiftui-96x96_2x.png" alt="swiftui"></p>
<p>关于SwiftUI在watchOS上的快速上手，没有什么比Apple官方文档要直观的了，有兴趣参考：<a href="https://developer.apple.com/tutorials/swiftui/creating-a-watchos-app">SwiftUI Tutorials - Creating a watchOS App</a></p>
<p>这里不会专门介绍SwiftUI的基础知识，后续我可能也会写一篇SwiftUI原理性介绍的文章。但是这篇文章，主要侧重一些SwiftUI在watchOS的独有特性和注意点，以及一些自己发现的坑。</p>
<h3 id="SwiftUI与WatchKit桥接"><a href="#SwiftUI与WatchKit桥接" class="headerlink" title="SwiftUI与WatchKit桥接"></a>SwiftUI与WatchKit桥接</h3><p>SwiftUI，允许桥接目前已有的WatchKit的Interface Object，就如在iOS上允许桥接UIKit一样。但是它能做的事情和概念其实完全不一样。</p>
<p>在iOS上，你能通过代码/Storyboard来构建你自己的UIView子类，并且你能构造自己的ViewController管理生命周期事件。这些都能通过SwiftUI的<a href="https://developer.apple.com/documentation/swiftui/uiviewrepresentable">UIViewRepresentable</a>来桥接而来。与此同时，你还可以在你的UIKit代码中，来引入SwiftUI的View。你可以使用UIHostingController当作Child VC，甚至是对应的UIView（<code>UIHostingController.view</code>是一个私有类<code>_UIHostingView</code>，继承自UIView），是一种双向的桥接。</p>
<p>但是，正如之前提到，WatchKit设计是严重Storyboard Based，你不允许继承Interface Object。你不能使用SwiftUI来引入Storyboard自己构建好的Interface Object/Controller层级。不过相反的是，你可以使用WKHostingController，在Storyboard中去present或者push一个新的SwiftUI页面，实际是一种单向的桥接。</p>
<p>SwiftUI提供的<a href="https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentable">WKInterfaceObjectRepresentable</a>，实际上它只允许你去绑定一些已有的系统UI到SwiftUI中（因为SwiftUI目前还不支持这些控件，比如InlineMovie，MapKit，不排除以后有原生实现）。这些对应的WatchKit Interface Object，在watchOS 6上面都加入了对应的init初始化方法，允许你代码中动态创建，这里是全部的列表：</p>
<ul>
<li>WKInterfaceActivityRing</li>
<li>WKInterfaceHMCamera</li>
<li>WKInterfaceInlineMovie</li>
<li>WKInterfaceMap</li>
<li>WKInterfaceMovie</li>
<li>WKInterfaceSCNScene</li>
<li>WKInterfaceSKScene</li>
</ul>
<p>桥接了Interface Object的View可以像普通的SwiftUI View一样使用，常见的SwiftUI的modifier（比如<code>.frame</code>, <code>.background</code>）也可以正常work。但是有一些系统UI有着自己提供的最小布局（比如MapKit），超过这个限制会导致渲染异常，建议采取scaleTransform处理。另外，请不要同时调用Interface Object的setWidth等概念等价的布局方法，这会导致更多的问题。</p>
<h3 id="桥接原理"><a href="#桥接原理" class="headerlink" title="桥接原理"></a>桥接原理</h3><p>上文提到的所有可动态创建的Interface Object，根据我们之前的探索，它现在是没有绑定任何viewControllerID的，具体SwiftUI是怎么做的呢？</p>
<p>答案是，SwiftUI会对这些init创建的interfaceObject，手动通过UUID构造一个单独的新字符串，然后用这个UUID，创建一个新ViewController到WatchKit App中，插入到对应HostingController的视图栈里面。</p>
<p>它的初始化UI状态，通过一个单独的属性拿到（由每个子类实现，比如MapView，默认的经纬度是0,0）。整体伪代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WKInterfaceMap</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *UUID = [<span class="built_in">NSUUID</span> UUID].UUIDString;</span><br><span class="line">    <span class="built_in">NSString</span> *property = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@_%@&quot;</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], UUID];</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> _initForDynamicCreationWithInterfaceProperty:property];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSDictionary</span> *)interfaceDescriptionForDynamicCreation &#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;</span><br><span class="line">        <span class="string">@&quot;type&quot;</span> : <span class="string">@&quot;map&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;property&quot;</span> : <span class="keyword">self</span>.interfaceProperty,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>


<p>另外，这种使用init注册的WKInterfaceObject，会保留一个对应UIView的weak引用，可以在运行时通过私有的<code>_interfaceView</code>拿到。SwiftUI内部在布局的时候也用到了这个Native UIView来实现。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2019/12/10/watchkit-swiftui2.png" alt="watchkit-swiftui2"></p>
<h3 id="SwiftUI与watchOS-Native-App"><a href="#SwiftUI与watchOS-Native-App" class="headerlink" title="SwiftUI与watchOS Native App"></a>SwiftUI与watchOS Native App</h3><p>通过从Native watchOS App的布局分析上来看，SwiftUI参考iOS上的方案，依旧是用了一个单独的UIHostingView来插入到Native App的视图层级中，也有对应的UIHostingController。</p>
<p>但是不同于iOS的是，SwiftUI会对每一个Push/Present出来的新View（与是否用了上面提到的WKInterfaceObjectRepresentable无关，这样设计的原因见下），额外套了一个叫做<a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/master/watchOS/Frameworks/WatchKit.framework/SPHostingViewController.h">SPHostingViewController</a>的类，它继承自上文提到的SPViewController。</p>
<p>每个UIHostingController套在了SPHostingViewController的Child VC中，对应View通过约束定成一样的frame，可以看作是一个容器的关系。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2019/12/10/watchkit3.jpg" alt="watchkit3"></p>
<p>当你的SwiftUI View，含有至少一个WatchKit Interface Object之后，这个SPHostingViewController就起到了很大作用。它需要调度和处理上文提到的WatchKit消息。SPHostingViewController内部存储了所有interface的property，Native UIView列表，通过遍历来进行分发，走普通的WatchKit流程。它相当于起到一个转发代理的作用，让这些WatchKit的Interface Object实现不需要修改代码能正常使用。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2019/12/10/watchkit-swiftui1.jpeg" alt="watchkit-swiftui1"></p>
<h3 id="SwiftUI与Long-Look-Notification"><a href="#SwiftUI与Long-Look-Notification" class="headerlink" title="SwiftUI与Long-Look Notification"></a>SwiftUI与Long-Look Notification</h3><p>到这里其实事情还算简单，但是还有一种更为复杂的情形。SwiftUI支持创建自定义的watchOS Long-Look UI。它提供了一个对应的WKUserNotificationHostingController（继承自WKUserNotificationInterfaceController），就像WatchOS App一样。</p>
<p>但是，试想一下：既然SwiftUI支持桥接系统Interface Object，如果我在这里的HostingView中，再放一个WatchKit Interface Object，会怎么样呢？答案依然是支持。</p>
<p>SPHostingViewController这个类兼容了这种极端Case，它转发所有收到的Remote/Local Notification，承担了原本WatchKit的WKUserNotificationInterfaceController的一部分责任（因为继承链的关系，它不是WKUserNotificationInterfaceController子类，但是实现了类似的功能）。因此实际上，SPHostingViewController内部除了上面提到的property, Native UIView列表外，还存储了对应Notification Action的列表，用于转发用户点击在通知上的动作来刷新UI。</p>
<h2 id="Independent-watchOS-App"><a href="#Independent-watchOS-App" class="headerlink" title="Independent watchOS App"></a>Independent watchOS App</h2><p>在历史上，所有的watchOS App，都必须Bundle在一个iOS App中，换句话说，就算你的watchOS App是一个简单的计算器，不需要任何iPhone的联动和同步功能，你也必须创建一个能够在iOS上的App Store审核通过的App。因此制作一个watchOS App的前提变得更复杂，它需要一个iOS App。而且以这里的计算器来说，你不可以直接套一个简单空壳的iOS App，引导用户只使用Apple Watch，因为iOS App Store的审核将不会通过。这也是造成watchOS App匮乏的一个问题。</p>
<p>从watchOS 6之后，由于上述的一系列开发工具上和模式上的改动，苹果听取了开发者的意见，能够允许你创造一个独立的watchOS App，它不再不需要任何iOS App，直接从Apple Watch上安装，下载，运行。watchOS App也不再必须和iOS App有所关联。</p>
<h3 id="开发配置"><a href="#开发配置" class="headerlink" title="开发配置"></a>开发配置</h3><p>将一个已有的非独立watchOS App转变为独立App比较简单，你只需要在Xcode中选中的watchOS Extension Target，勾选<code>Supports Running Without iOS App Installation</code>即可。</p>
<p>注意，独立watchOS App目前并不意味着你不能使用WatchConnectivity来同步iPhone的数据。你依然可以在你的Extension Target中声明你对应的iOS App的Bundle ID。</p>
<p>注意，如果用户没有下载这个watchOS App对应的iOS App，那么WatchConnectivity的<code>WCSession.companionAppInstalled</code>的方法会直接返回NO，就算强制调用<code>sendMessage:</code>，也会返回不可用的Error，在代码里面需要对此提前判断。</p>
<h3 id="App-Slicing"><a href="#App-Slicing" class="headerlink" title="App Slicing"></a>App Slicing</h3><p>独立watchOS App会利用App Slicing，而非独立App不会。Apple Watch从Series 4开始采取了64位的CPU，而与此同时，由于用户的iPhone的CPU架构和Apple Watch的CPU架构是无关的（你可以在iPhone 11上配对一个Apple Watch Series 3，对吧），而watchOS App又是捆绑在ipa中的，这就导致你的ipa包中，始终会含有两份watchOS的二进制（armv7k arm64_32），用户下载完成后，在同步手表时只会用到一份，并且原始ipa中依旧会保留这份二进制。这是一种带宽和存储浪费。</p>
<p>对于独立watchOS App，可以直接从watchOS App Store下载，那么将只下载Slicing之后的部分，节省近一半的带宽/存储。值得注意的是，就算是独立watchOS App，依然可以从iPhone手机上操作，来直接安装到Apple Watch中，因为在Apple Watch小屏幕上的App Store搜索文本和语音输入的体验并不是很好。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面完整的原理分析，可以看到，WatchKit这一个UI框架，通过一种客户端/服务端的方案，由于抽象了连接，即使watchOS 1到watchOS 2产生了如此大的架构变化，对上层的API基本保持了相对不变。这一点对于库开发者值得参考，通过良好的架构设计能够平滑迁移。</p>
<p>不过实际从各个社交渠道的反馈，开发者对于WatchKit的态度并不是那么乐观，由于隐藏了所有真正能够操作屏幕像素的方案（无法使用Metal这种底层接口，也没有UIKit这种上层接口），导致WatchOS App的生态环境实际上并不是那么理想，很多App都是非常简单和玩具级别的项目。虽然这是可以归因于Apple Watch本身硬件性能的限制，但是和WatchKit提供的接口也脱离不了关系。</p>
<p>如果让我来重新设计WatchKit，可能在watchOS 2时代，就会彻底Deprecate目前的WatchKit，而是取而代之采取公开精简的UIKit实现来让开发者最大化利用硬件（类似于目前的UIKit在tvOS上的现状），同时，提供一个新的WatchUIKit来提供所有专为Apple Watch设计的UI和功能，比如Digital Crown，比如Activity Ring。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2019/12/10/watchkit-twitter.jpg" alt="watchkit-twitte"></p>
<p>SwiftUI为watchOS App提供了一个新的出路，它可以说是真正的能够发挥开发者能力来实现精致的App，而不再受限于系统提供的基本控件。而WatchKit，也已经完成了它的使命。相信之后的SwiftUI Native App将会为watchOS创造一片新的生态，Apple Watch也能真正摆脱“iPhone外设”这一个尴尬的局面。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/WatchKitProgrammingGuide/index.html">App Programming Guide for watchOS</a></li>
<li><a href="https://developer.apple.com/library/archive/samplecode/WKInterfaceCatalog/Introduction/Intro.html">WatchKit Catalog Example</a></li>
<li><a href="https://nshipster.com/watchkit/">NSHipster - WatchKit</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/219/">WWDC - SwiftUI on watchOS</a></li>
<li><a href="https://developer.apple.com/tutorials/swiftui/creating-a-watchos-app">SwiftUI Tutorials - Creating a watchOS App</a></li>
<li><a href="http://developer.limneos.net/">iOS Runtime Headers</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>watchOS</tag>
        <tag>SwiftUI</tag>
        <tag>WatchKit</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS平台图片编解码入门教程（Image/IO篇）</title>
    <url>/2017/10/30/iOS%E5%B9%B3%E5%8F%B0%E5%9B%BE%E7%89%87%E7%BC%96%E8%A7%A3%E7%A0%81%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%88Image:IO%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>这篇教程是系列教程的第一篇，主要是面向于没有怎么接触过iOS平台上图像编解码的人的，不会涉及到多媒体处理中的数字信号处理、图像编码的深入知识。这是系列最简单的一篇，之后会有关于第三方编解码，以及vImage的另两篇教程。</p>
</blockquote>
<h1 id="Image-IO"><a href="#Image-IO" class="headerlink" title="Image/IO"></a>Image/IO</h1><p>Image/IO是Apple提供的一套用于图片编码解码的系统库，对外是一层非常直观易用的C的接口。上层的UIKit，Core Image，还有Core Graphics中的CGImage处理，都是依赖Image/IO库的。因此，掌握Image/IO的基本编解码操作，对一些图像相关的数据处理是非常必要的。这篇教程就主要从简单的用法，说明Image/IO的用法，完整的文档，可以参考<a href="https://developer.apple.com/documentation/imageio">Apple Image/IO</a></p>
<h1 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h1><p>解码，指的是讲已经编码过的图像封装格式的数据，转换为可以进行渲染的图像数据。具体来说，iOS平台上就指的是将一个输入的二进制Data，转换为上层UI组件渲染所用的UIImage对象。</p>
<p>Image/IO的解码，支持了常见的图像格式，包括PNG（包括APNG）、JPEG、GIF、BMP、TIFF（具体的，可以通过<code>CGImageSourceCopyTypeIdentifiers</code>来打印出来，不同平台不完全一致）。在iOS 11之后另外支持了HEIC（即使用了HEVC编码的HEIF格式）。</p>
<p>对于解码操作，我们可以分为静态图（比如JPEG，PNG）和动态图（比如GIF，APNG）的两种，分别进行说明一下解码的过程。</p>
<h2 id="静态图"><a href="#静态图" class="headerlink" title="静态图"></a>静态图</h2><p>静态图的解码，基本可以分为以下步骤：</p>
<ol>
<li>创建CGImageSource</li>
<li>读取图像格式元数据（可选）</li>
<li>解码得到CGImage</li>
<li>生成上层的UIImage，清理</li>
</ol>
<h3 id="1-创建ImageSource"><a href="#1-创建ImageSource" class="headerlink" title="1. 创建ImageSource"></a>1. 创建ImageSource</h3><p>CGImageSouce，表示的是一个待解码数据的输入。之后的一系列操作（读取元数据，解码）都需要到这个Source，与解码流程一一对应。</p>
<p>CGImageSource可以通过不同的几个接口构造（这里先忽略渐进式解码的接口）：</p>
<ul>
<li><code>CGImageSourceCreateWithData</code>： 从一个内存中的二进制数据（CGData）中创建ImageSource，相对来说最为常用的一个</li>
<li><code>CGImageSourceCreateWithURL</code>： 从一个URL（支持网络图的HTTP URL，或者是文件系统的fileURL）创建ImageSource，</li>
<li><code>CGImageSourceCreateWithDataProvider</code>：从一个DataProvide中创建ImageSource，DataProvider提供了很多种输入，包括内存，文件，网络，流等。很多CG的接口会用到这个来避免多个额外的接口。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageSourceRef</span> source = <span class="built_in">CGImageSourceCreateWithData</span>((__bridge <span class="built_in">CFDataRef</span>)data, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (!source) &#123; <span class="comment">// 一般这时候都是输入图像数据的格式不支持</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-读取图像格式元数据"><a href="#2-读取图像格式元数据" class="headerlink" title="2. 读取图像格式元数据"></a>2. 读取图像格式元数据</h3><p>创建好CGImageSource之后，我们是可以立即解码。但是很多情况下，我们需要获取一些相关的图像信息，包括图像的格式，图像数量，<a href="https://en.wikipedia.org/wiki/Exif">EXIF元数据</a>等。在真正解码之前，我们可以拿到这些数据，进行一些处理，之后再开始解码过程。</p>
<p>其中，这些信息可以直接在CGImageSource上获取：</p>
<ul>
<li>图像格式：<code>CGImageSourceGetType</code></li>
<li>图像数量（动图）：<code>CGImageSourceGetCount</code></li>
</ul>
<p>其他的，需要通过获取属性列表来查询。对于图像容器的属性（EXIF等），我们需要使用<code>CGImageSourceCopyProperties</code>即可，然后根据不同的Key去获取对应的信息。</p>
<p>其实苹果还有一套<code>CGImageSourceCopyMetadataAtIndex</code>，对应的数据不是字典，而是一个<code>CGImageMetadata</code>，再通过其他方法去取。这套API使用起来也是可以的，读取数据和前者是完全兼容一致的，优点是能够进行自定义扩展（比如说你有非标准的图像信息想自己添加和删除）。一般来说使用前者就足够了。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageSourceRef</span> source;</span><br><span class="line"><span class="built_in">NSDictionary</span> *properties = (__bridge <span class="built_in">NSDictionary</span> *)<span class="built_in">CGImageSourceCopyProperties</span>(source, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">NSUInteger</span> fileSize = [properties[kCGImagePropertyFileSize] unsignedIntegerValue]; <span class="comment">// 没什么用的文件大小</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *exifProperties = properties[(__bridge <span class="built_in">NSString</span> *)kCGImagePropertyExifDictionary]; <span class="comment">// EXIF信息</span></span><br><span class="line"><span class="built_in">NSString</span> *exifCreateTime = exirProperties[(__bridge <span class="built_in">NSString</span> *)kCGImagePropertyExifDateTimeOriginal]; <span class="comment">// EXIF拍摄时间</span></span><br></pre></td></tr></table></figure>

<p>当然，前面这个指的是图像容器的属性，而真正的获取图像的元信息，需要使用<code>CGImageSourceCopyPropertiesAtIndex</code>，对于静态图来说，index始终传0即可。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *imageProperties = (__bridge <span class="built_in">NSDictionary</span> *) <span class="built_in">CGImageSourceCopyPropertiesAtIndex</span>(source, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">NSUInteger</span> width = [imageProperties[(__bridge <span class="built_in">NSString</span> *)kCGImagePropertyPixelWidth] unsignedIntegerValue]; <span class="comment">//宽度，像素值</span></span><br><span class="line"><span class="built_in">NSUInteger</span> height = [imageProperties[(__bridge <span class="built_in">NSString</span> *)kCGImagePropertyPixelHeight] unsignedIntegerValue]; <span class="comment">//高度，像素值</span></span><br><span class="line"><span class="built_in">BOOL</span> hasAlpha = [imageProperties[(__bridge <span class="built_in">NSString</span> *)kCGImagePropertyHasAlpha] boolValue]; <span class="comment">//是否含有Alpha通道</span></span><br><span class="line"><span class="built_in">CGImagePropertyOrientation</span> exifOrientation = [imageProperties[(__bridge <span class="built_in">NSString</span> *)kCGImagePropertyOrientation] integerValue]; <span class="comment">// 这里也能直接拿到EXIF方向信息，和前面的一样。如果是iOS 7，就用NSInteger取吧 :)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-解码得到CGImage"><a href="#3-解码得到CGImage" class="headerlink" title="3. 解码得到CGImage"></a>3. 解码得到CGImage</h3><p>通过Image/IO解码到CGImage确实非常简单，整个解码只需要一个方法<code>CGImageSourceCreateImageAtIndex</code>。对于静态图来说，index始终是0，调用之后会立即开始解码，直到解码完成。</p>
<p>值得注意的是，Image/IO所有的方法都是线程安全的，而且基本上也都是同步的，因此确保大图像文件的解码最好不要放到主线程。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageRef</span> imageRef = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(source, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-生成上层的UIImage，清理"><a href="#4-生成上层的UIImage，清理" class="headerlink" title="4. 生成上层的UIImage，清理"></a>4. 生成上层的UIImage，清理</h3><p>解码得到CGImage后，就基本完成了，我们可以直接构造对应的UIImage用于UI组件渲染。其中UIImage的orientation，可以通过之前的EXIF元信息获得（注意，需要转换EXIF的方向，到UIImageOrientation的方向）。然后就完成了，比较简单。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UIImageOrientation和CGImagePropertyOrientation枚举定义顺序不同，封装一个方法搞一个switch case就行</span></span><br><span class="line"><span class="built_in">UIImageOrientation</span> imageOrientation = [<span class="keyword">self</span> imageOrientationFromExifOrientation:exifOrientation];</span><br><span class="line"><span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> imageWithCGImage:imageRef scale:[<span class="built_in">UIScreen</span> mainScreen].scale orientation:imageOrientation];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清理，都是C指针，避免内存泄漏</span></span><br><span class="line"><span class="built_in">CGImageRelease</span>(imageRef);</span><br><span class="line"><span class="built_in">CFRelease</span>(source)</span><br></pre></td></tr></table></figure>

<h2 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h2><p>前面的情况，主要介绍了是静态图（也就是说，取的index都是0的情况 ）。对于动态图来说，我们可以通过<code>CGImageSourceGetCount</code>来获取动图的帧数，之后就比较简单了，通过循环遍历每一帧，重复2-4步骤生成对应的UIImage，最后通过UIImage自带的<code>animatedImageWithImages:duration:</code>来生成一张动图即可。但是关于这里有坑，在下面说明。</p>
<p>步骤：</p>
<ol>
<li>静态图的步骤1</li>
<li>遍历所有图像帧，重复静态图的步骤2-4</li>
<li>生成动图UIImage</li>
</ol>
<h3 id="1-生成动图UIImage"><a href="#1-生成动图UIImage" class="headerlink" title="1. 生成动图UIImage"></a>1. 生成动图UIImage</h3><p>由于遍历很简单，就不重复了，这里我们以一个GIF为例，简单说明一下解码过程，直观易懂。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSUInteger</span> frameCount = <span class="built_in">CGImageSourceGetCount</span>(source); <span class="comment">//帧数</span></span><br><span class="line"><span class="built_in">NSMutableArray</span> &lt;<span class="built_in">UIImage</span> *&gt; *images = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"><span class="keyword">double</span> totalDuration = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; frameCount; i++) &#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *frameProperties = (__bridge <span class="built_in">NSDictionary</span> *) <span class="built_in">CGImageSourceCopyPropertiesAtIndex</span>(source, i, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">NSDictionary</span> *gifProperties = frameProperties[(<span class="built_in">NSString</span> *)kCGImagePropertyGIFDictionary]; <span class="comment">// GIF属性字典</span></span><br><span class="line">    <span class="keyword">double</span> duration = [gifProperties[(<span class="built_in">NSString</span> *)kCGImagePropertyGIFUnclampedDelayTime] doubleValue]; <span class="comment">// GIF原始的帧持续时长，秒数</span></span><br><span class="line">    <span class="built_in">CGImagePropertyOrientation</span> exifOrientation = [frameProperties[(__bridge <span class="built_in">NSString</span> *)kCGImagePropertyOrientation] integerValue]; <span class="comment">// 方向</span></span><br><span class="line">    <span class="built_in">CGImageRef</span> imageRef = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(source, i, <span class="literal">NULL</span>); <span class="comment">// CGImage</span></span><br><span class="line">    <span class="built_in">UIImageOrientation</span> imageOrientation = [<span class="keyword">self</span> imageOrientationFromExifOrientation:exifOrientation];</span><br><span class="line">    <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> imageWithCGImage:imageRef scale:[<span class="built_in">UIScreen</span> mainScreen].scale orientation:imageOrientation];</span><br><span class="line">    totalDuration += duration;</span><br><span class="line">    [images addObject:image];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后生成动图</span></span><br><span class="line"><span class="built_in">UIImage</span> *animatedImage = [<span class="built_in">UIImage</span> animatedImageWithImages:images duration:totalDuration];</span><br></pre></td></tr></table></figure>

<p>这样处理的话，大部分情况下基本是可以接受的。但是这里有一个坑：UIImage这个animatedImages的接口，只会根据你传入的images的数量，平均分配传入的totalDuration的展示时长。但是大部分动图格式（GIF，APNG，WebP等等），都是不同帧不同时长的，这就会导致最后看到的动图每帧时长乱掉。</p>
<p>对于这个的解决方式也有。简单来说，就是通过对特定图像帧重复特定次数，以填充满整个应该播放的时长。其实实现也比较简单，我们可以对所有帧的时长，求一个最大公约数<code>gcd</code>，这样的话，只需要每帧重复播放<code>duration / gcd</code>次数，最终的总时长各帧<code>repeat * duraion</code>的和，就可以实现这个了，有兴趣可以看看我参与维护的<a href="https://github.com/rs/SDWebImage/blob/4.1.2/SDWebImage/UIImage%2BWebP.m#L281=L294">SDWebImage的代码</a>。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSUInteger</span> durations[frameCount];</span><br><span class="line"><span class="built_in">NSUInteger</span> <span class="keyword">const</span> gcd = gcdArray(frameCount, durations);</span><br><span class="line"><span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; frameCount; i++) &#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> duration = durations[i];</span><br><span class="line">    <span class="built_in">NSUInteger</span> repeatCount = duration / gcd;</span><br><span class="line">    <span class="keyword">for</span> (size_t j = <span class="number">0</span>; j &lt; repeatCount; j++) &#123;</span><br><span class="line">        [animatedImages addObject:image];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="渐进式解码"><a href="#渐进式解码" class="headerlink" title="渐进式解码"></a>渐进式解码</h2><p>渐进式解码（Progressive Decoding），即不需要完整的图像流数据，允许解码部分帧（大部分情况下，会是图像的部分区域），对部分使用了渐进式编码的格式（参考：<a href="https://en.wikipedia.org/wiki/Interlacing_(bitmaps">渐进式编码</a>），则更可以解码出相对模糊但完整的图像。</p>
<p>比如说，JPEG支持三种方式的渐进式编码，包括Baseline，interlaced，以及progressive（参考：<a href="https://blog.ibireme.com/2015/11/02/ios_image_tips/">iOS 处理图片的一些小 Tip</a>)</p>
<table>
<thead>
<tr>
<th align="center">Baseline</th>
<th align="center">Interlaced</th>
<th align="center">Progressive</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://blog.ibireme.com/wp-content/uploads/2015/11/image_baseline.gif"></td>
<td align="center"><img src="https://blog.ibireme.com/wp-content/uploads/2015/11/image_interlaced.gif"></td>
<td align="center"><img src="https://blog.ibireme.com/wp-content/uploads/2015/11/image_progressive.gif"></td>
</tr>
</tbody></table>
<p>对于Image/IO的渐进式解码，其实和静态图解码的过程类似。但是第一步创建CGImageSource时，需要使用专门的<code>CGImageSourceCreateIncremental</code>方法，之后每次有新的数据（下载或者其他流输入）输入后，需要使用<code>CGImageSourceUpdateData</code>（或者<code>CGImageSourceUpdateDataProvider</code>）来更新数据。注意这个方法需要每次传入所有至今为止解码的数据，不仅仅是当前更新的数据。</p>
<p>之后的过程，就和普通的解码一致，就不再说明了。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSData</span> *data;</span><br><span class="line"><span class="keyword">bool</span> finished = data.length == totalLength;</span><br><span class="line"><span class="built_in">CGImageSourceRef</span> source;</span><br><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="built_in">CGImageSourceUpdateData</span>(source, (__bridge <span class="built_in">CFDataRef</span>)data, finished);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和普通解码过程一样</span></span><br><span class="line"><span class="built_in">CGImageRef</span> imageRef = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(source, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>编码过程，这里指的就是将一个UIImage表示的图像，编码为对应图像格式的数据，输出一个NSData的过程。Image/IO提供的对应概念，叫做CGImageDestination，表示一个输出。之后的编码相关的操作，和这个Destination一一对应。</p>
<h2 id="静态图-1"><a href="#静态图-1" class="headerlink" title="静态图"></a>静态图</h2><p>静态图的编码，基本可以分为以下步骤：</p>
<ol>
<li>创建CGImageDestination</li>
<li>添加图像格式元数据（可选）和CGImage</li>
<li>编码得到NSData，清理</li>
</ol>
<h3 id="1-创建CGImageDestination"><a href="#1-创建CGImageDestination" class="headerlink" title="1. 创建CGImageDestination"></a>1. 创建CGImageDestination</h3><p>CGImageDestination的创建也有三个接口，你需要提供一个输出的目标来输出解码后的数据。同时，由于编码需要提供文件格式，你需要指明对应编码的文件格式，用的是<a href="https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html#//apple_ref/doc/uid/TP40001319">UTI Type</a>。对于静态图来说，第三个参数的数量都写1即可。</p>
<ul>
<li><code>CGImageDestinationCreateWithData</code>：指定一个可变二进制数据作为输出</li>
<li><code>CGImageDestinationCreateWithURL</code>：指定一个文件路径作为输出</li>
<li><code>CGImageDestinationCreateWithDataConsumer</code>：指定一个DataConsumer作为输出</li>
</ul>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CFStringRef</span> imageUTType; <span class="comment">//目标格式，比如kUTTypeJPEG</span></span><br><span class="line"><span class="comment">// 创建一个CGImageDestination</span></span><br><span class="line"><span class="built_in">CGImageDestinationRef</span> destination = <span class="built_in">CGImageDestinationCreateWithData</span>((__bridge <span class="built_in">CFMutableDataRef</span>)imageData, imageUTType, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (! destination) &#123;</span><br><span class="line">    <span class="comment">// 无法编码，基本上是因为目标格式不支持</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-添加图像格式元数据（可选）和CGImage"><a href="#2-添加图像格式元数据（可选）和CGImage" class="headerlink" title="2. 添加图像格式元数据（可选）和CGImage"></a>2. 添加图像格式元数据（可选）和CGImage</h3><p>接下来就是添加图像了，由于CGImage只是包含基本的图像信息，很多额外信息比如说EXIF都已经丢失了，如果我们需要，可以添加对应的元信息。不像解码那样提供了两个API分别获取元信息和图像。使用的接口是<code>CGImageDestinationAddImage</code>。</p>
<p>当然，如果有自定义的元信息，可以通过另外的<code>CGImageDestinationAddImageAndMetadata</code>来添加<code>CGImageMetadata</code>，这个上面解码也说到过，这里就不解释了。</p>
<p>此外，还有一个ImageIO最强大的功能，叫做<code>CGImageDestinationAddImageFromSource </code>（这个东西可以媲美<code>vImageConvert_AnyToAny</code>，后续教程会谈到），这个能够从一个任意的CGImageSource，添加一个图像帧到任意一个CGImageDestination。这个一般的用途，就是专门给图像转换器用的，比如说从图像格式A，转换到图像格式B。我们不需要先解码到A的UIImage，再通过编码到B的NSData，直接在中间就进行了转换。能够极大地提升转换效率（Image/IO底层就是通过vImage，传的是Bitmap的引用，没有额外的消耗）。不过这篇教程侧重于Image/IO的编码和解码，转换可以自行参考处理，不再详细说明了。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageRef</span> imageRef = image.CGImage; <span class="comment">// 待编码的CGImage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选元信息，比如EXIF方向</span></span><br><span class="line"><span class="built_in">CGImagePropertyOrientation</span> exifOrientation = kCGImagePropertyOrientationDown;</span><br><span class="line"><span class="built_in">NSMutableDictionary</span> *frameProperties = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">imageProperties[(__bridge_transfer <span class="built_in">NSString</span> *) kCGImagePropertyExifDictionary] = @(exifOrientation);</span><br><span class="line"><span class="comment">// 添加图像和元信息</span></span><br><span class="line"><span class="built_in">CGImageDestinationAddImage</span>(destination, imageRef, (__bridge <span class="built_in">CFDictionaryRef</span>)frameProperties);</span><br></pre></td></tr></table></figure>

<h3 id="3-编码得到NSData，清理"><a href="#3-编码得到NSData，清理" class="headerlink" title="3. 编码得到NSData，清理"></a>3. 编码得到NSData，清理</h3><p>当添加完成所有需要编码的CGImage之后，最后一步，就是进行编码，得到图像格式的数据。这里直接用一个方法<code>CGImageDestinationFinalize</code>即可，编码得到的数据，会写入最早初始化时提供的Data或者DataConsumer。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">CGImageDestinationFinalize</span>(destination) == <span class="literal">NO</span>) &#123;</span><br><span class="line">    <span class="comment">// 编码失败</span></span><br><span class="line">    imageData = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编码成功，清理……</span></span><br><span class="line"><span class="built_in">CFRelease</span>(destination);</span><br></pre></td></tr></table></figure>

<h2 id="动态图-1"><a href="#动态图-1" class="headerlink" title="动态图"></a>动态图</h2><p>动态图的编码，其实不像解码那样困难。只需要准备好所有的动态图的帧，按照帧的顺序进行一一添加即可。基本步骤可以概括为：</p>
<ol>
<li>静态图的步骤1，提供帧数</li>
<li>遍历所有图像帧，重复静态图的步骤2</li>
<li>静态图的步骤3</li>
</ol>
<h3 id="1-提供帧数，遍历图像帧"><a href="#1-提供帧数，遍历图像帧" class="headerlink" title="1. 提供帧数，遍历图像帧"></a>1. 提供帧数，遍历图像帧</h3><p>在进行动态图编码时，创建CGImageDestination的时候需要提供动态图的张数。即在<code>CGImageDestinationCreateWithData</code>的参数中，将<code>count</code>设置为需要编码的总张数。</p>
<p>另外，在遍历图像帧的过程，其实只需要不断地按顺序添加就行了，如果需要设置额外元信息，也需要按顺序设置到当前帧上。相对于解码来说简单多了。其他的没有什么大的区别。我们这里还是以GIF为例，简单说明一下。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span>&lt;<span class="built_in">UIImage</span> *&gt; *images;</span><br><span class="line"><span class="keyword">float</span> durations[frameCount];</span><br><span class="line"><span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; frameCount; i++) &#123;</span><br><span class="line">    <span class="keyword">float</span> frameDuration = durations[i];</span><br><span class="line">    <span class="built_in">CGImageRef</span> frameImageRef = images[i].CGImage;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *frameProperties = @&#123;(__bridge_transfer <span class="built_in">NSString</span> *)kCGImagePropertyGIFDictionary : @&#123;(__bridge_transfer <span class="built_in">NSString</span> *)kCGImagePropertyGIFUnclampedDelayTime : @(frameDuration)&#125;&#125;;</span><br><span class="line">    <span class="built_in">CGImageDestinationAddImage</span>(imageDestination, frameImageRef, (__bridge <span class="built_in">CFDictionaryRef</span>)frameProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Image/IO封装了非常简单直观的接口来处理图像编解码，对于任何开发者来说都能轻易上手。而且性能方面很多格式都有Apple自己的硬件解码器来做保证。另外，对于图像转换，Image/IO所提供的这种Source-Destination的操作能够非常方便地在不同格式之间转换，有兴趣的人务必可以试试。</p>
<p>不过遗憾的是，Image/IO的接口设计并没有提供可以扩展或者插件化的地方，不支持的图像格式就比较无能为力了。关于这个问题，请期待系列教程第二篇——第三方编解码教程。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS平台图片编解码入门教程（vImage篇）</title>
    <url>/2017/11/12/iOS%E5%B9%B3%E5%8F%B0%E5%9B%BE%E7%89%87%E7%BC%96%E8%A7%A3%E7%A0%81%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%88vImage%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>这篇教程，是系列教程的第三篇，前篇名为iOS平台图片编解码入门教程（第三方编解码篇）。由于vImage已经属于较为底层框架，这一篇将不会特别着重图片封装格式的编解码，会介绍一些Bitmap级别的操作，包括了图像的色彩转换，Alpha合成、基本几何变换等实际用法。由于教程侧重是图像格式，所以不会介绍vImage强大的Convolution等知识，这方面涉及到数字图像处理的复杂知识，不是教程的目标</p>
</blockquote>
<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p><a href="https://developer.apple.com/library/content/documentation/Performance/Conceptual/vImage/Introduction/Introduction.html">vImage</a>是Apple的Accelerate库的一部分，侧重于高性能的图像Bitmap级别的处理。库本身全部是C的接口，而且不同于Core系列的（Core Graphics/Core Foundation）C接口，是比较贴近传统C语言的接口，不会有XXXRef这种贴心的定义，而且很多接口需要自己手动分配内存。</p>
<p>vImage按照功能，可以分为Alpha Compositing（Alpha合成）、Geometry（几何变换）、Conversion（色彩转换）、Convolution（卷积，用于图像滤镜）Morphology（形态学处理）等。这里主要介绍的，就是色彩转换，Alpha合成，以及几何变换的内容。</p>
<p>首先需要对vImage的基本接口有所了解，有这么几个概念：</p>
<ul>
<li><code>vImage_Buffer</code>: 对应Bitmap的数据，只有最基本的width、height、rowBytes(stride)以及data</li>
<li><code>vImage_CGImageFormat</code>: 每个vImage的功能，会提供不同色彩格式的类似接口，比如会有ARGB8888，Planar8的同样功能。这里ARGB8888指的是ARGB排列，每通道占8个Bit，也就是一个Piexel占32Bit。而vImage还有一个常见的色彩格式Plane8，指的是只有一个通道（平面），按照顺序排列，比如<code>&#123;R, R, R, R&#125;</code>这样，更方便进行计算</li>
<li><code>vImage_Flags</code>: 每个vImage接口，都会有一个<code>flags </code>参数来控制一些选项，比如说可以自己定义内存分配，背景色填充策略，重采样策略等，默认的是<code>kvImageNoFlags</code></li>
<li><code>vImage_Error</code>: 每个vImage的接口，都会返回这个result，来让用户确认是否成功，以及失败的原因，在Debug下比较有帮助</li>
</ul>
<p>为了统一期间，以下的内容，都是基于ARGB8888色彩格式的输入来说明的。其他的情况处理，参考同名接口的不同格式即可。</p>
<h1 id="色彩转换"><a href="#色彩转换" class="headerlink" title="色彩转换"></a>色彩转换</h1><p>色彩转换指的是将图像的Bitmap格式，从一个色彩格式，比如ARGB8888，转换到另一个色彩格式，比如说RGB888的功能。对于RGB来说，一般来说就是通道的增加和减少。当然还有RGB转为Planar8的情况。</p>
<p>vImage对这些色彩转换的功能，统一提供了方法<code>vImageConvert_AtoB</code>，比如ARGB8888转RGB888，就可以用下面的代码来处理。顺便通过这个代码，来简单了解vImage的API的基本用法。</p>
<p>先来定义几个简单的结构体，方便后续使用：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为了方便，我们首先直接定义好ARGB8888的format结构体，后续需要多次使用</span></span><br><span class="line"><span class="keyword">static</span> vImage_CGImageFormat vImageFormatARGB8888 = (vImage_CGImageFormat) &#123;</span><br><span class="line">    .bitsPerComponent = <span class="number">8</span>, <span class="comment">// 8位</span></span><br><span class="line">    .bitsPerPixel = <span class="number">32</span>, <span class="comment">// ARGB4通道，4*8</span></span><br><span class="line">    .colorSpace = <span class="literal">NULL</span>, <span class="comment">// 默认就是sRGB</span></span><br><span class="line">    .bitmapInfo = kCGImageAlphaFirst | kCGBitmapByteOrderDefault, <span class="comment">// 表示ARGB</span></span><br><span class="line">    .version = <span class="number">0</span>, <span class="comment">// 或许以后会有版本区分，现在都是0</span></span><br><span class="line">    .decode = <span class="literal">NULL</span>, <span class="comment">// 和`CGImageCreate`的decode参数一样，可以用来做色彩范围映射的，NULL就是[0, 1.0]</span></span><br><span class="line">    .renderingIntent = kCGRenderingIntentDefault, <span class="comment">// 和`CGImageCreate`的intent参数一样，当色彩空间超过后如何处理</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// RGB888的format结构体</span></span><br><span class="line"><span class="keyword">static</span> vImage_CGImageFormat vImageFormatRGB888 = (vImage_CGImageFormat) &#123;</span><br><span class="line">    .bitsPerComponent = <span class="number">8</span>, <span class="comment">// 8位</span></span><br><span class="line">    .bitsPerPixel = <span class="number">24</span>, <span class="comment">// RGB3通道，3*8</span></span><br><span class="line">    .colorSpace = <span class="literal">NULL</span>,</span><br><span class="line">    .bitmapInfo = kCGImageAlphaNone | kCGBitmapByteOrderDefault, <span class="comment">// 表示RGB</span></span><br><span class="line">    .version = <span class="number">0</span>,</span><br><span class="line">    .decode = <span class="literal">NULL</span>,</span><br><span class="line">    .renderingIntent = kCGRenderingIntentDefault,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 字节对齐使用，vImage如果不是64字节对齐的，会有额外开销</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> size_t vImageByteAlign(size_t size, size_t alignment) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((size + (alignment - <span class="number">1</span>)) / alignment) * alignment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，就是完整的转换代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">CGImageRef</span>)nonAlphaImageWithImage:(<span class="built_in">CGImageRef</span>)aImage</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 首先，我们声明input和output的buffer</span></span><br><span class="line">    __block vImage_Buffer a_buffer = &#123;&#125;, output_buffer = &#123;&#125;;</span><br><span class="line">    @onExit &#123;</span><br><span class="line">        <span class="comment">// 由于vImage的API需要手动管理内存，避免内存泄漏</span></span><br><span class="line">        <span class="comment">// 为了方便错误处理清理内存，可以使用clang attibute的cleanup（这里是libextobjc的宏）</span></span><br><span class="line">        <span class="comment">// 如果不这样，还有一种方式，就是使用goto，定义一个fail:的label，所有return NULL改成`goto fail`;</span></span><br><span class="line">        <span class="keyword">if</span> (a_buffer.data) free(a_buffer.data);</span><br><span class="line">        <span class="keyword">if</span> (output_buffer.data) free(output_buffer.data);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 首先，创建一个buffer，可以用vImage提供的CGImage的便携构造方法，里面需要传入原始数据所需要的format，这里就是ARGB8888</span></span><br><span class="line">    vImage_Error a_ret = vImageBuffer_InitWithCGImage(&amp;a_buffer, &amp;vImageFormatARGB8888, <span class="literal">NULL</span>, aImage, kvImageNoFlags);</span><br><span class="line">    <span class="comment">// 所有vImage的方法一般都有一个result，判断是否成功</span></span><br><span class="line">    <span class="keyword">if</span> (a_ret != kvImageNoError) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 接着，我们需要对output buffer开辟内存，这里由于是RGB888，对应的rowBytes是3 * width，注意还需要64字节对齐，否则vImage处理会有额外的开销。</span></span><br><span class="line">    output_buffer.width = a_buffer.width;</span><br><span class="line">    output_buffer.height = a_buffer.height;</span><br><span class="line">    output_buffer.rowBytes = vImageByteAlign(output_buffer.width * <span class="number">3</span>, <span class="number">64</span>);</span><br><span class="line">    output_buffer.data = malloc(output_buffer.rowBytes * output_buffer.height);</span><br><span class="line">    <span class="comment">// 这里使用vImage的convert方法，转换色彩格式</span></span><br><span class="line">    vImage_Error ret = vImageConvert_ARGB8888toRGB888(&amp;a_buffer, &amp;output_buffer, kvImageNoFlags);</span><br><span class="line">    <span class="keyword">if</span> (ret != kvImageNoError) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 此时已经output buffer已经转换完成，输出回CGImage</span></span><br><span class="line">    <span class="built_in">CGImageRef</span> outputImage = vImageCreateCGImageFromBuffer(&amp;output_buffer, &amp;vImageFormatRGB888, <span class="literal">NULL</span>, <span class="literal">NULL</span>, kvImageNoFlags, &amp;ret);</span><br><span class="line">    <span class="keyword">if</span> (ret != kvImageNoError) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> outputImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="任意色彩格式转换"><a href="#任意色彩格式转换" class="headerlink" title="任意色彩格式转换"></a>任意色彩格式转换</h2><p>除了一系列<code>vImageConvert_AtoB</code>的转换，vImage还提供了一个非常抽象的接口，叫做<code>vImageConvert_AnyToAny</code>，只需要你提供一个input format，一个output format，就可以直接转换。这个接口比较强大，不仅能够handler所有支持的色彩格式，而且还能支持<code>CVImageBuffer</code>（通过这个<code>vImageConverter</code>来构造）。所以一般如果做库封装，做一些色彩转换的case的时候，就可以试着用这个接口。</p>
<p>因此，我们之前的ARGB8888ToRGB888的色彩转换，可以这样写，更为通用。示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">vImageConverterRef converter = vImageConverter_CreateWithCGImageFormat(&amp;vImageFormatARGB8888, &amp;vImageFormatRGB888, <span class="literal">NULL</span>, kvImageNoFlags, &amp;ret);</span><br><span class="line"><span class="keyword">if</span> (ret != kvImageNoError) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">ret = vImageConvert_AnyToAny(converter, &amp;a_buffer, &amp;output_buffer, <span class="literal">NULL</span>, kvImageNoFlags);</span><br></pre></td></tr></table></figure>


<h1 id="Alpha合成"><a href="#Alpha合成" class="headerlink" title="Alpha合成"></a>Alpha合成</h1><p><img src="https://raw.githubusercontent.com/dreampiggy/vImageProcessor/master/Example/Screenshot/Screenshot1.png" alt="Alpha合成"></p>
<p><a href="https://en.wikipedia.org/wiki/Alpha_compositing">Alpha合成</a>指的是将两张含有Alpha通道的图（被Blend的叫做bottom，Blend的叫做top），通过一定的公式合成成为一张新的含Alpha通道的图，一般来说用于给图像添加遮罩、覆盖等，常见的图像处理软件都有这个功能。其实本质上来说，Alpha合成，就是对图像的每一个像素值，进行这样一个计算：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">resultAlpha = (topAlpha * <span class="number">255</span> + (<span class="number">255</span> - topAlpha)</span><br><span class="line">                 * bottomAlpha + <span class="number">127</span>) / <span class="number">255</span></span><br><span class="line">resultColor = (topAlpha * topColor + (((<span class="number">255</span> - topAlpha)</span><br><span class="line">                 * bottomAlpha + <span class="number">127</span>) / <span class="number">255</span>) * bottomColor +  <span class="number">127</span>)</span><br><span class="line">                    / resultAlpha</span><br></pre></td></tr></table></figure>

<p>公式看起来比较复杂，因此这里顺便可以介绍一下关于<a href="https://segmentfault.com/a/1190000002990030">premultiplied-alpha</a>的概念，直观地说，就是将<code>(r, g, b, a)</code>预先乘以了对应的alpha通道的值，成为<code>(r * a, g * a, b * a, a)</code>。这个带来的好处，就是Alpha合成的时候，可以少一次乘法，而且简化了计算，成为这样子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">resultColor = (topColor + (((<span class="number">255</span> - topAlpha)</span><br><span class="line">                 * bottomAlpha + <span class="number">127</span>) / <span class="number">255</span>) * bottomColor +  <span class="number">127</span>)</span><br></pre></td></tr></table></figure>

<p>在vImage中，已经提供了一个接口来专门处理Alpha合成，针对nonpremultiplied的，是<code>vImageAlphaBlend_ARGB8888</code>，而针对premultiplied，是<code>vImagePremultipliedAlphaBlend_ARGB8888</code>。需要注意的是，这个接口要求的两个buffer，宽度和高度必须相等，因此，我们对于Color和Image的遮罩，需要进行处理，保证这两个buffer满足要求。</p>
<h2 id="Alpha-Blend-Color"><a href="#Alpha-Blend-Color" class="headerlink" title="Alpha Blend Color"></a>Alpha Blend Color</h2><p>这个用处，一般是用来做图像的遮罩的，可以对图像整体盖一层有透明度的颜色，比如说夜间模式，纯色滤镜等。根据上面说的，如果需要对一个Bitmap使用vImage进行Alpha Blend，我们需要保证两个buffer的宽度和高度相同，因此可以使用<code>vImageBufferFill_ARGB8888</code>填充整个Color来构造一个与输入图像Buffer相同宽高的新buffer，然后用它来进行Alpha Blend。</p>
<p>代码示例：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageRef</span> aImage; <span class="comment">// 输入的bottom Image</span></span><br><span class="line"><span class="built_in">CGColorRef</span> color; <span class="comment">// 输入的color</span></span><br><span class="line">__block vImage_Buffer a_buffer = &#123;&#125;, b_buffer = &#123;&#125;, output_buffer = &#123;&#125;; <span class="comment">// 分别是bottom buffer，top buffer和最后的output buffer</span></span><br><span class="line">Pixel_8888 pixel_color = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> *components = <span class="built_in">CGColorGetComponents</span>(color);</span><br><span class="line"><span class="keyword">const</span> size_t components_size = <span class="built_in">CGColorGetNumberOfComponents</span>(color);</span><br><span class="line"><span class="comment">// 对CGColor进行转换到Pixel_8888</span></span><br><span class="line"><span class="keyword">if</span> (components_size == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// white, alpha</span></span><br><span class="line">    pixel_color[<span class="number">0</span>] = components[<span class="number">1</span>] * <span class="number">255</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// red, green, blue, (alpha)</span></span><br><span class="line">    pixel_color[<span class="number">0</span>] = components_size == <span class="number">3</span> ? <span class="number">255</span> : components[<span class="number">3</span>] * <span class="number">255</span>;</span><br><span class="line">    pixel_color[<span class="number">1</span>] = components[<span class="number">0</span>] * <span class="number">255</span>;</span><br><span class="line">    pixel_color[<span class="number">2</span>] = components[<span class="number">1</span>] * <span class="number">255</span>;</span><br><span class="line">    pixel_color[<span class="number">3</span>] = components[<span class="number">2</span>] * <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 填充color到top buffer</span></span><br><span class="line">vImage_Error b_ret = vImageBufferFill_ARGB8888(&amp;b_buffer, pixel_color , kvImageNoFlags);</span><br><span class="line"><span class="keyword">if</span> (b_ret != kvImageNoError) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// Alpha Blend</span></span><br><span class="line">vImage_Error ret = vImageAlphaBlend_ARGB8888(&amp;b_buffer, &amp;a_buffer, &amp;output_buffer, kvImageNoFlags);</span><br></pre></td></tr></table></figure>


<h2 id="Alpha-Blend-Image"><a href="#Alpha-Blend-Image" class="headerlink" title="Alpha Blend Image"></a>Alpha Blend Image</h2><p>上面说到了关于Color的Alpha Blend，不同于Color这种需要填充全部宽度，如果对于一个Image需要进行Alpha Blend，我们大部分情况都是需要制定一个起始点的，因为不能保证所有输入的两个Image的宽高相同。因此设计的时候，可以给用户提供一个point参数，以这个坐标点开始来绘制Alpha Blend，类似于很多图像编辑软件提供的图层功能。</p>
<p>由于vImage的Alpha Blend需要两个等宽高的Buffer，因此我们需要对用户提供的Top Image进行处理，通过平移变换移动到指定的Point以后，填充其余部分为Clear Color。最后进行Alpha Blend即可。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageRef</span> aImage, bImage; <span class="comment">// 输入的bottom Image和top Image</span></span><br><span class="line">__block vImage_Buffer a_buffer = &#123;&#125;, b_buffer = &#123;&#125;, c_buffer = &#123;&#125;, output_buffer = &#123;&#125;;</span><br><span class="line"><span class="comment">//c buffer指的是将top Image进行处理后的临时buffer，使得宽高同bottom image相同</span></span><br><span class="line"><span class="comment">// 这里我们使用到了线性变换的平移变换，以(0,0)放置top image，然后偏移point个像素点，其余部分填充clear color，即可得到这个处理后的c buffer</span></span><br><span class="line"><span class="built_in">CGAffineTransform</span> transform = <span class="built_in">CGAffineTransformMakeTranslation</span>(point.x, point.y);</span><br><span class="line">vImage_CGAffineTransform cg_transform = *((vImage_CGAffineTransform *)&amp;transform);</span><br><span class="line">Pixel_8888 clear_color = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">vImage_Error c_ret = vImageAffineWarpCG_ARGB8888(&amp;b_buffer, &amp;c_buffer, <span class="literal">NULL</span>, &amp;cg_transform, clear_color, kvImageBackgroundColorFill);</span><br><span class="line"><span class="keyword">if</span> (c_ret != kvImageNoError) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 略过output buffer初始化</span></span><br><span class="line"><span class="comment">// 将bottom image和处理后的c buffer进行Alpha Blend</span></span><br><span class="line">vImage_Error ret = vImageAlphaBlend_ARGB8888(&amp;c_buffer, &amp;a_buffer, &amp;output_buffer, kvImageNoFlags);</span><br></pre></td></tr></table></figure>

<h1 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h1><p>几何变换，指的是将一个原始的Bitmap，通过线性方法进行处理，实现比如平移、缩放、旋转、错切等操作的图像处理技术。</p>
<p>可能大部分人已经知道了（之前也说过），Core Graphics的坐标系统，和UIKit的坐标系统，在Y坐标上是相反的。UIKit的使用的是Y轴正向垂直向下的左手系，而Core Graphics和普通的右手系直角坐标系相同。vImage也遵守了右手系，因此之后介绍的变换都是按照右手系的，如果想处理UIKit的坐标系，自己转换一下即可（一般就是取<code>image.height - offsetY</code>即可）</p>
<p>关于要介绍的的这些几何变换，虽然都最后可以统一到到线性变换上，只不过效率上可能相比单独的方法来说有所损耗，因此单独对每个功能所需要的vImage接口进行了介绍。关于线性变换不太理解的，可以参考一下之前的一篇教程：<a href="http://dreampiggy.com/2016/09/27/core-graphicsfang-she-bian-huan/">Core Graphics仿射变换知识</a></p>
<h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p><img src="https://raw.githubusercontent.com/dreampiggy/vImageProcessor/master/Example/Screenshot/Screenshot2.png" alt="缩放"></p>
<p>缩放是最简单的一个处理过程，但是由于缩放之后，之前的同一个像素点，现在可能会映射到4个或者更多像素点，或者是原本4个像素点，现在需要映射到1个像素点。这就会涉及到一个叫做<a href="https://en.wikipedia.org/wiki/Image_scaling">图像重采样</a>的过程。具体来说，就是对每一个像素，所在的Bitmap的子矩阵（比如3x3），通过一定的算法计算，得到对应的缩放以后的中心像素的值。同时，这个像素值可能变成浮点数，还需要进行处理，最后填到采样后的Bitmap相应的位置上。常见的简单处理有最邻近算法、双线性算法、双立方算法等。</p>
<p>vImage默认使用的是<a href="https://en.wikipedia.org/wiki/Lanczos_resampling">Lanczos Algorithm</a>，具体的介绍可以参考Wikipedia和DSP相关的书籍。这里有一个直观的对比表现<a href="https://clouard.users.greyc.fr/Pantheon/experiments/rescaling/index-en.html">网页</a>。如果想要更高画质的算法，可以提供<code>kvImageHighQualityResampling</code>参数，来使用<code>Lanczos5</code>算法。或者可以使用之后要谈的相对底层一点的错切API，来自定义你的重采样过程。</p>
<p>vImage提供了自带的<code>vImageScale_ARGB8888</code>方法，这里就简单举个例子（之前重复代码的都略过）：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGSize</span> size; <span class="comment">// 目标大小</span></span><br><span class="line">output_buffer.width = MAX(size.width, <span class="number">0</span>);</span><br><span class="line">output_buffer.height = MAX(size.height, <span class="number">0</span>);</span><br><span class="line">output_buffer.rowBytes = vImageByteAlign(output_buffer.width * <span class="number">4</span>, <span class="number">64</span>);</span><br><span class="line">output_buffer.data = malloc(output_buffer.rowBytes * output_buffer.height);</span><br><span class="line"><span class="keyword">if</span> (!output_buffer.data) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 进行缩放，输出到output buffer中</span></span><br><span class="line">vImage_Error ret = vImageScale_ARGB8888(&amp;a_buffer, &amp;output_buffer, <span class="literal">NULL</span>, kvImageHighQualityResampling);</span><br></pre></td></tr></table></figure>

<h2 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h2><p>裁剪是指的将原始Bitmap，只裁出来指定矩形大小的部分，其余部分直接丢弃的过程。虽然vImage没有提供直接的API来处理这个流程（当然你是可以用vecLib的方法，直接对Bitmap进行矩阵操作，但是有点过于小题大做了）。但是实际上，这就是一个平移变换能够搞定的事情。我们只需要对输入目标的坐标的<code>CGRect</code>进行转换，将原始图像平移之后，再限制输出的Bitmap的大小，这样平移超出部分就会自动被裁掉。不需额外的处理，示例代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> rect; <span class="comment">// 输入的目标rect</span></span><br><span class="line">output_buffer.width = MAX(<span class="built_in">CGRectGetWidth</span>(rect), <span class="number">0</span>); <span class="comment">// 输出宽度</span></span><br><span class="line">output_buffer.height = MAX(<span class="built_in">CGRectGetHeight</span>(rect), <span class="number">0</span>); <span class="comment">// 输出高度</span></span><br><span class="line">output_buffer.rowBytes = vImageByteAlign(output_buffer.width * <span class="number">4</span>, <span class="number">64</span>);</span><br><span class="line">output_buffer.data = malloc(output_buffer.rowBytes * output_buffer.height);</span><br><span class="line"><span class="keyword">if</span> (!output_buffer.data) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用平移来处理，X轴Y轴分别平移负向的minX，minY即可</span></span><br><span class="line"><span class="built_in">CGFloat</span> tx = <span class="built_in">CGRectGetMinX</span>(rect);</span><br><span class="line"><span class="built_in">CGFloat</span> ty = <span class="built_in">CGRectGetMinY</span>(rect);</span><br><span class="line"><span class="built_in">CGAffineTransform</span> transform = <span class="built_in">CGAffineTransformMakeTranslation</span>(-tx, -ty);</span><br><span class="line">vImage_CGAffineTransform cg_transform = *((vImage_CGAffineTransform *)&amp;transform);</span><br><span class="line">Pixel_8888 clear_color = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">vImage_Error ret = vImageAffineWarpCG_ARGB8888(&amp;a_buffer, &amp;output_buffer, <span class="literal">NULL</span>, &amp;cg_transform, clear_color, kvImageBackgroundColorFill);</span><br></pre></td></tr></table></figure>

<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>镜像顾名思义，就是将图像沿着某个轴进行翻转，比如沿X轴就是水平镜像，同一个像素点，对应的X坐标不变，Y坐标变为高度减去本身的Y坐标即可。</p>
<p>vImage对应的API，是<code>vImageVerticalReflect_ARGB8888</code>和<code>vImageHorizontalReflect_ARGB8888</code>，使用起来也比较简单。直接上一个简单的示例：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> horizontal;</span><br><span class="line">__block vImage_Buffer a_buffer = &#123;&#125;, output_buffer = &#123;&#125;;</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line">vImage_Error ret;</span><br><span class="line"><span class="keyword">if</span> (horizontal) &#123;</span><br><span class="line">    <span class="comment">// 水平镜像</span></span><br><span class="line">    ret = vImageHorizontalReflect_ARGB8888(&amp;a_buffer, &amp;output_buffer, kvImageHighQualityResampling);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 垂直镜像</span></span><br><span class="line">    ret = vImageVerticalReflect_ARGB8888(&amp;a_buffer, &amp;output_buffer, kvImageHighQualityResampling);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>旋转也是非常常见一个图像几何几何变化。具体坐标的变化就是对旋转的角度，求对应三角函数到X轴和Y轴的投影结果，比较直观。</p>
<p>vImage对旋转也提供了一个非常方便的API，角度是弧度值，按照顺时针方向进行。另外，由于输出的Buffer的大小会限制图像大小，而旋转后可能超出原图大小，我们需要对输出的大小也计算出对应的新的大小。示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> radians; <span class="comment">//旋转的弧度</span></span><br><span class="line"><span class="built_in">CGSize</span> size = <span class="built_in">CGSizeMake</span>(a_buffer.width, a_buffer.height);</span><br><span class="line"><span class="comment">// 这里直接借用CG的方法来计算旋转后的大小，方便</span></span><br><span class="line"><span class="built_in">CGAffineTransform</span> transform = <span class="built_in">CGAffineTransformMakeRotation</span>(radians);</span><br><span class="line">size = <span class="built_in">CGSizeApplyAffineTransform</span>(size, transform);    output_buffer.width = ABS(size.width);</span><br><span class="line">output_buffer.height = ABS(size.height);</span><br><span class="line">output_buffer.rowBytes = vImageByteAlign(output_buffer.width * <span class="number">4</span>, <span class="number">64</span>);</span><br><span class="line">output_buffer.data = malloc(output_buffer.rowBytes * output_buffer.height);</span><br><span class="line"><span class="keyword">if</span> (!output_buffer.data) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">Pixel_8888 clear_color = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// 旋转操作，多余部分填充Clear Color</span></span><br><span class="line">vImage_Error ret = vImageRotate_ARGB8888(&amp;a_buffer, &amp;output_buffer, <span class="literal">NULL</span>, radians, clear_color, kvImageBackgroundColorFill | kvImageHighQualityResampling);</span><br></pre></td></tr></table></figure>

<h2 id="错切"><a href="#错切" class="headerlink" title="错切"></a>错切</h2><p><img src="https://raw.githubusercontent.com/dreampiggy/vImageProcessor/master/Example/Screenshot/Screenshot3.png" alt="错切"></p>
<p><a href="https://en.wikipedia.org/wiki/Shear_mapping">错切</a>是一种特殊的线性变换，直观的介绍可以从Wikipedia上看，也可以参考之前的另一篇教程。主要的参数有一个m值，表示对应参考坐标的缩放倍数。</p>
<p>在vImage中，错切变换是相对底层的接口，实际上，线性变换是通过这三个接口（错切、旋转、镜像）来实现的。错切的接口，比如水平错切对应的是<code>vImageHorizontalShear_ARGB8888</code>，参数算是最多的一个，稍微详细介绍一下：</p>
<ul>
<li><code>srcOffsetToROI_X</code>: 错切定位点水平偏移量，具体指的就是左上角那个像素点，在经过旋转的映射后，水平偏移的距离，会影响最后图像（除去Buffer的宽度限制）的整体宽度</li>
<li><code>srcOffsetToROI_Y</code>: 错切定位点的垂直偏移量，类似水平值</li>
<li><code>xTranslate</code>: 错切完成后的水平平移距离</li>
<li><code>shearSlope</code>: 错切的弧度值，顺时针</li>
<li><code>filter</code>: 用来自定义重采样的方法，一般用自带的<code>vImageNewResamplingFilter</code>，或者也可以提供一个函数指针构造对应的重采样过程。会用到一个scale参数，表示这个重采样对应的缩放倍数，也就是错切的m值</li>
<li><code>backgroundColor</code>: 背景填充色</li>
</ul>
<p>对应的示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGVector</span> offset; <span class="comment">// 定位点偏移量</span></span><br><span class="line"><span class="built_in">CGFloat</span> translation; <span class="comment">// 水平平移量</span></span><br><span class="line"><span class="built_in">CGFloat</span> slope; <span class="comment">// 旋转弧度</span></span><br><span class="line"><span class="built_in">CGFloat</span> scale; <span class="comment">// 对应错切的m值</span></span><br><span class="line">output_buffer.width = MAX(a_buffer.width - offset.dx, <span class="number">0</span>); <span class="comment">//这里需要同时减去水平定位点的偏移</span></span><br><span class="line">output_buffer.height = MAX(a_buffer.height - offset.dy, <span class="number">0</span>); <span class="comment">// 同理</span></span><br><span class="line">output_buffer.rowBytes = vImageByteAlign(output_buffer.width * <span class="number">4</span>, <span class="number">64</span>);</span><br><span class="line">output_buffer.data = malloc(output_buffer.rowBytes * output_buffer.height);</span><br><span class="line"><span class="keyword">if</span> (!output_buffer.data) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">Pixel_8888 clear_color = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// 这里示例就用默认的重采样方法</span></span><br><span class="line">ResamplingFilter resampling_filter = vImageNewResamplingFilter(scale, kvImageHighQualityResampling);</span><br><span class="line">vImage_Error ret;</span><br><span class="line"><span class="keyword">if</span> (horizontal) &#123;</span><br><span class="line">    <span class="comment">// 水平错切</span></span><br><span class="line">    ret = vImageHorizontalShear_ARGB8888(&amp;a_buffer, &amp;output_buffer, offset.dx, offset.dy, translation, slope, resampling_filter, clear_color, kvImageBackgroundColorFill);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 垂直错切</span></span><br><span class="line">    ret = vImageVerticalShear_ARGB8888(&amp;a_buffer, &amp;output_buffer, offset.dx, offset.dy, translation, slope, resampling_filter, clear_color, kvImageBackgroundColorFill);</span><br><span class="line">&#125;</span><br><span class="line">vImageDestroyResamplingFilter(resampling_filter);</span><br></pre></td></tr></table></figure>

<h2 id="线性变换"><a href="#线性变换" class="headerlink" title="线性变换"></a>线性变换</h2><p>最后再来说通用的线性变换吧，这个其实在之前的功能中已经用到过了，vImage有兼容Core Graphics的<code>CGAffineTransform</code>的结构体<code>vImage_CGAffineTransform</code>，两个结构体对应的内存布局是一样的，直接强制转换过去就可以了，不需要单独赋一遍。关于通用线性变换的内容就不再赘述了，有兴趣可以查看相关资料，或者之前的教程：<a href="http://dreampiggy.com/2016/09/27/core-graphicsfang-she-bian-huan/">Core Graphics仿射变换知识</a></p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGAffineTransform</span> transform; <span class="comment">// 输入的CG变换矩阵</span></span><br><span class="line">vImage_CGAffineTransform cg_transform = *((vImage_CGAffineTransform *)&amp;transform); <span class="comment">// 结构一样，直接强转</span></span><br><span class="line">Pixel_8888 clear_color = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// 线性变换</span></span><br><span class="line">vImage_Error ret = vImageAffineWarpCG_ARGB8888(&amp;a_buffer, &amp;output_buffer, <span class="literal">NULL</span>, &amp;cg_transform, clear_color, kvImageBackgroundColorFill | kvImageHighQualityResampling);</span><br></pre></td></tr></table></figure>


<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>vImage是一个比较底层的图像Bitmap处理的库，在这里介绍了关于色彩转换、Alpha合成、几何变换等基本知识。相比于简单的Core Graphics的处理，能够提供更为复杂的参数控制，并且带来较高的性能。对于很多图像密集处理软件处理来说，用Core Graphics显的比较低效，因此可以考虑vImage。</p>
<p>但是vImage强大之处远不在这里，里面还包含了类似图像卷积，形态处理等，可以对复杂滤镜进行支持，类似于<a href="https://github.com/BradLarson/GPUImage">GPUImage</a>。这些功能都需要数字图像处理相关知识，在这种教程系列就不会介绍了。</p>
<p>对于这篇教程的示例代码，其实我写了个非常简单的库，放到GitHub上了：<a href="https://github.com/dreampiggy/vImageProcessor">vImageProcessor</a>，有兴趣的可以去参考一下，希望能够用于自己的图片处理相关框架中。</p>
<p>由于自己完全是业余兴趣，工作和图像处理基本不相关，并不打算深入学习数字图像处理的知识，因此这个教程可能就会暂时告一段落了。最后，之所以写这篇教程，是因为自己想要参考一下vImage的教程，却发现只会搜出来一堆互相抄袭的内容，而且大部分都是关于图像滤镜的，对于图像处理本身不会太多介绍。我希望这系列教程，能给同样对图像编解码、图像处理有一点兴趣的人，提供一个相对简单且清晰的入门概览吧。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS平台图片编解码入门教程（第三方编解码篇）</title>
    <url>/2017/10/30/iOS%E5%B9%B3%E5%8F%B0%E5%9B%BE%E7%89%87%E7%BC%96%E8%A7%A3%E7%A0%81%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BC%96%E8%A7%A3%E7%A0%81%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>这篇教程，是系列教程的第二篇，前篇名为《iOS平台图片编解码入门教程（Image/IO篇）》。这篇主要讲第三方解码器如何在iOS平台上处理（和Image/IO的几大要点一一对应），更会介绍一些基本的Bitmap概念，总结通用的处理方法，毕竟授人以鱼不如授人以渔</p>
</blockquote>
<h1 id="第三方编解码"><a href="#第三方编解码" class="headerlink" title="第三方编解码"></a>第三方编解码</h1><p>对于图片编解码来说，Apple自带的Image/IO确实非常的易用，但是对于Image/IO不支持的图像格式就能无能为力了。截止到iOS 11，Image/IO不支持WebP，BPG，对于一些需要依赖WebP的业务就比较麻烦了（WebP的优点就不再介绍了）。不过我们可以自己集成第三方的图片解码器，去支持这些需要的的格式。</p>
<p>一般来说，我们需要根据自己想要支持的图像格式，选择相对应的编解码器，进行编解码。这里我们以WebP的解码库<a href="https://developers.google.com/speed/webp/docs/api">libwebp</a>为例子，其他解码器需要根据对应解码器的API处理，基本概念类似。</p>
<h1 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h1><p>不像Image/IO那样封装了整套流程，第三方解码的关键之处，就是在于获取到图像的<a href="https://en.wikipedia.org/wiki/Raster_graphics">Bitmap</a>数据，通常情况就是<a href="https://en.wikipedia.org/wiki/RGBA_color_space">RGBA</a>的矢量表示。</p>
<p>简单解释一下，Bitmap可以理解为连续排列像素（Pixel）的二维数组，一个像素包括4个通道(Components)的点，每个点的位数叫做色深（常见的32位色，指的就是1个像素有4通道，每个通道8位），而像素的通道排列顺序按照对应的RGBA Mode顺序排列，比如说RGBA8888（大端序），就是这样一串连续的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha, uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha...&#125;</span><br></pre></td></tr></table></figure>

<p>这样的话，在内存中，一般就可以用<code>uint8_t bitmap[width * components * 8][height]</code>来表示。</p>
<p>有了这样的知识，对照着就能看懂CGImage的BitmapInfo所表示的信息了。</p>
<p><img src="https://developer.apple.com/library/content/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Art/colorformatrgba32.gif" alt="Bitmap的表示"></p>
<h2 id="静态图"><a href="#静态图" class="headerlink" title="静态图"></a>静态图</h2><p>只要Bitmap数据到手，后面的过程其实都大同小异。第三方解码器主要处理图像编码数据到原始Bitmap的解码过程，后续就可以通过固定的方式来得到CGImage或者UIImage，用于上层UI组件的渲染。</p>
<ol>
<li>第三方解码器获取图像Bitmap</li>
<li>通过Bitmap创建CGImage</li>
<li>CGImage重绘（可选）</li>
<li>生成上层的UIImage，清理</li>
</ol>
<h3 id="1-第三方解码器获取图像Bitmap"><a href="#1-第三方解码器获取图像Bitmap" class="headerlink" title="1. 第三方解码器获取图像Bitmap"></a>1. 第三方解码器获取图像Bitmap</h3><p>根据自己的需要，可以选择对应的编码器，来获取图像Bitmap。这里我们以WebP的解码库<a href="https://developers.google.com/speed/webp/docs/api">libwebp</a>为例子，其他解码器需要根据对应解码器的API处理，基本概念类似。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSData</span> *data; <span class="comment">// 待解码的图像二进制数据</span></span><br><span class="line"></span><br><span class="line">WebPData webpData;</span><br><span class="line">WebPDataInit(&amp;webpData);</span><br><span class="line">webpData.bytes = data.bytes;</span><br><span class="line">webpData.size = data.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化Config，用于存储图像的Bitmap，大小等信息</span></span><br><span class="line">WebPDecoderConfig config;</span><br><span class="line"><span class="keyword">if</span> (!WebPInitDecoderConfig(&amp;config)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否能够解码</span></span><br><span class="line"><span class="keyword">if</span> (WebPGetFeatures(webpData.bytes, webpData.size, &amp;config.input) != VP8_STATUS_OK) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定输出的Bitmap色彩空间，有Alpha通道选择RGBA，没有选择RGB </span></span><br><span class="line"><span class="keyword">bool</span> has_alpha = config.input.has_alpha;</span><br><span class="line">config.output.colorspace = has_alpha ? MODE_rgbA : MODE_RGB;</span><br><span class="line">config.options.use_threads = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真正开始解码，输出RGBA数据到Config的output中</span></span><br><span class="line"><span class="keyword">if</span> (WebPDecode(webpData.bytes, webpData.size, &amp;config) != VP8_STATUS_OK) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取图像的大小</span></span><br><span class="line"><span class="keyword">int</span> width = config.input.width;</span><br><span class="line"><span class="keyword">int</span> height = config.input.height;</span><br><span class="line"><span class="keyword">if</span> (config.options.use_scaling) &#123;</span><br><span class="line">    width = config.options.scaled_width;</span><br><span class="line">    height = config.options.scaled_height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RGBA矢量和对应的大小</span></span><br><span class="line">uint8_t *rgba = config.output.u.RGBA.rgb;</span><br><span class="line">size_t rgbaSize = config.output.u.RGBA.size;</span><br></pre></td></tr></table></figure>

<p>截止到这里，我们基本上调用通过第三方解码库的接口，就完成了获取Bitmap的工作。一般来说，以RGBA来说，最少需要知道以下信息：图像RGBA数组，数组大小，图像宽度、高度、是否含有Alpha通道这几个，以便开始下一步的创建CGImage的过程</p>
<h3 id="2-通过Bitmap创建CGImage"><a href="#2-通过Bitmap创建CGImage" class="headerlink" title="2. 通过Bitmap创建CGImage"></a>2. 通过Bitmap创建CGImage</h3><p>有了图像的Bitmap数据之后，可以通过<code>CGImageCreate</code>来生成CGImage。对于RGBA的输入，需要的参数基本比较固定，以下代码基本上可以参考来复用。（需要注意，iOS上只支持<a href="https://segmentfault.com/a/1190000002990030">premultiplied-alpha</a>，macOS可以支持非premultiplied-alpha）</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过RGBA数组，创建一个DataProvider。最后一个参数是一个函数指针，用来在创建完成后清理内存用的</span></span><br><span class="line"><span class="built_in">CGDataProviderRef</span> provider = <span class="built_in">CGDataProviderCreateWithData</span>(<span class="literal">NULL</span>, rgba, rgbaSize, FreeImageData);</span><br><span class="line"><span class="comment">// 目标色彩空间，我们这里用的就是RGBA</span></span><br><span class="line"><span class="built_in">CGColorSpaceRef</span> colorSpaceRef = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line"><span class="comment">// Bitmap数据，如果含有Alpha通道，设置Premultiplied Alpha。没有就忽略Alpha通道</span></span><br><span class="line"><span class="built_in">CGBitmapInfo</span> bitmapInfo = has_alpha ? kCGBitmapByteOrder32Big | kCGImageAlphaPremultipliedLast : kCGBitmapByteOrder32Big | kCGImageAlphaNoneSkipLast;</span><br><span class="line"><span class="comment">// 通道数，有alpha就是4，没有就是3</span></span><br><span class="line">size_t components = has_alpha ? <span class="number">4</span> : <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 这个是用来做色彩空间变换的指示，如果超出色彩空间，比如P3转RGBA，默认会进行兼容转换</span></span><br><span class="line"><span class="built_in">CGColorRenderingIntent</span> renderingIntent = kCGRenderingIntentDefault;</span><br><span class="line"><span class="comment">// 每行字节数（RGBA数组就是连续排列的多维数组，一行就是宽度*通道数），又叫做stride，因为Bitmap本质就是Pixel(uint_8)的二维数组，需要知道何时分行</span></span><br><span class="line">size_t bytesPerRow = components * width;</span><br><span class="line"><span class="comment">// 创建CGImage，参数分别意义为：宽度，高度，每通道的Bit数（RGBA自然是256，对应8Bit），每行字节数，色彩空间，Bitmap信息，数据Provider，解码数组（这个传NULL即可，其他值的话，会将经过变换比如premultiplied-alpha之后的Bitmap写回这个数组），是否过滤插值（这个一般不用开，可以在专门的图像锐化里面搞），色彩空间变换指示</span></span><br><span class="line"><span class="built_in">CGImageRef</span> imageRef = <span class="built_in">CGImageCreate</span>(width, height, <span class="number">8</span>, components * <span class="number">8</span>, bytesPerRow, colorSpaceRef, bitmapInfo, provider, <span class="literal">NULL</span>, <span class="literal">NO</span>, renderingIntent);</span><br><span class="line"><span class="comment">// 别忘了清理DataProvider，此时会调用之前传入的清理函数</span></span><br><span class="line"><span class="built_in">CGDataProviderRelease</span>(provider);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> FreeImageData(<span class="keyword">void</span> *info, <span class="keyword">const</span> <span class="keyword">void</span> *data, size_t size) &#123;</span><br><span class="line">    free((<span class="keyword">void</span> *)data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-CGImage重绘"><a href="#3-CGImage重绘" class="headerlink" title="3. CGImage重绘"></a>3. CGImage重绘</h3><p>这一步其实是可选的，但是建议都加上这一步骤。虽然我们之前通过RGBA创建了CGImage，但是实际上，CALayer和上层的UIImageView这些渲染的时候，要求的色彩是限定的，不然会有额外的内存和渲染消耗，我们解码出来的rgba的格式可能并不是按照这样的色彩空间排列，因此建议进行一次重绘，即将CGImage重绘到一个CGBitmapContext之上。这个代码比较简单。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageRef</span> imageRef;</span><br><span class="line">size_t canvasWidth = <span class="built_in">CGImageGetWidth</span>(imageRef)</span><br><span class="line">size_t canvasHeight = <span class="built_in">CGImageGetHeight</span>(imageRef)</span><br><span class="line"><span class="built_in">CGBitmapInfo</span> bitmapInfo;</span><br><span class="line"><span class="keyword">if</span> (! has_alpha) &#123;</span><br><span class="line">    bitmapInfo = kCGBitmapByteOrder32Big | kCGImageAlphaNoneSkipLast;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bitmapInfo = kCGBitmapByteOrder32Big | kCGImageAlphaPremultipliedLast;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数意思很简单，由于没有数据，对于RGBA可以自动计算bytesPerRow</span></span><br><span class="line"><span class="built_in">CGContextRef</span> canvas = <span class="built_in">CGBitmapContextCreate</span>(<span class="literal">NULL</span>, canvasWidth, canvasHeight, <span class="number">8</span>, <span class="number">0</span>, <span class="built_in">CGColorSpaceCreateDeviceRGB</span>(), bitmapInfo);</span><br><span class="line"><span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">CGImageRef</span> imageRef = image.CGImage;</span><br><span class="line">size_t width = <span class="built_in">CGImageGetWidth</span>(imageRef);</span><br><span class="line">size_t height = <span class="built_in">CGImageGetHeight</span>(imageRef);</span><br><span class="line"><span class="comment">// 画CGImage上去</span></span><br><span class="line"><span class="built_in">CGContextDrawImage</span>(canvas, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, width, height), imageRef);</span><br><span class="line"><span class="built_in">CGImageRef</span> newImageRef = <span class="built_in">CGBitmapContextCreateImage</span>(canvas);</span><br></pre></td></tr></table></figure>

<h3 id="4-生成上层的UIImage，清理"><a href="#4-生成上层的UIImage，清理" class="headerlink" title="4. 生成上层的UIImage，清理"></a>4. 生成上层的UIImage，清理</h3><p>有了最终的用于显示CGImage，那么我们就可以生成一个UIImage来给UI组件显示了。注意如果需要有特殊的scale，orientation处理（比如说图像可能有额外的EXIF Orientation信息），需要在这一步加上。<br>由于是C接口，需要手动清理内存，除了CGImage相关的，也需要清理第三方库自己的内存分配。对于错误提前返回的清理内存，灵活运用<code>__attribute__((cleanup))</code>，设置一个返回函数前清理的Block，可以减少犯错的可能性</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithCGImage:imageRef scale:<span class="number">1</span> orientation:<span class="built_in">UIImageOrientationUp</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各种清理，省略</span></span><br><span class="line"><span class="built_in">CGImageRelease</span>(newImageRef);</span><br><span class="line"><span class="built_in">CGContextRelease</span>(canvas);</span><br></pre></td></tr></table></figure>

<h2 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h2><p>动态图的解码过程，其实很直观的想，我们目标就是需要对所有动图帧，都拿到Bitmap，解码到CGImage和UIImage就行了。这样想的话，其实步骤就比较明确了。</p>
<p>步骤：</p>
<ol>
<li>第三方解码器生成每帧的Bitmap</li>
<li>重复静态图的2-3</li>
<li>生成动图UIImage（参考Image/IO）</li>
</ol>
<h3 id="1-第三方解码器生成每帧的Bitmap"><a href="#1-第三方解码器生成每帧的Bitmap" class="headerlink" title="1. 第三方解码器生成每帧的Bitmap"></a>1. 第三方解码器生成每帧的Bitmap</h3><p>不同解码器可能对于动图有特殊的解码过程，拿libwebp举例来说，libwebp的动图，需要用到它的demux模块，其他解码器自行参考对应的API。</p>
<p>同时，这里需要额外介绍一些概念。一般来说，动图格式的话不会直接将每帧原始的Bitmap都编码到文件中，这样得到的文件过于庞大（帧数 * 每帧Bitmap）。因此，会有Dispose Method的方式（可以参考WebP规范<a href="https://developers.google.com/speed/webp/docs/riff_container">Disposal method (D): 1 bit</a>，<a href="https://blog.ibireme.com/2015/11/02/mobile_image_benchmark/">移动端图片格式调研</a>）。简单点来说，对于动图来说，每一帧有一个参考画布，在前一帧画完以后，后一帧可以利用前一帧已画好的图像，仅仅改变前后变化的部分，从而减小整体大小。因此我们创建动图时，需要准备好一个CGBitmapContext当作画布，根据Disposal Method（如果为None，不清空canvas；如果为Background，清空为Background Color，一般就是直接清空成透明）</p>
<p>有了所有帧的Bitmap后，转成CGImage，UIImage，最后生成动图UIImage，这个在系列前篇已经介绍过了，不再赘述</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)decodeWebP &#123;</span><br><span class="line">	<span class="comment">// 前期准备代码，直接略过，假设已经创建好canvas</span></span><br><span class="line">	WebPDemuxer *demuxer;</span><br><span class="line">	WebPIterator iter;</span><br><span class="line">	<span class="keyword">if</span> (!WebPDemuxGetFrame(demuxer, <span class="number">1</span>, &amp;iter)) &#123;</span><br><span class="line">	    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	    </span><br><span class="line">	<span class="built_in">NSMutableArray</span>&lt;<span class="built_in">UIImage</span> *&gt; *images = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">	<span class="keyword">double</span> durations[frameCount];</span><br><span class="line">	    </span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">	    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">	        <span class="built_in">UIImage</span> *image = [<span class="keyword">self</span> drawnWebpImageWithCanvas:canvas iterator:iter];</span><br><span class="line">	        <span class="keyword">int</span> duration = iter.duration;</span><br><span class="line">	        [images addObject:image];</span><br><span class="line">	        durations[frame_num] = duration;</span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	&#125; <span class="keyword">while</span> (WebPDemuxNextFrame(&amp;iter));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 创建UIImage动图，和Image/IO的相同，这里就直接封装成方法，略过</span></span><br><span class="line">	<span class="built_in">UIImage</span> *animatedImage = [<span class="keyword">self</span> animatedImageWithImages:images durations:durations];</span><br><span class="line">	    </span><br><span class="line">	<span class="comment">// 清理……略</span></span><br><span class="line">	WebPDemuxReleaseIterator(&amp;iter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)drawnWebpImageWithCanvas:(<span class="built_in">CGContextRef</span>)canvas iterator:(WebPIterator)iter &#123;</span><br><span class="line">    <span class="comment">// 这里是调用的前面静态图绘制的方法</span></span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="keyword">self</span> rawWebpImageWithData:iter.fragment];</span><br><span class="line">    <span class="keyword">if</span> (!image) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    size_t canvasWidth = <span class="built_in">CGBitmapContextGetWidth</span>(canvas);</span><br><span class="line">    size_t canvasHeight = <span class="built_in">CGBitmapContextGetHeight</span>(canvas);</span><br><span class="line">    <span class="built_in">CGSize</span> size = <span class="built_in">CGSizeMake</span>(canvasWidth, canvasHeight);</span><br><span class="line">    <span class="built_in">CGFloat</span> tmpX = iter.x_offset;</span><br><span class="line">    <span class="built_in">CGFloat</span> tmpY = size.height - iter.height - iter.y_offset;</span><br><span class="line">    <span class="built_in">CGRect</span> imageRect = <span class="built_in">CGRectMake</span>(tmpX, tmpY, iter.width, iter.height);</span><br><span class="line">    <span class="comment">// Blend</span></span><br><span class="line">    <span class="built_in">BOOL</span> shouldBlend = iter.blend_method == WEBP_MUX_BLEND;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果BlendMode开启，该帧应当混合画画布上，否则，应该覆盖，也就是清空指定范围后再重画</span></span><br><span class="line">    <span class="keyword">if</span> (!shouldBlend) &#123;</span><br><span class="line">        <span class="built_in">CGContextClearRect</span>(canvas, imageRect);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CGContextDrawImage</span>(canvas, imageRect, image.CGImage);</span><br><span class="line">    <span class="built_in">CGImageRef</span> newImageRef = <span class="built_in">CGBitmapContextCreateImage</span>(canvas);</span><br><span class="line">    </span><br><span class="line">    image = [<span class="built_in">UIImage</span> imageWithCGImage:newImageRef];</span><br><span class="line">    <span class="built_in">CGImageRelease</span>(newImageRef);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Dispose如果是Background，表示解码下一帧需要清空画布</span></span><br><span class="line">    <span class="keyword">if</span> (iter.dispose_method == WEBP_MUX_DISPOSE_BACKGROUND) &#123;</span><br><span class="line">        <span class="built_in">CGContextClearRect</span>(canvas, imageRect);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="渐进式解码"><a href="#渐进式解码" class="headerlink" title="渐进式解码"></a>渐进式解码</h2><p>渐进式解码的概念，在系列前篇中已经介绍过了，一般来说，第三方解码器支持渐进式解码的接口都比较类似，通过提供二进制流不断进行Update，每次能够得到当前解码的部分的Bitmap，最后可以拿到完整的Bitmap。之后只需要参考静态图对应步骤即可。</p>
<p>这里还是以libwebp的接口为例，libwebp需要使用它的WebPIDecoder接口，来专门进行渐进式解码。注意，libwebp渐进式解码出来的Bitmap不会将未解码的部分自动填空，会保留随机的内存地址置，要么手动清空，要么画的时候仅仅画解码出来的高度部分。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSData</span> *data; <span class="comment">// 输入的原始图像格式的二进制数据</span></span><br><span class="line"><span class="built_in">UIImage</span> *image;</span><br><span class="line">WebPIDecoder *idec = WebPINewRGB(MODE_rgbA, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!idec) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里需要更新全部的数据，当然libwebp也有仅仅更新新增数据（非全部）的接口</span></span><br><span class="line">VP8StatusCode status = WebPIUpdate(idec, data.bytes, data.length);</span><br><span class="line"><span class="keyword">if</span> (status != VP8_STATUS_OK &amp;&amp; status != VP8_STATUS_SUSPENDED) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> last_y = <span class="number">0</span>; <span class="comment">// 已经解码出来的Bitmap数据的高度，即对应有效Bitmap的行数</span></span><br><span class="line"><span class="keyword">int</span> stride = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 然后可以拿到Bitmap数据和相应的图像信息了</span></span><br><span class="line">uint8_t *rgba = WebPIDecGetRGB(_idec, &amp;last_y, &amp;width, &amp;height, &amp;stride);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和静图解码的过程类似，构造一个DataProvider，略过</span></span><br><span class="line"><span class="built_in">CGDataProviderRef</span> provider;</span><br><span class="line"><span class="built_in">CGBitmapInfo</span> bitmapInfo = kCGBitmapByteOrder32Big | kCGImageAlphaPremultipliedLast;</span><br><span class="line">size_t components = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里说一个坑，libwebp不能保证last_y以下的数据是全空的，所以一定注意，仅仅解码last_y范围内的Bitmap</span></span><br><span class="line"><span class="built_in">CGImageRef</span> imageRef = <span class="built_in">CGImageCreate</span>(width, last_y, <span class="number">8</span>, components * <span class="number">8</span>, components * width, <span class="built_in">CGColorSpaceCreateDeviceRGB</span>(), bitmapInfo, provider, <span class="literal">NULL</span>, <span class="literal">NO</span>, kCGRenderingIntentDefault);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了能得到完整的图片高度，创建一个canvas来画图，不画的部分保持透明状态即可</span></span><br><span class="line"><span class="built_in">CGContextRef</span> canvas = <span class="built_in">CGBitmapContextCreate</span>(<span class="literal">NULL</span>, width, height, <span class="number">8</span>, <span class="number">0</span>, <span class="built_in">CGColorSpaceCreateDeviceRGB</span>(), bitmapInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅仅画last_y高度的图像（不是全部），注意CoreGraphics的坐标系统是右手系的，与UIKit的坐标相反</span></span><br><span class="line"><span class="built_in">CGContextDrawImage</span>(canvas, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, height - last_y, width, last_y), imageRef);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到CGImage</span></span><br><span class="line"><span class="built_in">CGImageRef</span> newImageRef = <span class="built_in">CGBitmapContextCreateImage</span>(canvas);</span><br><span class="line"><span class="comment">// 创建UIImage</span></span><br><span class="line">image = [[<span class="built_in">UIImage</span> alloc] initWithCGImage:newImageRef];</span><br><span class="line"><span class="comment">// 各种清理，省略</span></span><br></pre></td></tr></table></figure>

<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>编码过程其实比解码过程要简单得多，因为实际上，我们可以通过自带的接口，直接拿到当前UIImage的Bitmap数据，因此只要将Bitmap交给第三方编码库来进行编码，最后输出数据即可。</p>
<h2 id="静态图-1"><a href="#静态图-1" class="headerlink" title="静态图"></a>静态图</h2><p>静态图的过程其实就可以直接分为两步：</p>
<ol>
<li>UIImage获取Bitmap</li>
<li>调用编码器进行编码</li>
</ol>
<h3 id="1-UIImage获取Bitmap"><a href="#1-UIImage获取Bitmap" class="headerlink" title="1. UIImage获取Bitmap"></a>1. UIImage获取Bitmap</h3><p>UIImage本身能够直接通过方法拿到对应的CGImage，这样只需要调用<code>CGImageGetDataProvider</code>就可以拿到对应的Bitmap数据的DataProvider了，直接上代码吧。</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *image;</span><br><span class="line"><span class="built_in">NSData</span> *webpData; <span class="comment">// Bitmap数据的容器</span></span><br><span class="line"><span class="built_in">CGImageRef</span> imageRef = image.CGImage;</span><br><span class="line">    </span><br><span class="line">size_t width = <span class="built_in">CGImageGetWidth</span>(imageRef);</span><br><span class="line">size_t height = <span class="built_in">CGImageGetHeight</span>(imageRef);    </span><br><span class="line">size_t bytesPerRow = <span class="built_in">CGImageGetBytesPerRow</span>(imageRef); <span class="comment">// 大部分编码器需要知道bytesPerRow，或者叫做stride</span></span><br><span class="line"><span class="built_in">CGDataProviderRef</span> dataProvider = <span class="built_in">CGImageGetDataProvider</span>(imageRef);</span><br><span class="line"><span class="built_in">CFDataRef</span> dataRef = <span class="built_in">CGDataProviderCopyData</span>(dataProvider);</span><br><span class="line">uint8_t *rgba = (uint8_t *)<span class="built_in">CFDataGetBytePtr</span>(dataRef);</span><br></pre></td></tr></table></figure>

<h3 id="2-调用编码器进行编码"><a href="#2-调用编码器进行编码" class="headerlink" title="2. 调用编码器进行编码"></a>2. 调用编码器进行编码</h3><p>我们还是以libwebp来对WebP进行编码，libwebp对于静态图片的编码非常简单（动态图片需要调用另一套mux的API，在动图章节讲）</p>
<p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">uint8_t *data = <span class="literal">NULL</span>; <span class="comment">//编码输出的二进制数据</span></span><br><span class="line"><span class="keyword">float</span> quality = <span class="number">100.0</span>; <span class="comment">// libwebp可以选择编码质量，影响输出文件大小和编码速度</span></span><br><span class="line">size_t size = WebPEncodeRGBA(rgba, (<span class="keyword">int</span>)width, (<span class="keyword">int</span>)height, (<span class="keyword">int</span>)bytesPerRow, quality, &amp;data);</span><br><span class="line"><span class="built_in">CFRelease</span>(dataRef); <span class="comment">// 编码后清理Bitmap数据</span></span><br><span class="line">rgba = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (size) &#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">    webpData = [<span class="built_in">NSData</span> dataWithBytes:data length:size];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (data) &#123;</span><br><span class="line">    WebPFree(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态图-1"><a href="#动态图-1" class="headerlink" title="动态图"></a>动态图</h2><p>对于动态图来说，也就是将多帧的Bitmap输入到编码器即可。对于libwebp的动态图编码，需要利用到它的mux模块，它能够将多个编码成WebP的二进制流，最后mux合并一次，最终得到了动态WebP。因此我们需要利用之前的静态图编码的步骤，只需要依次遍历取图并编码，最后使用mux处理即可。</p>
<p>步骤：</p>
<ol>
<li>遍历每帧Bitmap，编码</li>
</ol>
<h3 id="1-遍历每帧Bitmap，编码"><a href="#1-遍历每帧Bitmap，编码" class="headerlink" title="1. 遍历每帧Bitmap，编码"></a>1. 遍历每帧Bitmap，编码</h3><p>示例代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSData</span> *data;</span><br><span class="line"><span class="built_in">NSArray</span>&lt;<span class="built_in">UIImgae</span> *&gt; *images;</span><br><span class="line"><span class="keyword">double</span> durations[frameCount];</span><br><span class="line"><span class="keyword">int</span> loopCount;</span><br><span class="line"><span class="comment">// 创建mux</span></span><br><span class="line">WebPMux *mux = WebPMuxNew();</span><br><span class="line"><span class="keyword">if</span> (!mux) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历带编码的每帧</span></span><br><span class="line"><span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; framesCount; i++) &#123;</span><br><span class="line">    <span class="built_in">NSData</span> *webpData = [<span class="keyword">self</span> encodedWebpDataWithImage:images[i]]; <span class="comment">// 单帧编码后数据</span></span><br><span class="line">    <span class="keyword">int</span> duration = (<span class="keyword">int</span>)durations[i] * <span class="number">1000</span>; <span class="comment">// 单帧持续时长</span></span><br><span class="line">    <span class="comment">// 设置WebP每帧属性，包括Data，Blend，Disposal等</span></span><br><span class="line">    WebPMuxFrameInfo frame = &#123;.bitstream.bytes = webpData.bytes <span class="comment">//省略&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (WebPMuxPushFrame(mux, &amp;frame, <span class="number">0</span>) != WEBP_MUX_OK) &#123;</span><br><span class="line">        WebPMuxDelete(mux);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置动图本身的属性</span></span><br><span class="line">WebPMuxAnimParams params;</span><br><span class="line">params.bgcolor = <span class="number">0</span>, params.loop_count = loopCount;</span><br><span class="line">WebPMuxSetAnimationParams(mux, &amp;params);</span><br><span class="line"></span><br><span class="line">WebPData outputData;</span><br><span class="line"><span class="comment">// 最后进行编码，拿到输出的二进制</span></span><br><span class="line">WebPMuxError error = WebPMuxAssemble(mux, &amp;outputData);</span><br><span class="line">WebPMuxDelete(mux);</span><br><span class="line"><span class="keyword">if</span> (error != WEBP_MUX_OK) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line">data = [<span class="built_in">NSData</span> dataWithBytes:outputData.bytes length:outputData.size];</span><br><span class="line">WebPDataClear(&amp;outputData);</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第三方编解码其实相对于Image/IO来说，主要难度其实在于需要获取的Bitmap。开发者需要一点基本的图像知识，再者就是要能会用第三方编解码器的接口（一般来说第三方编解码器就是C或者C++写的，与OC和Swift交互也非常方便，至少不用像Java JNI那样调用）。之后只要按照通用的步骤，去编码和解码即可。</p>
<p>到这里的话，一般的大部分格式的编解码就基本没有问题了。当然，关于进阶的方面，比如图像的编解码性能优化，进阶的图像处理（Bitmap的几何变化，Alpha合成，位数转换等等）这就需要用到更低层的库vImage了，会在之后的系列教程中进行介绍。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS端矢量图解决方案汇总（SVG篇）</title>
    <url>/2020/03/30/iOS%E7%AB%AF%E7%9F%A2%E9%87%8F%E5%9B%BE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%B1%87%E6%80%BB%EF%BC%88SVG%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<h1 id="iOS端矢量图解决方案汇总（SVG篇）"><a href="#iOS端矢量图解决方案汇总（SVG篇）" class="headerlink" title="iOS端矢量图解决方案汇总（SVG篇）"></a>iOS端矢量图解决方案汇总（SVG篇）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://en.wikipedia.org/wiki/Vector_graphics">矢量图</a>，指的是通过一系列数学描述，能够进行无损级别的变化和缩放的一种图像。相比于标量图（如JPEG等标量图压缩格式），能够在绘制时进行任意大小伸缩而不产生模糊，甚至能够实现动态着色，动画等等一系列交互。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2020/03/30/intro_raster_to_vector.png" alt="intro_raster_to_vecto"></p>
<p>在当今移动端设备尺寸越来越复杂，各种操作系统级别的夜间主题（或者Dark Mode）越来越提倡的场景下，如果依旧使用标量图，我们需要针对不同的屏幕大小（如2x，3x），和对应主题场景（Light/Dark），提供NxM数量级的标量图，对于App大小开销是很大的。因此，使用矢量图是一个非常有效的解决方案。这个系列文章，就是主要侧重讲解iOS端上的矢量图解决方案。</p>
<p>第一章是关于<a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</a>及其相应衍生方案的解决方案，后续会有其他矢量图相关的PDF章节，Lottie等。他们各自有不同的细节场景区分和优缺点。</p>
<p>SVG作为目前在Web上最流行的矢量格式，在iOS端的支持可以说是一言难尽。在这里，我从各个方向上总结了截至目前已有的实现（公开的方案，企业内部实现无从得知），方便对比选择最适合自己场景的选择。</p>
<h2 id="Symbol-Image"><a href="#Symbol-Image" class="headerlink" title="Symbol Image"></a>Symbol Image</h2><p><a href="https://developer.apple.com/videos/play/wwdc2019/206/">Symbol Image</a>，是Apple在WWDC 2019和iOS 13上提供的矢量图解析方案。</p>
<p>之所以名称叫做Symbol Image，源自于这个技术方案的实现细节，它最早诞生于SVG字体规范：<a href="https://helpx.adobe.com/fonts/using/ot-svg-color-fonts.html">OpenType-SVG</a>。这个规范是Adobe提出的，并且得到了包括Microsoft在内的多家公司支持。Apple自己的CoreText字体框架，其实早早就在<a href="https://developer.apple.com/documentation/coretext/1524658-anonymous/kctfonttablesvg?language=objc">iOS 11时代</a>内部支持了SVG类型的font table。</p>
<h3 id="制作Symbol-Image"><a href="#制作Symbol-Image" class="headerlink" title="制作Symbol Image"></a>制作Symbol Image</h3><p>Symbol Image的整体API设计，其实不像是图像，更像是一种字体（和Icon Font类似）。</p>
<p>对于同一个Symbol Image，它可以看作是一个SVG Path的集合。前面提到，Symbol Image基于OpenType-SVG字体，对于字体来说，我们都知道字重的概念，用来决定渲染时候的线条粗细程度。</p>
<p>因此Symbol Image也有9个字重：Ultralight，Thin，Light，Regular，Medium，Semibold，Bold，Heavy，Black。与此同时，Symbol Image对每一个字重，支持了3种大小，分别是Small，Medium和Large。这也就是说，一个Symbol Image最多可以有27种大小字重的样式选择。</p>
<p>一般来说，从头构建一个Symbol Image会非常复杂，Apple推荐的方式，是通过使用<a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">SF Symbols App</a>，来导出一个SVG模版，再通过Sketch来进行图层编辑。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2020/03/30/Sketch2.png" alt="Sketch2"></p>
<p>从原始的SVG数据来看，每一个Symbol Image包含的所有样式都是一个单独的Path节点，对应了图标的绘制。如果要新建一个Symbol Image，需要完全删除Path节点，重新绘制矢量路径。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">width</span>=<span class="string">&quot;3300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;2200&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--glyph: &quot;uni100665.medium&quot;, point size: 100.000000, font version: &quot;Version 15.0d7e11&quot;, template writer version: &quot;5&quot;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;Notes&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;Guides&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;H-reference&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#27AAE1;stroke:none;&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;matrix(1 0 0 1 339 696)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 54.9316 0 L 57.666 0 L 30.5664 -70.459 L 28.0762 -70.459 L 0.976562 0 L 3.66211 0 L 12.9395 -24.4629 L 45.7031 -24.4629 Z M 29.1992 -67.0898 L 29.4434 -67.0898 L 44.8242 -26.709 L 13.8184 -26.709 Z&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;Symbols&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;Medium-M&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;matrix(1 0 0 1 1682.22 1126)&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 64.3555 -18.6035 C 67.8223 -18.6035 69.9219 -20.752 70.0195 -24.3164 C 70.166 -40.2832 70.5078 -59.7656 70.6543 -75.1953 C 70.6543 -78.7598 67.9688 -81.3477 64.3555 -81.3477 C 60.6934 -81.3477 58.0078 -78.7598 58.0078 -75.1953 C 58.1543 -59.7656 58.4961 -40.2832 58.6914 -24.3164 C 58.7891 -20.752 60.8887 -18.6035 64.3555 -18.6035 Z M 17.1875 -41.0645 C 18.1641 -40.0391 19.7266 -40.0879 20.7031 -41.1621 C 29.2969 -50.2441 39.9414 -56.0547 51.8066 -58.3984 L 51.6113 -73.3398 C 34.8145 -70.4102 19.5801 -61.7676 10.498 -50.7812 C 9.76562 -49.9023 9.76562 -48.6816 10.6445 -47.7539 Z M 108.057 -41.1133 C 108.984 -40.1367 110.498 -40.1367 111.523 -41.2109 L 117.969 -47.7539 C 118.896 -48.6816 118.896 -49.9023 118.164 -50.7812 C 108.984 -61.6699 93.7988 -70.3613 77.0508 -73.291 L 76.9043 -58.3496 C 88.7695 -56.0059 99.3164 -50.0488 108.057 -41.1133 Z M 36.6699 -21.5332 C 37.793 -20.4102 39.2578 -20.5078 40.2832 -21.7285 C 43.457 -25.1465 47.7051 -28.0273 52.3926 -29.7852 L 51.9531 -45.4102 C 42.4805 -43.0664 34.375 -37.9883 29.1992 -31.8359 C 28.3691 -30.8594 28.4668 -29.6875 29.3457 -28.8086 Z M 88.5254 -21.5332 C 89.5508 -20.459 90.8691 -20.5078 91.9922 -21.582 L 99.2676 -28.8086 C 100.195 -29.6875 100.293 -30.8594 99.4629 -31.8359 C 94.2871 -37.9395 86.1816 -43.0176 76.709 -45.4102 L 76.3184 -29.6875 C 81.0547 -27.8809 85.3516 -24.9512 88.5254 -21.5332 Z M 64.3555 6.25 C 69.043 6.25 72.8516 2.53906 72.8516 -2.09961 C 72.8516 -6.73828 69.043 -10.4492 64.3555 -10.4492 C 59.668 -10.4492 55.8105 -6.73828 55.8105 -2.09961 C 55.8105 2.53906 59.668 6.25 64.3555 6.25 Z&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="导入Symbol-Image"><a href="#导入Symbol-Image" class="headerlink" title="导入Symbol Image"></a>导入Symbol Image</h3><p>导入Symbol Image的方式非常简单，你只需要将制作好的Symbol Image，向Xcode的Asset Catalog窗口拖动，就可以集成。Xcode可以会展示对应的预览效果。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2020/03/30/%E6%88%AA%E5%B1%8F2020-03-30%E4%B8%8B%E5%8D%886.08.56.png" alt="截屏2020-03-30下午6.08.56"></p>
<p>另外，实际上产生的文件夹后缀为<code>.symbolset</code>，这个不同于普通的Asset Image（后缀名<code>.imageset</code>），也就意味着你可以同时引入一个同名的Symbol Image和普通Image。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2020/03/30/%E6%88%AA%E5%B1%8F2020-03-30%E4%B8%8B%E5%8D%886.09.18.png" alt="截屏2020-03-30下午6.09.18"></p>
<h3 id="使用Symbol-Image"><a href="#使用Symbol-Image" class="headerlink" title="使用Symbol Image"></a>使用Symbol Image</h3><p>对于iOS 13系统提供的自带Symbol Image，UIKit提供了<a href="https://developer.apple.com/documentation/uikit/uiimage/3294233-init">init(systemName:)</a>方法来获取，对于App自行提供的Symbol Image，我们使用<a href="https://developer.apple.com/documentation/uikit/uiimage/1624146-init">init(named:)</a>方法。</p>
<p>注意，你可以同时包含一个Symbol Image和普通的Asset Image，共享一个Name。这样设计的好处，在WWDC上有介绍，是为了兼容iOS 12等低系统版本，在iOS 13上，Symbol Image优先级永远高于普通Asset Image，在iOS 12会自动fallback。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> imageView <span class="operator">=</span> <span class="type">UIImageView</span>()</span><br><span class="line"><span class="keyword">let</span> symbolImage <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;my.symbol.image&quot;</span>)</span><br><span class="line"><span class="comment">// 默认配置下，这个symbol image是template的，意味着他不会含有颜色，颜色由UIView级别tintColor决定</span></span><br><span class="line">imageView.image <span class="operator">=</span> symbolImage</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果确定要获取系统Symbol Image</span></span><br><span class="line"><span class="keyword">let</span> systemSymbolImage <span class="operator">=</span> <span class="type">UIImage</span>(systemName: <span class="string">&quot;wifi.exclamationmark&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要指定颜色</span></span><br><span class="line"><span class="keyword">let</span> redSymbolImage <span class="operator">=</span> symbolImage.withTintColor(.red, renderingMode: .alwaysOrigin)</span><br><span class="line">imageView.image <span class="operator">=</span> redSymbolImage</span><br></pre></td></tr></table></figure>

<p>对于Symbol Image来说，我们可以指定在运行时需要的字重</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> regularSymbolImage <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;my.symbol.image&quot;</span>)</span><br><span class="line"><span class="comment">// 指定你想要的字号，字重，这里是18号，Bold 字重，Large 大小</span></span><br><span class="line"><span class="keyword">let</span> symbolConfiguration <span class="operator">=</span> <span class="type">UImage</span>.<span class="type">SymbolConfiguration</span>(pointSize: <span class="number">18</span>, weight: .large, scale: .large)</span><br><span class="line"><span class="keyword">let</span> boldSymbolImage <span class="operator">=</span> regularSymbolImage.applyingSymbolConfiguration(symbolConfiguration)</span><br><span class="line">imageView.image <span class="operator">=</span> boldSymbolImage</span><br></pre></td></tr></table></figure>

<p>另外，我们还可以配合AttributedString使用，只要使用TextAttachment传入对应的Symbol Image即可。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> textView <span class="operator">=</span> <span class="type">UITextView</span>()</span><br><span class="line"><span class="comment">// 可以微调Symbol Image与文字的对齐</span></span><br><span class="line"><span class="keyword">let</span> baselineSymbolImage <span class="operator">=</span> symbolImage.withBaselineOffset(fromBottom: <span class="number">1.0</span>)</span><br><span class="line"><span class="keyword">let</span> imageAttachment <span class="operator">=</span> <span class="type">NSTextAttachment</span>(image: baselineSymbolImage)</span><br><span class="line"><span class="keyword">let</span> imageString <span class="operator">=</span> <span class="type">NSAttributedString</span>(attachment: imageAttachment)</span><br><span class="line">textView.attributedText <span class="operator">=</span> imageString</span><br></pre></td></tr></table></figure>

<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p>
<ul>
<li>iOS原生支持，工具链完善</li>
<li>SwiftUI原生支持，截止目前Image能唯一使用的矢量方案（排除UIViewRepresentable）</li>
<li>支持和AttributedString无缝混合，类似Icon Font</li>
</ul>
<p>缺点：</p>
<ul>
<li>iOS 13+ Only</li>
<li>通过字体属性控制大小，取决于UI场景，做到Pixel级别的拉伸会是一个问题</li>
<li>需要单独制作Symbol Image，跨平台，Web使用痛点</li>
</ul>
<h2 id="CoreSVG"><a href="#CoreSVG" class="headerlink" title="CoreSVG"></a>CoreSVG</h2><p>CoreSVG是iOS 13支持Symbol Image的背后的底层SVG渲染引擎，使用C++编写。</p>
<p>截至目前，CoreSVG依然属于Private Framework，社区也有很多人向Apple提了反馈并建议开放出来，可能在之后的WWDC 2020我们能够得知更多的消息。</p>
<p>注意！以下方法均为使用了CoreSVG的Private API，可能随着操作系统变动会有改变，并且有审核风险，如果需要线上使用，请自行进行代码混淆等方案。</p>
<h3 id="通过Asset-Catalog使用SVG"><a href="#通过Asset-Catalog使用SVG" class="headerlink" title="通过Asset Catalog使用SVG"></a>通过Asset Catalog使用SVG</h3><p>目前Xcode不支持直接拖动SVG文件来集成到Asset Catalog，因为拖动SVG默认会当作Symbol Image处理。</p>
<p>但是我们可以通过一个取巧的方式来实现，Xcode支持PDF矢量图（从iOS 11与Xcode 9开始支持，PDF章会讲解）。因此，我们可以将SVG后缀改成PDF，然后拖动到Xcode中，最后再修改回SVG后缀名，并且同步<code>.imageset/Contents.json</code>里面的文件名即可，如下：</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2020/03/30/EUR_hKSUwAA1-65.png" alt="EUR_hKSUwAA1-65"></p>
<p>当你添加好SVG图像后，可以通过Name，以和PDF矢量图一样的方式来引入和使用，如下</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIImageView</span> *imageView = [<span class="built_in">UIImageView</span> new];</span><br><span class="line"><span class="built_in">UIImage</span> *svgImage = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;my_svg&quot;</span>];</span><br><span class="line">imageView.image = svgImage;</span><br><span class="line"><span class="comment">// 然后我们可以自由缩放ImageView的大小，会自动触发矢量绘制</span></span><br><span class="line">imageView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>从运行时来看，加入Asset Catalog的SVG矢量图的UIImage，含有对应的CGSVGDocumentRef对象，并且也包含了一个标量图的缩略图，可以供缩略图或者其他系统API来调用。并且在Xcode的Interface Builder上也会有明显的SVG标识（类似PDF）</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2020/03/30/EUU_DLPU8AM5KHD.jpeg" alt="EUU_DLPU8AM5KHD"></p>
<h3 id="加载任意SVG数据（网络）"><a href="#加载任意SVG数据（网络）" class="headerlink" title="加载任意SVG数据（网络）"></a>加载任意SVG数据（网络）</h3><p>除了能够通过Asset Catalog添加SVG图像，通过CoreSVG，我们可以在运行时去解析网络数据下载得到的SVG数据，为此能提供更为广阔的应用场景。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIImageView</span> *imageView = [<span class="built_in">UIImageView</span> new];</span><br><span class="line"><span class="built_in">NSData</span> *data;</span><br><span class="line"><span class="built_in">CGSVGDocumentRef</span> document = <span class="built_in">CGSVGDocumentCreateFromData</span>((__bridge <span class="built_in">CFDataRef</span>)data, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">UIImage</span> *svgImage = [<span class="built_in">UIImage</span> _imageWithCGSVGDocument:document];</span><br><span class="line">imageView.image = svgImage;</span><br></pre></td></tr></table></figure>

<h3 id="渲染SVG矢量图到标量图"><a href="#渲染SVG矢量图到标量图" class="headerlink" title="渲染SVG矢量图到标量图"></a>渲染SVG矢量图到标量图</h3><p>一些UIKit的视图，或者一些图像处理，对矢量图支持并没有考虑，或者是我们在做性能优化时，需要将矢量图光栅化得到对应的标量图。CoreSVG提供了和CoreGraphics的PDF类似的接口，允许你去绘制得到对应的标量图。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGSVGDocumentRef</span> document; <span class="comment">// 原始SVG Document</span></span><br><span class="line"><span class="built_in">CGSize</span> targetSize; <span class="comment">// 指定标量图大小</span></span><br><span class="line"><span class="built_in">BOOL</span> preserveAspectRatio; <span class="comment">// 是否保持宽高比</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取SVG的canvas大小，本质上是按照SVG规范，将viewPort和viewBox计算得出的</span></span><br><span class="line"><span class="built_in">CGSize</span> size = <span class="built_in">CGSVGDocumentGetCanvasSize</span>(document);</span><br><span class="line"><span class="comment">// 计算Transform</span></span><br><span class="line"><span class="built_in">CGFloat</span> xRatio = targetSize.width / size.width;</span><br><span class="line"><span class="built_in">CGFloat</span> yRatio = targetSize.height / size.height;</span><br><span class="line"><span class="built_in">CGFloat</span> xScale = preserveAspectRatio ? MIN(xRatio, yRatio) : xRatio;</span><br><span class="line"><span class="built_in">CGFloat</span> yScale = preserveAspectRatio ? MIN(xRatio, yRatio) : yRatio;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">CGAffineTransform</span> scaleTransform = <span class="built_in">CGAffineTransformMakeScale</span>(xScale, yScale);</span><br><span class="line"><span class="built_in">CGSize</span> scaledSize = <span class="built_in">CGSizeApplyAffineTransform</span>(size, scaleTransform);</span><br><span class="line"><span class="built_in">CGAffineTransform</span> translationTransform = <span class="built_in">CGAffineTransformMakeTranslation</span>(targetSize.width / <span class="number">2</span> - scaledSize.width / <span class="number">2</span>, targetSize.height / <span class="number">2</span> - scaledSize.height / <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 开始CGContext绘制</span></span><br><span class="line"><span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(targetSize, <span class="literal">NO</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line"><span class="comment">// UIKit坐标系和CG坐标系转换</span></span><br><span class="line"><span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0</span>, targetSize.height);</span><br><span class="line"><span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 应用Transform   </span></span><br><span class="line"><span class="built_in">CGContextConcatCTM</span>(context, translationTransform);</span><br><span class="line"><span class="built_in">CGContextConcatCTM</span>(context, scaleTransform);</span><br><span class="line"><span class="comment">// 绘制SVG Document</span></span><br><span class="line"><span class="built_in">CGContextDrawSVGDocument</span>(context, document);</span><br><span class="line"><span class="comment">// 获取标量图</span></span><br><span class="line">image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line"><span class="built_in">UIGraphicsEndImageContext</span>();</span><br></pre></td></tr></table></figure>

<h3 id="SVG导出"><a href="#SVG导出" class="headerlink" title="SVG导出"></a>SVG导出</h3><p>目前，CoreSVG没有提供类似于PDF的修改元素的接口，我们只能直接对SVGDocument进行导出。或许随着未来框架的开放，会有类似于目前CoreGraphics对PDF进行编辑的高级接口。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取SVG Document</span></span><br><span class="line"><span class="built_in">UIImage</span> *svgImage;</span><br><span class="line"><span class="built_in">CGSVGDocumentRef</span> document = [svgImage _CGSVGDocument];</span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:<span class="string">@&quot;/tmp/output.svg&quot;</span>];</span><br><span class="line"><span class="built_in">NSMutableData</span> *data = [<span class="built_in">NSMutableData</span> data];</span><br><span class="line"><span class="comment">// 导出到Data</span></span><br><span class="line"><span class="built_in">CGSVGDocumentWriteToData</span>(document, (__bridge <span class="built_in">CFMutableDataRef</span>)data, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 或者文件</span></span><br><span class="line"><span class="built_in">CGSVGDocumentWriteToURL</span>(document, (__bridge <span class="built_in">CFURLRef</span>)url, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p>
<ul>
<li>能够支持目前已有的大量SVG，在Android和Web端复用</li>
<li>Apple原生支持，稳定性有一定保证，并且随系统升级会持续优化</li>
<li>性能高，CoreSVG利用了CoreGraphics系统库和内部的SPI做矢量绘制，目前性能最好</li>
</ul>
<p>缺点</p>
<ul>
<li>目前是私有Framework，有审核和使用风险</li>
<li>可能存在一些SVG元素兼容问题，需要不断摸索</li>
<li>SwiftUI不支持，需要使用UIViewRepresentable</li>
</ul>
<h2 id="三方SVG库"><a href="#三方SVG库" class="headerlink" title="三方SVG库"></a>三方SVG库</h2><h3 id="SVGKit"><a href="#SVGKit" class="headerlink" title="SVGKit"></a><a href="https://github.com/SVGKit/SVGKit">SVGKit</a></h3><p>SVGKit是最早的iOS上开源SVG渲染方案，已经有8年之久。SVGKit内部支持两种渲染模式，一种是通过CPU渲染（CoreGraphics重绘制），一种是通过GPU渲染（CALayer树组合）。有着不同的兼容性和性能。</p>
<p>示例</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CPU渲染</span></span><br><span class="line">SVGKImageView *imageView = [SVGKFastImageView new];</span><br><span class="line"><span class="comment">// GPU渲染</span></span><br><span class="line">imageView = [SVGKLayeredImageView new];</span><br><span class="line">SVGKImage *svgImage = [[SVGKImage alloc] initWithData:data];</span><br><span class="line">imageView.image = svgImage;</span><br></pre></td></tr></table></figure>

<p>优点</p>
<ul>
<li>支持纯Objective-C</li>
<li>如果是支持的图像，性能相对较高（1000个级别的Path可在1秒内渲染）</li>
</ul>
<p>缺点</p>
<ul>
<li>社区不再维护，大量Issue无人跟进解决</li>
<li>不遵循语义版本号，用分支发布更新，下游无法依赖</li>
<li>部分SVG特性虽然声明支持，但存在问题，如Gradient等，缺少单测</li>
<li>不支持SVG动画</li>
</ul>
<h3 id="Macaw"><a href="#Macaw" class="headerlink" title="Macaw"></a><a href="https://github.com/exyte/Macaw">Macaw</a></h3><p>Macaw是一个矢量绘制框架，提供了非常简单的DSL语法来描述矢量路径绘制的场景。它本身不是和SVG强绑定的，但是对SVG格式提供了兼容和支持</p>
<p>示例</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node <span class="operator">=</span> <span class="keyword">try!</span> <span class="type">SVGParser</span>.parse(path: <span class="string">&quot;/path/to/svg&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> imageView <span class="operator">=</span> <span class="type">SVGView</span>()</span><br><span class="line">imageView.node <span class="operator">=</span> node</span><br></pre></td></tr></table></figure>

<p>优点</p>
<ul>
<li>目前最活跃和成熟的iOS端SVG开源框架（在GitHub上）</li>
<li>支持DSL去直接生成矢量图，修改节点等，非常强大</li>
<li>支持SVG动画（部分特性）</li>
</ul>
<p>缺点</p>
<ul>
<li>部分SVG特性特性声明不支持</li>
<li>SVG性能渲染差（相对于SVGKit），依赖大量的的CPU绘制操作（非CALayer组合），可能需要结合异步绘制框架</li>
</ul>
<h3 id="SwiftSVG"><a href="#SwiftSVG" class="headerlink" title="SwiftSVG"></a><a href="https://github.com/mchoe/SwiftSVG">SwiftSVG</a></h3><p>SwiftSVG是一个专门针对SVG Path等常见特性的矢量图解析框架，他不侧重于完整的SVG/1.1规范支持，而是保证了基本的绘制实现的正确性，并且支持导出SVG的Path到UIBezierPath</p>
<p>示例</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> svgURL <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://openclipart.org/download/181651/manhammock.svg&quot;</span>)<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> hammock <span class="operator">=</span> <span class="type">UIView</span>(SVGURL: svgURL) &#123; (svgLayer) <span class="keyword">in</span></span><br><span class="line">    svgLayer.fillColor <span class="operator">=</span> <span class="type">UIColor</span>(red:<span class="number">0.52</span>, green:<span class="number">0.16</span>, blue:<span class="number">0.32</span>, alpha:<span class="number">1.00</span>).cgColor</span><br><span class="line">    svgLayer.resizeToFit(<span class="keyword">self</span>.view.bounds)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(hammock)</span><br></pre></td></tr></table></figure>

<p>优点</p>
<ul>
<li>性能相对MacPaw较好</li>
<li>对Path，Circle等常见元素，有着良好的兼容性和完整单测，基本上只用这些特性的SVG不存在问题</li>
<li>支持导出UIBezierPath，可以用作一些描边的交互</li>
<li>提供了便携方法，能直接读取Xcode的Data Asset，URL等</li>
</ul>
<p>缺点</p>
<ul>
<li>基本上只针对Path，Circle等元素有良好的支持，其他的Gradient，Text等均不支持</li>
<li>不支持SVG动画</li>
</ul>
<h2 id="VectorDrawable"><a href="#VectorDrawable" class="headerlink" title="VectorDrawable"></a>VectorDrawable</h2><p><a href="https://developer.android.com/guide/topics/graphics/vector-drawable-resources">VectorDrawable</a>是Android平台上官方提供的一套矢量图解决方案，他是以一个类似SVG的XML表达形式，来描述矢量图的绘制方式。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/2020/03/30/%E6%88%AA%E5%B1%8F2020-03-30%E4%B8%8B%E5%8D%885.44.59.png" alt="截屏2020-03-30下午5.44.59"></p>
<p>从整体设计上看，VectorDrawable基本上是对SVG的精简和二次改造，大部分的元素在SVG中都有对应的概念，并且样式属性也一一对应。甚至，Android Studio支持直接将SVG导出成VectorDrawable文件并直接集成。</p>
<p>在iOS上平台上，Uber内部开源了一套自己在用的VectorDrawable实现：<a href="https://github.com/uber/cyborg">Cyborg</a>，通过利用CoreGraphics和CoreAnimation来渲染VectorDrawable文件。</p>
<h3 id="使用VectorDrawable渲染"><a href="#使用VectorDrawable渲染" class="headerlink" title="使用VectorDrawable渲染"></a>使用VectorDrawable渲染</h3><p>VectorDrawable提供了一个专门用于矢量图的View，并且能够制定对应的Theme（Theme是用来支持不同资源的Dark Mode切换的）。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bundle加载</span></span><br><span class="line"><span class="keyword">let</span> vectorView <span class="operator">=</span> <span class="type">VectorView</span>(theme: myTheme)</span><br><span class="line">vectorView.drawable <span class="operator">=</span> <span class="type">VectorDrawable</span>.named(<span class="string">&quot;MyDrawable&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data加载</span></span><br><span class="line">vectorView.drawable <span class="operator">=</span> <span class="type">VectorDrawable</span>.create(from: data)</span><br></pre></td></tr></table></figure>

<p>如果这个不满足，你也可以通过CALayer来做渲染，做更为细致的调节。并且VectorDrawable也提供了一些定制项（如设置tintColor）</p>
<h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p>
<ul>
<li>能够和Android端复用，并且由于可由SVG生成，意味着Web端也可复用设计资源</li>
<li>性能良好，无论官方还是Example测试，除去CoreSVG外都是最快的渲染速度</li>
</ul>
<p>缺点</p>
<ul>
<li>目前iOS实现不支持动画（AnimatedVectorDrawable）</li>
<li>部分SVG实现VectorDrawable不支持，需要设计资源修改</li>
<li>Uber内部开源，可能存在未来持续社区建设和维护成本，需要评估</li>
</ul>
<h2 id="SVG-Native"><a href="#SVG-Native" class="headerlink" title="SVG-Native"></a>SVG-Native</h2><p><a href="https://svgwg.org/specs/svg-native/">SVG-Native</a>是由Adobe主导提出的一个W3C规范，目前处于Draft Stage，不过由于Apple，Google的赞同，大概率会在2020年内通过，并且正式规范定稿。</p>
<p>SVG-Native基于目前的SVG/1.1版本，是SVG/1.1的真子集（即一个SVG-Native图一定可以被浏览器正确渲染）。</p>
<p>注：曾经W3C有一个SVG Tiny的规范，但是它是针对移动浏览器场景的，和SVG-Native解决的问题是不一样的。</p>
<p>它针对移动平台，桌面平台等非浏览器场景做了针对性定制，废弃了一些Native端非常困难实现的功能，包括：</p>
<ul>
<li>scripting: 不依赖JavaScript环境</li>
<li>animations: 不支持动画</li>
<li>filters: 不支持滤镜，部分效果（如文字滤镜）依赖实现复杂</li>
<li>masks: 不支持蒙层</li>
<li>patterns: 不支持仿制图章，Color Pattern</li>
<li>texts: 不内嵌文字，文字使用Path绘制</li>
<li>events: 点击事件等，因为没有Script交互自然不需要</li>
<li>CSS3：CSS3是一个完整布局系统，大量属性远远超过SVG的功能，如Flexbox，Media-Query，都是不必要的，只有基本的渲染属性</li>
</ul>
<p>可以看出，这些剥离的功能都是和浏览器场景完全绑定的，不适用于通用的App内渲染矢量图的用途。SVG-Native更适合桌面/移动的App，渲染器实现也会精简很多，容易单元测试，并且可供操作系统内嵌集成。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Adobe提供了一个目前Draft规范的渲染实现<a href="https://github.com/adobe/svg-native-viewer">SVG Native Viewer</a>，目前提供了多种渲染引擎的桥接，包括我们熟悉的CoreGraphics和Skia。</p>
<p>SVG-Native解码器，能够以标量图的方式，渲染SVG到一个指定大小的CGContext上，性能目前看足够快（和CoreSVG对比）。目前一般是通过重写drawRect来让View大小变化时进行重绘。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">NSRect</span>)dirtyRect &#123;</span><br><span class="line">    [<span class="keyword">super</span> drawRect:dirtyRect];</span><br><span class="line">    </span><br><span class="line">    Document* d = [[[<span class="keyword">self</span> window] windowController] document];</span><br><span class="line">    SVGNative::SVGDocument* doc = [d getSVGDocument];</span><br><span class="line">    <span class="keyword">if</span> (!doc)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">NSGraphicsContext</span>* nsGraphicsContext = [<span class="built_in">NSGraphicsContext</span> currentContext];</span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = (<span class="built_in">CGContextRef</span>) [nsGraphicsContext <span class="built_in">CGContext</span>];</span><br><span class="line">    SVGNative::<span class="built_in">CGSVGRenderer</span>* renderer = static_cast&lt;SVGNative::<span class="built_in">CGSVGRenderer</span>*&gt;(doc-&gt;Renderer());</span><br><span class="line">    <span class="built_in">CGRect</span> r(dirtyRect);</span><br><span class="line">    <span class="built_in">CGAffineTransform</span> m = &#123;<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, r.size.height&#125;;</span><br><span class="line">    <span class="built_in">CGContextConcatCTM</span>(ctx, m);</span><br><span class="line">    renderer-&gt;SetGraphicsContext(ctx);</span><br><span class="line">    doc-&gt;Render(r.size.width, r.size.height);</span><br><span class="line">    renderer-&gt;ReleaseGraphicsContext();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p>
<ul>
<li>W3C规范，可以确保未来规范的准确性，并且操作系统提供商，如Apple更容易集成</li>
<li>SVG-Native是SVG1.1的真子集，意味者可以复用到Web上</li>
<li>SVG-Native会是未来的OpenType-SVG实现，意味着Adobe字体或者设计师群体更容易接受</li>
</ul>
<p>缺点</p>
<ul>
<li>SVG-Native是SVG真子集，意味着目前的SVG设计资源，需要适配修改才可支持</li>
<li>截至目前，SVG-Native依然处于Draft阶段，稳定，推广普及需要较长时间</li>
<li>SVG-Native目前只有Adobe的解析器实现，部分特性在CoreGraphics上工作并不良好</li>
<li>目前没有看到动画的支持</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下关于SVG的相关解决方案，可以看出，没有一种Case能够涵盖所有场景，当然，这和Apple本身对矢量图支持的建设有一定关系，大部分建设依赖于开源社区。因此，通常情况下需要根据自己具体的实际需要来选择，比如：</p>
<ul>
<li>只考虑Path，Circle等矢量路径：使用SwiftSVG、Macaw即可</li>
<li>考虑和Android复用：使用VectorDrawable</li>
<li>不考虑iOS 13以下兼容：优先用Symbol Image和CoreSVG</li>
<li>考虑SVG动画：Macaw</li>
<li>面向未来：SVG-Native</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://swiftcafe.io/post/sf-symbol">解读 WWDC19 - SF Symbols 内置图标库</a></li>
<li><a href="https://www.avanderlee.com/swift/sf-symbols-guide/">SF Symbols: The benefits and how to use them guide</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG">SVG: Scalable Vector Graphics</a></li>
<li><a href="https://github.com/SDWebImage/SDWebImageSVGCoder">SDWebImageSVGCoder</a></li>
<li><a href="https://developer.android.com/guide/topics/graphics/vector-drawable-resources">Vector drawables overview</a></li>
<li><a href="https://eng.uber.com/cyborg/">Introducing Cyborg, an Open Source iOS Implementation of Android VectorDrawable</a></li>
<li><a href="https://helpx.adobe.com/fonts/using/ot-svg-color-fonts.html">OpenType-SVG color fonts</a></li>
<li><a href="https://medium.com/adobetech/svg-native-open-sourcing-svg-native-viewer-988125328a07">SVG Native: Open Sourcing SVG Native Viewer</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>Image</tag>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>一步步带你开发macOS QuickLook Plugin</title>
    <url>/2019/04/16/%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%B8%A6%E4%BD%A0%E5%BC%80%E5%8F%91macOS-QuickLook-Plugin/</url>
    <content><![CDATA[<h2 id="QuickLook简介"><a href="#QuickLook简介" class="headerlink" title="QuickLook简介"></a>QuickLook简介</h2><p>QuickLook 是macOS上提供的一项快速展示文档预览的功能，只需要按下空格就可以快速查看各种文件格式的信息，包括文本，代码，图片，音频，视频等等。</p>
<p>由于QuickLook需要支持不断扩展的文件格式，因此macOS专门提供了一个QuickLook Plugin，能让开发者对自己的文件格式提供一个自定义的完整的UI显示，不必依赖macOS系统更新来支持缤纷复杂的格式。</p>
<p>之前一段时间，出于兴趣做了一个<a href="https://aomediacodec.github.io/av1-avif/">AVIF (AV1 Image File Format)</a>的解码器封装，AV1作为现在流行的HEVC(H.265)潜在未来竞争者，有着开源，无专利限制，更高的压缩比等等优势，比起HEVC晚诞生了5年。</p>
<p>目前AVIF虽然发布了第一版规范，但是缺少相应的周边工具链的支持，在macOS上想要找一个简单的Image Viewer都没找到，调试起来异常困难，因此抽空顺便做了一个简单的Quick Look Plugin，来让自己能直接空格预览AVIF图像。</p>
<p>在做QuickLook Plugin的过程中，感觉有一些小坑需要记下来，因此这篇文章，目标就是一个简单的入门教程，讲解如何做一个QuickLook Plugin，来对自己喜爱但又不被系统支持的文件格式，提供更好的用户体验支持。</p>
<h2 id="QuickLook-Plugin工程"><a href="#QuickLook-Plugin工程" class="headerlink" title="QuickLook Plugin工程"></a>QuickLook Plugin工程</h2><p>虽然苹果提供了完善的QuickLook Plugin开发文档，参考：<a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/Quicklook_Programming_Guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005020-CH1-SW1">Quick Look Programming Guide</a></p>
<p>但是文档已经稍显过时，遇到的一个坑点也没有提示，因此这里更详细直观的介绍一下QuickLook开发的流程。</p>
<ul>
<li>新建Xcode工程，选择这个<code>Quick Look Plug-In</code>模板</li>
</ul>
<p>![屏幕快照 2019-04-16 上午11.45.25](<a href="http://dreampiggy-image.test.upcdn.net/image/2019/04/16/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7">http://dreampiggy-image.test.upcdn.net/image/2019/04/16/屏幕快照</a> 2019-04-16 上午11.45.25.png)</p>
<ul>
<li>打开你的模版，你会发现如下的结构</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Project</span><br><span class="line">- GenerateThumbnailForURL.c // 用来提供Finder缩略图的代码</span><br><span class="line">- GeneratePreviewForURL.c // 用来生成Preview用的绘制代码</span><br><span class="line">- main.c // 插件入口文件，不要修改它</span><br><span class="line">- Info.plist // 描述插件支持的UTI类型的，后面会讲</span><br></pre></td></tr></table></figure>

<p>QuickLook Plugin支持两种情形的功能展示：一个是对文件，按下空格来展示的窗口预览，在使用Option+空格进行全屏预览时候也会展示，后面都称作Preview</p>
<p>另一个是用来给Finder，来提供一个缩略图展示，这样一些图像格式，视频格式，在Finder中就能直接看到对应的缩略图，而不是一个僵硬的默认图标。后文都称作Thumbnail</p>
<p>由于QuickLook的核心，是希望对<strong>指定的文件格式</strong>，提供一个展示的UI和缩略图。那么在继续进一步写代码之前，我们必须得首先清楚自己需要的文件格式是什么，并了解UTI的概念。如果这一步骤处理的有问题，你的QuickLook Plugin是无法按预期的想法，被调用的。</p>
<h2 id="绑定文件格式和UTI"><a href="#绑定文件格式和UTI" class="headerlink" title="绑定文件格式和UTI"></a>绑定文件格式和UTI</h2><p>在继续下一步之前，你需要对你想支持的文件格式，选择一个UTI (<a href="https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html#//apple_ref/doc/uid/TP40001319">Uniform Type Identifiers</a>).</p>
<p>QuickLook，在用户按下空格开始Preview的时候，会根据每个QuickLook Plugin注册的UTI，依次去询问，直到找到第一个返回成功的，最后来判定选择哪个Plugin进行展示。</p>
<p>建立好模版之后，打开<code>Info.plist</code>，在顶层的<code>LSItemContentTypes</code>项里面，添加你的Plugin所能支持的UTI，是一个数组，会按照先后顺序匹配，一般建议只写自己能准确识别的UTI，如果是一个通配的Plugin（如通用图片预览，通用代码预览），可以使用UTI继承关系的父级(<code>public.image</code>, <code>public.source-code</code>等）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleDocumentTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleTypeRole<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>QLGenerator<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>LSItemContentTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">string</span>&gt;</span>public.avif<span class="tag">&lt;/<span class="name">string</span>&gt;</span> <span class="comment">&lt;!--Here!--&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在配置好Plugin支持的UTI之后，你还需要根据具体UTI的分配来源，来使用导入或者导出。</p>
<h3 id="找出已有的UTI"><a href="#找出已有的UTI" class="headerlink" title="找出已有的UTI"></a>找出已有的UTI</h3><p>你可以通过使用如下命令，查看一个文件对应的UTL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mdls test.avif</span><br></pre></td></tr></table></figure>

<p>查看输出的<code>kMDItemContentType</code>，如果是以<code>dyn</code>开头，表明没有被注册过，而是系统分配的一个动态UTI（用于任意不支持的类型和代码兼容，参考<a href="https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-BCGCDHIJ">Dynamic Type Identifiers</a>）</p>
<p>否则，形如<code>public.png</code>这种，标示是一个已有的UTI，可以导入来直接使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kMDItemContentType =&quot;dyn.ah62d4rv4ge80c7xmq2&quot;</span><br></pre></td></tr></table></figure>

<p>如果你是一个比较执着的人，想了解具体的每一个UTI，是由系统或者还是某个第三方App注册的，你可以使用如下命令，导出完整的系统UTI报表，来进行搜索。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -dump</span><br></pre></td></tr></table></figure>

<h3 id="UTI定义"><a href="#UTI定义" class="headerlink" title="UTI定义"></a>UTI定义</h3><p>一个UTI对应一段XML的定义，其中声明了它的类型（继承关系），UTI字符串，简介名称，扩展名，标准链接等等，基本的格式如下，很容易理解。这里是自己定义的一个AVIF格式的描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UTTypeConformsTo<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>public.image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UTTypeDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>AVIF image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UTTypeIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>public.avif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UTTypeReferenceURL<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://aomediacodec.github.io/av1-avif/<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UTTypeTagSpecification<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>public.filename-extension<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>avif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>public.mime-type<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>image/avif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="导入UTI"><a href="#导入UTI" class="headerlink" title="导入UTI"></a>导入UTI</h3><p>如果你想支持QuickLook的文件格式，已经有了系统分配的UTI，或者第三方App定义好的UTI，那么你要做的，就是导入一个UTI。</p>
<p>如果要导入UTI，你需要在<code>Info.plist</code>中，使用<code>UTImportedTypeDeclarations</code>这个项，来导入对应的UTI描述内容，值是一个数组，数组每项都是上面提到的UTI定义。</p>
<p>PS：对于导入UTI来说，你其实并不需要完整的把别人的声明抄过来，只要存在<code>UTTypeIdentifier</code>项即可，但是这样写能更清晰了解对应的格式描述。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UTImportedTypeDeclarations<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">key</span>&gt;</span>UTTypeIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">string</span>&gt;</span>public.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!--...--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="导出UTI"><a href="#导出UTI" class="headerlink" title="导出UTI"></a>导出UTI</h3><p>反之，如果你想支持的QuickLook的文件格式，不存在已有的UTI，那么你需要新增一个并导出。</p>
<p>如果要导出UTI，你需要在<code>Info.plist</code>中，使用<code>UTExportedTypeDeclarations</code>这个项，来导出对应的UTI描述内容，值是一个数组，数组每项都是上面提到的UTI定义。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UTExportedTypeDeclarations<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">key</span>&gt;</span>UTTypeIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">string</span>&gt;</span>public.avif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!--...--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="QuickLook-Plugin和导出UTI"><a href="#QuickLook-Plugin和导出UTI" class="headerlink" title="QuickLook Plugin和导出UTI"></a>QuickLook Plugin和导出UTI</h3><p>值得注意的一个坑点，macOS系统注册UTI规则，会注册当前硬盘上所有的<code>.app</code>后缀的App包，里面所含有的导出UTI，而遗憾的是，作为QuickLook Plugin，最后编译得到的产物，不是以<code>.app</code>为后缀名的，而是一个<code>.qlgenerator</code>。</p>
<p>因此，这就导致，如果你新增了一个UTI，但是你的QuickLook Plugin，没有任何宿主App来提供导出UTI，最终macOS会不认这个UTI，因此你的QuickLook Plugin不会被调用。这可能是苹果早期认为，QuickLook Plugin是和一个App绑定的（如Keynote和Keynote QuickLook插件的关系），独立存在的QuickLook Plugin并没有特别处理……</p>
<p>这个坑花费了一些时间，经过一番StackOverflow和GitHub搜索，最终找到了一个非常聪明（Trick）的解决方案：</p>
<p>构造一个临时占位的<code>Dummy.app</code>包，专门用于导出UTI，在打包的时候直接将这个<code>Dummy.app</code>拷贝到对应QuickLook Plugin的包中即可</p>
<p>我们可以使用macOS自带的<code>Script Editor.app</code>，来创建一个空壳App：</p>
<ol>
<li>打开<code>Script Editor</code>，创建一个新文档</li>
<li>直接Save，类型选择<code>Application</code>，名称随便写一个<code>Dummy.app</code>，导出</li>
<li>用文本编辑器，打开<code>Dummy.app/Contents/Info.plist</code></li>
<li>参考上文提到的UTI导出方式，添加对应的<code>UTExportedTypeDeclarations</code>项目</li>
<li>将这个<code>Dummy.app</code>，放到工程下，直接拖进来当作资源，添加到<code>Copy Bundle Resource</code>过程中</li>
</ol>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/04/16/%E6%9C%AA%E5%91%BD%E5%90%8D3.png" alt="未命名3"></p>
<p>这样一波操作以后，你最后构建得到的QuickLook Plugin，就能自带一个导出的UTI，然后被系统识别，最终被真正加载。</p>
<h2 id="用于Preview的代码绘制实现"><a href="#用于Preview的代码绘制实现" class="headerlink" title="用于Preview的代码绘制实现"></a>用于Preview的代码绘制实现</h2><p>准备好上述UTI的配置后，现在再来看看代码。首先我们侧重看一下用于提供Preview的UI的代码。</p>
<p>对应的文件是<code>GeneratePreviewForURL.c</code>。如果要使用Objective-C，或者C++代码，你可以更改对应的文件名为<code>.m</code>或者<code>.cpp</code>即可，以下示例是以Objective-C代码为主</p>
<p>入口调用函数原型为下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GeneratePreviewForURL(<span class="keyword">void</span> *thisInterface, QLPreviewRequestRef preview, CFURLRef url, CFStringRef contentTypeUTI, CFDictionaryRef options)</span><br></pre></td></tr></table></figure>

<p>其实对于大多数QuickLook插件，我们关注的基本上只有这个<code>url</code>参数，他对应的是文件的File URL，可以拿到对应被选中的文件Data Buffer。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *path = [(__bridge <span class="built_in">NSURL</span> *)url path];</span><br><span class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br></pre></td></tr></table></figure>

<p>下一步就是绘制和渲染我们的UI，QuickLook支持两种方式渲染：</p>
<ul>
<li>使用Core Graphics自定义绘制</li>
<li>使用预置支持的数据格式，动态生成Data</li>
</ul>
<h3 id="使用Core-Graphics绘制"><a href="#使用Core-Graphics绘制" class="headerlink" title="使用Core Graphics绘制"></a>使用Core Graphics绘制</h3><p>这里假设已经了解Core Graphics绘制的基本知识，如果有不了解请提前查阅苹果的教程：<a href="https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html">Quartz 2D Programming Guide</a>.</p>
<p>在拿到Data以后，该怎么绘制取决于你的QuickLook插件的功能，比如说，我想做的一个AVIF图像预览Quick Look插件，那么就希望触发解码，以拿到CGImage和Bitmap Buffer来绘制。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGImageRef</span> cgImgRef = [<span class="built_in">AVIFDecoder</span> createAVIFImageWithData:data];</span><br></pre></td></tr></table></figure>

<p>下一步，我们需要获取一个CGContext来绘制，使用<a href="https://developer.apple.com/documentation/quicklook/1402613-qlpreviewrequestcreatecontext?language=objc">QLPreviewRequestCreateContext</a>，传入入口函数透传进来的<code>preview</code>，会得到一个CGContext，来作为上下文进行绘制。同时，还需要了解绘制的大小，标题等等选项，来提供合适的渲染UI。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> width = <span class="built_in">CGImageGetWidth</span>(cgImgRef);</span><br><span class="line"><span class="built_in">CGFloat</span> height = <span class="built_in">CGImageGetHeight</span>(cgImgRef);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add image dimensions to title</span></span><br><span class="line"><span class="built_in">NSString</span> *newTitle = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@ (%d x %d)&quot;</span>, [path lastPathComponent], (<span class="keyword">int</span>)width, (<span class="keyword">int</span>)height];</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSDictionary</span> *newOpt = @&#123;(<span class="built_in">NSString</span> *)kQLPreviewPropertyDisplayNameKey : newTitle,</span><br><span class="line">    (<span class="built_in">NSString</span> *)kQLPreviewPropertyWidthKey : @(width),</span><br><span class="line">    (<span class="built_in">NSString</span> *)kQLPreviewPropertyHeightKey : @(height)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Draw image</span></span><br><span class="line"><span class="built_in">CGContextRef</span> ctx = QLPreviewRequestCreateContext(preview, <span class="built_in">CGSizeMake</span>(width, height), <span class="literal">YES</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CGContextDrawImage</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,width,height), cgImgRef);</span><br><span class="line">QLPreviewRequestFlushContext(preview, ctx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cleanup</span></span><br><span class="line"><span class="built_in">CGImageRelease</span>(cgImgRef);</span><br><span class="line"><span class="built_in">CGContextRelease</span>(ctx);</span><br></pre></td></tr></table></figure>

<p>这样基本就完成了，我们绘制了一个完整的图像到CGContext上，QuickLook会渲染到屏幕上，大小是我们指定的图像大小。</p>
<p><img src="https://raw.githubusercontent.com/dreampiggy/AVIFQuickLook/master/Screenshot/Preview.png"></p>
<p>如果你的QuickLook插件，需要有一个异步的处理和等待，同时可以实现这个取消的入口函数，来减少CPU占用，优化一下用户体验</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void CancelPreviewGeneration(void *thisInterface, QLPreviewRequestRef preview)</span><br></pre></td></tr></table></figure>

<p>比如说，对于大图像解吗，可以中断解码提前释放内存。</p>
<h3 id="使用预置类型生成数据渲染"><a href="#使用预置类型生成数据渲染" class="headerlink" title="使用预置类型生成数据渲染"></a>使用预置类型生成数据渲染</h3><p>QuickLook Preview还有另一种渲染方式，就是使用QuickLook预置的文件类型支持，来提供相应的数据。对应文档：<a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/Quicklook_Programming_Guide/Articles/QLDynamicGeneration.html#//apple_ref/doc/uid/TP40005020-CH15-SW5">Dynamically Generating Previews</a></p>
<p>我们需要使用<a href="https://developer.apple.com/documentation/quicklook/1402661-qlpreviewrequestsetdatarepresent?language=objc">QLPreviewRequestSetDataRepresentation</a>，来提供一个预置支持格式的Data Buffer给QuickLook。</p>
<p>支持的格式有：</p>
<ul>
<li>Image: 系统Image/IO解码库支持的图像压缩格式</li>
<li>PDF：PDF数据</li>
<li>HTML：WebKit支持的HTML字符串，注意如果有本地的CSS，需要使用<code>kQLPreviewPropertyAttachmentDataKey</code>带上CSS的数据</li>
<li>XML：WebKit支持的XML字符串</li>
<li>RTF：macOS支持的富文本格式（NSAttributedString可以转换的到）</li>
<li>Text：纯文本字符串</li>
<li>Movie：系统CoreVideo库支持的视频压缩格式</li>
<li>Audio：系统CoreAudio库支持的音频压缩格式</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSImage</span> *image;</span><br><span class="line"><span class="built_in">NSData</span> *imageData = [image TIFFRepresentation];</span><br><span class="line">QLPreviewRequestSetDataRepresentation(preview, (__bridge <span class="built_in">CFDataRef</span>)data, kUTTypeImage, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<h3 id="在其他App中使用Preview"><a href="#在其他App中使用Preview" class="headerlink" title="在其他App中使用Preview"></a>在其他App中使用Preview</h3><p>值得一提的是，得益于macOS完整的软件生态，你的QuickLook Plugin的Preview UI，不仅仅会出现在Finder中空格弹出的预览，甚至于Xcode和一些第三方App内置的预览（即用到了<a href="https://developer.apple.com/documentation/quartz/qlpreviewpanel">QLPreviewPanel</a>来展示UI的地方），都能触发你的插件，所以可以说是非常舒服。</p>
<p>在Xcode中缩略图如下：</p>
<p>![屏幕快照 2019-04-16 下午1.49.04](<a href="http://dreampiggy-image.test.upcdn.net/image/2019/04/16/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7">http://dreampiggy-image.test.upcdn.net/image/2019/04/16/屏幕快照</a> 2019-04-16 下午1.49.04.png)</p>
<h2 id="用于Thumbnail的代码绘制实现"><a href="#用于Thumbnail的代码绘制实现" class="headerlink" title="用于Thumbnail的代码绘制实现"></a>用于Thumbnail的代码绘制实现</h2><p>说完了关于Preview的实现代码，现在再来看看关于如何生成Finder用到的文件缩略图</p>
<p>Thumbnail也支持两种模式</p>
<ol>
<li>使用同Preview的，基于Core Graphics绘制逻辑</li>
<li>更为简单的API，使用CGImage或者Image Data</li>
</ol>
<p>第一种方式，和上文一模一样，这里就不再赘述了。我们可以看看第二种方式。我们只需要提供一个CGImage，或者一个Image/IO支持的图像格式的Image Data即可</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果是原生支持的格式，使用QLThumbnailRequestSetImageWithData</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 否则，自己解码器输出一个CGImage，然后传进去</span></span><br><span class="line"><span class="built_in">CGImageRef</span> cgImgRef;</span><br><span class="line"><span class="keyword">if</span> (cgImgRef) &#123;</span><br><span class="line">    QLThumbnailRequestSetImage(thumbnail, cgImgRef, <span class="literal">nil</span>);</span><br><span class="line">    <span class="built_in">CGImageRelease</span>(cgImgRef);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    QLThumbnailRequestSetImageAtURL(thumbnail, url, <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应在Finder中缩略图如下：</p>
<p><img src="https://raw.githubusercontent.com/dreampiggy/AVIFQuickLook/master/Screenshot/Thumbnails.png"></p>
<h2 id="调试QuickLook插件"><a href="#调试QuickLook插件" class="headerlink" title="调试QuickLook插件"></a>调试QuickLook插件</h2><p>作为一个插件，要调试起来比起一般的App要麻烦一些。不过好在macOS提供了一个专门的QuickLook调试命令，苹果也有专门文档介绍</p>
<p>我们可以使用如下的命令，以<code>public.avif</code>的UTI，对<code>test.avif</code>文件，触发一次Quick Look的Preview，来查看渲染是否正确。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qlmanage -d2 -p test.avif -c public.avif</span><br></pre></td></tr></table></figure>

<p>同时，为了能够Debug单步调试，我们使用Xcode的Debug Scheme，通过将<code>Execulable</code>改成<code>/usr/bin/qlmanage</code>，在Arguments中填写成上述的参数。</p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/04/16/%E6%9C%AA%E5%91%BD%E5%90%8D.png" alt="未命名"></p>
<p><img src="http://dreampiggy-image.test.upcdn.net/image/2019/04/16/%E6%9C%AA%E5%91%BD%E5%90%8D2.png" alt="未命名2"></p>
<p>这样，你可以给你的对应代码下上断点，当你再次点击Run来运行时，会自动触发单步调试，检查存在的问题。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体看下来，QuickLook Plugin的开发流程并没有多么复杂，其实你要做的就是用已有的Core Graphics绘制知识，并不涉及到AppKit相关概念，对于iOS开发者也能快速上手。</p>
<p>其中的坑，主要在于没有文档说明新增UTI，需要绑定一个App，而不是QuickLook Plugin本身能够声明的，对应也介绍了一个聪明的方式绕过这一限制。希望能帮助到有同样需求的人。</p>
<p>自己的AVIF QuickLook Plugin也终于完工，欢迎有兴趣的人尝试，并且给一点Star：</p>
<ul>
<li><a href="https://github.com/dreampiggy/AVIFQuickLook">AVIFQuickLook</a>：预览AVIF图像</li>
</ul>
<p>这里还有一些推荐和自己用到的QuickLook Plugin，也列举出来，能大大提升日常使用效率哦</p>
<ul>
<li><a href="https://github.com/Nyx0uf/qlImageSize">qlImageSize</a>：预览WebP和BPG图像，显示图像元信息</li>
<li><a href="https://github.com/toland/qlmarkdown">qlmarkdown</a>：预览Markdown</li>
<li><a href="https://github.com/ealeksandrov/ProvisionQL">ProvisionQL</a>：预览ipa包，以及mobileprovision证书信息</li>
</ul>
]]></content>
      <tags>
        <tag>macOS</tag>
        <tag>QuickLook</tag>
        <tag>AVIF</tag>
      </tags>
  </entry>
  <entry>
    <title>个人笔记-《高级数据结构》</title>
    <url>//ge-ren-bi-ji-gao-ji-shu-ju-jie-gou</url>
    <content><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><ol>
<li> Why and how O(log n) access time?</li>
<li> Dynamic data structure and Analysis</li>
<li> Randomized Data Structure</li>
<li> Augmented Data Structure</li>
<li> Data Structures in Distributed Environments</li>
<li> Data Structures in Frontiers of Research</li>
<li> Exam</li>
</ol>
<hr>
<h1 id="逆序对"><a href="#逆序对" class="headerlink" title="逆序对"></a>逆序对</h1><ol>
<li>随即序列 逆序对为 n(n-1)/4 <ol>
<li> 证明:全逆序序列 ,如 5,4,3,2,1，则总计4+3+2+1，共Cn(2)个，即n(n-1)/2</li>
<li> 交换相邻元素的本质：消除一对逆序</li>
</ol>
</li>
</ol>
<hr>
<h1 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h1><ol>
<li> 跳表(Skip List) </li>
<li> 说明：<a href="http://en.wikipedia.org/wiki/Skip_list">wiki</a></li>
<li> 图解：<img src="http://dl2.iteye.com/upload/attachment/0056/5664/f4c149bd-d8ea-39ff-813f-93d809c90966.jpg" alt="跳表图解"></li>
<li> 参考代码： <a href="http://m.blog.csdn.net/blog/duheaven/30970839">链接</a> <a href="http://www.spongeliu.com/63.html">链接</a></li>
</ol>
<p>查找：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">p=top</span><br><span class="line"><span class="built_in">While</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next-&gt;key &lt; x ) p=p-&gt;next;</span><br><span class="line">    <span class="built_in">If</span> (p-&gt;down == <span class="literal">NULL</span> ) <span class="keyword">return</span> p-&gt;next</span><br><span class="line">    p=p-&gt;down ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>插入：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(val x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j = n; <span class="comment">//n是当前表所拥有的level数</span></span><br><span class="line"></span><br><span class="line">    cell *p[k]; <span class="comment">//指针数组，用来保存每一层要插入元素的前驱</span></span><br><span class="line"></span><br><span class="line">    cell *p1;</span><br><span class="line">    p1 = top-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p1)&#123;</span><br><span class="line">        <span class="keyword">while</span>(p1-&gt;next-&gt;val &lt; x) p1=p1-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(j &lt;= k)&#123;</span><br><span class="line">            p[j<span class="number">-1</span>] = p1; <span class="comment">//保存每一层的指针</span></span><br><span class="line">            p1 = p1-&gt;down; <span class="comment">//指向下一层</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面的代码是将x插入到各层</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]==<span class="literal">NULL</span>)&#123;<span class="comment">//k&gt;n的情况，需要创建一个层</span></span><br><span class="line">            <span class="comment">//创建层的第一个元素，并将top指向它</span></span><br><span class="line">            cell *elementhead = (cell *) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(cell));</span><br><span class="line">            element-&gt;val = <span class="number">-1</span>;</span><br><span class="line">            element-&gt;down = top;</span><br><span class="line">            top = elementhead; </span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建最后一个元素</span></span><br><span class="line">            cell *elementtail = (cell *) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(cell));</span><br><span class="line">            elementtail-&gt;val = <span class="number">1</span>;</span><br><span class="line">            elementtail-&gt;next = elementtail-&gt;down = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在该层中创建并插入x</span></span><br><span class="line">            cell *element = (cell *) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(cell));</span><br><span class="line">            element-&gt;val = x;</span><br><span class="line">            elementhead-&gt;next = element;</span><br><span class="line">            element-&gt;next = elementtail;</span><br><span class="line">            element-&gt;down = p[i<span class="number">-1</span>]-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正常插入一个元素</span></span><br><span class="line">        cell *element = (cell *) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(cell));</span><br><span class="line">        element-&gt;val = x;</span><br><span class="line">        element-&gt;next = p[i]-&gt;next;</span><br><span class="line">        element-&gt;down = (i=<span class="number">0</span>?<span class="literal">NULL</span>:(p[i<span class="number">-1</span>]-&gt;next));</span><br><span class="line">        p[i]-&gt;next = element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(val x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = n; <span class="comment">//n表示当前总层数</span></span><br><span class="line">    cell *p, *p1;</span><br><span class="line">    p = top;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next-&gt;val &lt; x) p=p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next-&gt;val == x)&#123;<span class="comment">//假如当前层存在节点x,删除</span></span><br><span class="line">            <span class="keyword">if</span>(p = top &amp;&amp; p-&gt;next-&gt;next-&gt;val == INT_MAX)&#123;<span class="comment">//该层之存在一个节点</span></span><br><span class="line">                top = p-&gt;down;</span><br><span class="line">                <span class="built_in">free</span>(p-&gt;next-&gt;next);</span><br><span class="line">                <span class="built_in">free</span>(p-&gt;next);</span><br><span class="line">                <span class="built_in">free</span>(p);</span><br><span class="line">                p = top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p1 = p-&gt;next;</span><br><span class="line">                p-&gt;next = p1-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(p1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;down;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="一致哈希表"><a href="#一致哈希表" class="headerlink" title="一致哈希表"></a>一致哈希表</h1><ol>
<li><p> 定义：按照常用的hash算法来将对应的key哈希到一个具有2^32次方个桶的空间中，即0~(2^32)-1的数字空间中。现在我们可以将这些数字头尾相连，想象成一个闭合的环形。</p>
</li>
<li><p> 图解：<img src="http://images.51cto.com/files/uploadimg/20110408/1620170.png" alt="图解"></p>
</li>
<li><p> 代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;  </span><br><span class="line"><span class="keyword">import</span> java.util.SortedMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHash</span>&lt;<span class="title">T</span>&gt; </span>&#123;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> HashFunction hashFunction;  </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> numberOfReplicas;  </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> SortedMap&lt;Integer, T&gt; circle = <span class="keyword">new</span> TreeMap&lt;Integer, T&gt;();  </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ConsistentHash</span><span class="params">(HashFunction hashFunction, <span class="keyword">int</span> numberOfReplicas,  </span></span></span><br><span class="line"><span class="params"><span class="function">     Collection&lt;T&gt; nodes)</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">this</span>.hashFunction = hashFunction;  </span><br><span class="line">   <span class="keyword">this</span>.numberOfReplicas = numberOfReplicas;  </span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (T node : nodes) &#123;  </span><br><span class="line">     add(node);  </span><br><span class="line">   &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T node)</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfReplicas; i++) &#123;  </span><br><span class="line">     circle.put(hashFunction.hash(node.toString() + i), node);  </span><br><span class="line">   &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T node)</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfReplicas; i++) &#123;  </span><br><span class="line">     circle.remove(hashFunction.hash(node.toString() + i));  </span><br><span class="line">   &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">if</span> (circle.isEmpty()) &#123;  </span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">int</span> hash = hashFunction.hash(key);  </span><br><span class="line">   <span class="keyword">if</span> (!circle.containsKey(hash)) &#123;  </span><br><span class="line">     SortedMap&lt;Integer, T&gt; tailMap = circle.tailMap(hash);  </span><br><span class="line">     hash = tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey();  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">return</span> circle.get(hash);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li><p>目标：</p>
<ol>
<li> 可扩展，快速添加，删除结点</li>
<li> 平衡性，对数据分布（尤其是一个结点被删除后，如何快速把这个空结点分配）</li>
<li> 虚拟结点：虚拟结点分布在两个真实结点之间，加速查询，所有落在虚拟结点上的，会直接指向真实结点</li>
</ol>
</li>
</ol>
<hr>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><ol>
<li><p> 左出序：记录Ri的关键字值为Ki，Ri是左出序当且仅当Ki &lt; max{Kj}(0&lt;=j&lt;i)，既这个关键字左边的值至少有一个比它大。有几个比它大叫做几个左出序。</p>
</li>
<li><p> 插入排序，时间为O((k+1)*n)，k为左出序记录个数，故左出序越少性能越好</p>
</li>
<li><p> 冒泡排序，每次交换消除一对逆序，算法平均O(n^2)</p>
</li>
<li><p> 希尔排序，在插入排序基础上，将总记录划分为多个子记录，每个记录相隔incr个元素。算法交换非相邻元素，故可能一次交换消除多对逆序，鉴于非相邻交换时消除逆序对数量随机，在统计上计算，可知算法复杂度在O(n^1.2 ~ n^2)之间（唯一一个无法纯理论计算出复杂度的排序算法）</p>
</li>
<li><p> 希尔排序改进，数学归纳法:1) 定义hk = 2^k -1,若hk 已经排序，则h(k-1)也排序，不会打乱之前的排序（不创造新逆序，只消除逆序），可最终导致h(1)排序。 2) 如果hk 和 h(k-1)已经排序，则可知h(k)和h(k-1)的公倍数序列也排序，则h(k-2)排序的时候不用考虑该序列 3)使用递归</p>
</li>
<li><p> 快速排序改进了希尔排序，将基准记录放在一个位置，分为左右两个记录表，左边所有元素都小于右边的最小的，然后递归地对两个左右记录表进行排序（这个过程可以独立），最终合并。相对稳定，平均O(nlogn)，最差O(n^2)</p>
</li>
<li><p> 归并排序需要辅助空间O(n-l+1)，对左右任意分配的（一般是长度相同或者-1）的两表直接归并（站队归并），可以通过循环或者递归归并来进行排序。也是O(nlogn)，稳定排序</p>
</li>
<li><p> 堆排序：利用最大堆，通过插入和删除操作，得出排序序列。为了优化构建最大堆的效率，可以采用优化的adjust方法来使堆成为最大堆。</p>
</li>
<li><p>基数排序：在关键字值为0到n-1的整数范围内饰，可以直接装箱。箱子个数取决于排序元素，对于数字可以2进制的2个箱子，也可以10进制10个箱子，对于字母可以26个箱子。比如说用十进制为基数排序，按照个位，十位，百位……依次构成链表的节点（即每层链表10个节点），然后存储所有满足位数的元素。<br> 每次扫描时，首先从个位开始，按照0-9的顺序排过去，结果链表保留下来，进行下一轮。下一轮从十位开始，从结果链表选出，用十位排序，更新结果链表…………直到最终扫描结束（扫描次数就是关键字长度，比如0-999就是3次）<br> 效率为O(n)，缺点是占用空间较大</p>
</li>
</ol>
<hr>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><ol>
<li><p>二叉查找树</p>
<ol>
<li> 定义：（1）是二叉树 （2）关键字不重 （3）左孩子小于根节点，右孩子大于根节点（如果有的话）（4）左右子树也为二叉查找树（如果有的话） </li>
<li> 查找：与根节点比较，小于走左，大于走右，等于返回，找不到null</li>
<li> 插入：先查找，如果有重合的返回false，如果不重，在搜索的结束位置加入新的节点</li>
<li> 删除：先查找，找到就删除，找不到返回。</li>
</ol>
</li>
<li><p> AVL树：见书上，理解4种旋转。</p>
</li>
<li><p>红黑树：</p>
<ol>
<li>定义： <ol>
<li> 节点是红色或黑色。</li>
<li> 根是黑色。</li>
<li> 所有叶子都是黑色（叶子是NIL节点）。</li>
<li> 每个红色节点必须有两个黑色的子节点。(从每个叶子到根的所有路径上不能有两个连续的红色节点。)</li>
<li> 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</li>
</ol>
</li>
<li> 查找：因为红黑树也是二叉查找树，因此红黑树上的查找操作与普通二叉查找树上的查找操作相同。即递归下去比较，等于根节点返回，小于向左走，大于向右走。</li>
<li> 插入：(1) 查找要插入的位置，时间复杂度为：O(N) (2) 将新节点的color赋为红色 (3) 自下而上重新调整该树为红黑树</li>
<li> 删除：(1) 查找要删除位置，时间复杂度为：O(N) (2) 用删除节点后继或者节点替换该节点（只进行数据替换即可，不必调整指针，后继节点是中序遍历中紧挨着该节点的节点，即：右孩子的最左孩子节点） (3) 如果删除节点的替换节点为黑色，则需重新调整该树为红黑树</li>
<li> 旋转：复杂，保证规则不变的情况下，在插入和删除下各有3种情况</li>
<li> 应用：<code>快速搜索</code>，<code>字典</code></li>
<li> 图片：<img src="http://pic002.cnblogs.com/images/2011/330710/2011120115382993.png"></li>
</ol>
</li>
<li><p> Splay树：见书，每次插入删除可能不平衡，会造成旋转。4种旋转LL,RR,LR,RL，只需要2类旋转函数即可。</p>
</li>
<li><p>B-树：</p>
<ol>
<li>定义： B-树结构特性：一棵m阶B-树，或为空树，或为满足下列特性的m叉树：(m≥3) <ol>
<li> 根结点只有1个，关键字字数的范围[1,m-1]，分支数量范围[2,m]；</li>
<li> 除根以外的非叶结点，每个结点包含分支数范围[[m/2],m]，即关键字字数的范围是[[m/2]-1,m-1]，其中[m/2]表示取大于等于m/2的最小整数；</li>
<li> 叶结点是由非叶结点分裂而来的，所以叶结点关键字个数也满足[[m/2]-1,m-1]；</li>
<li> 所有的非终端结点包含信息：(n，A0，K1，A1，K2，A2，……，Kn，An)，其中Ki为关键字，Ai为指向子树根结点的指针，并且Ai-1所指子树中的关键字均小于Ki，而Ai所指的关键字均大于Ki（i=1，2，……，n）。n+1表示B-树的阶，n表示关键字个数；</li>
<li> 所有叶子结点都在同一层，并且指针域为空，具有如下性质： 根据B树定义，第一层为根有一个结点，至少两个分支，第二层至少2个结点，i≥3时，每一层至少有2乘以([m/2])的i-2次方个结点([m/2]表示取大于m/2的最小整数)。若m阶树中共有N个结点，那么可以推导出N必然满足N≥2*(([m/2])的h-1次方)-1 (h≥1)，因此若查找成功，则高度<code>h≤1+log[m/2](N+1)/2</code>，h也是磁盘访问次数(h≥1)，保证了查找算法的高效率。</li>
</ol>
</li>
<li> 查找：首先从根结点开始重复如下过程： 若比结点的第一个关键字小，则查找在该结点第一个指针指向的结点进行；若等于结点中某个关键字，则查找成功；若在两个关键字之间，则查找在它们之间的指针指向的结点进行；若比该结点所有关键字大，则查找在该结点最后一个指针指向的结点进行；若查找已经到达某个叶结点，则说明给定值对应的数据记录不存在，查找失败。</li>
<li>插入： <ol>
<li> B-树的生成从空树开始，逐个插入关键字而得。关键字的个数必须至少为[m/2]-1，每次插入总在最底层某个终端结点添加一个关键字，如果该结点关键字个数小于m-1则直接插入，如果发现新插入关键字后，关键字总数超过m-1个则结点需要分裂，做法如下：</li>
<li> 假设结点p中已经含有m-1个关键字，再插入一个关键字之后(插入总要保持关键字数组的大小有序，从小到大排好序)，可以将p分裂为p和p’，其中p含有的信息为[m/2]-1([m]表示大于m的最小整数)，p’含有的信息为<code>m-[m/2]</code> ([m]表示大于m的最小整数)。然后将关键字K[m/2]和指向p’的指针则一起插入到p的双亲结点中去。</li>
<li> 检查双亲结点，如果双亲结点出现(a)的情况，则回到步骤a继续执行。直到插入满足条件为止，树的深度增加过程是随着插入而自下而上生长的过程。</li>
</ol>
</li>
<li>删除： <ol>
<li> B-树删除算法分析，分以下5种情况讨论：</li>
<li> 被删除关键字所在的结点为叶结点，关键字数目大于或等于[m/2]，则只需要直接删去Ai和Ki即可；</li>
<li> 被删除关键字所在的结点为叶结点，关键字数目等于[m/2]-1，相邻的左右兄弟关键字数目至少有一方大于或者等于[m/2]，此时，如果右兄弟关键字数目大于或者等于[m/2]，则将右兄弟中最小的关键字上移到双亲结点中，然后将其中紧靠在上移关键字左边的一个关键字移动到被删除关键字所在的结点的最右边；否则，如果左兄弟的关键字数目大于或者等于[m/2]，则左兄弟中最大的关键字上移到双亲结点中，将紧靠在该上移关键字右边的一个关键字移动到被删除关键字所在的结点的最左边。这些做法类似于减法的借位运算。</li>
</ol>
<ul>
<li>  被删除关键字所在的结点为叶结点，关键字数目等于[m/2]-1，相邻的左右兄弟关键字数目均等于[m/2]-1，则从双亲借关键字补充，然后算法进入非叶结点的删除判断；</li>
<li>  被删除关键字所在的结点为非叶结点，并且关键字数目大于或等于[m/2]，则删去Ai和Ki后，原来关键字的左右孩子进行合并，若合并后的结点的关键字数目满足B-树性质，则结束，而对于关键字数目大于m-1，则进行一次分裂，将其中一个结点移到当前结点中。</li>
<li>  被删除关键字所在的结点为非叶结点，关键字数目等于[m/2]-1，相邻的左右兄弟关键字数目均等于[m/2]-1，则删除该关键字之后优先判断能否从被删除的关键字的左右孩子中寻找关键字补充，如果左右孩子的关键字数目均为[m/2]-1，如果此结点已经是树的根，则直接将被删除关键字的左右孩子结点合并即可，如果不是树的根，则从自己的双亲补充关键字，然后重复上述判断算法(d)或者(e)。</li>
<li>  应用：<code>数据库搜索</code></li>
<li>  图片：<img src="http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/4.JPG"></li>
</ul>
</li>
</ol>
</li>
<li><p>B+树：</p>
<ol>
<li>定义： B+树是应文件系统所需而出的一种B-树的变型树。一棵m阶的B+树和m阶的B-树的差异在于： <ol>
<li> 有n棵子树的结点中含有n个关键字，每个关键字不保存数据，只用来索引，所有数据都保存在叶子节点。</li>
<li> 所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</li>
<li> 所有的非终端结点可以看成是索引部分，结点中仅含其子树（根结点）中的最大（或最小）关键字。 通常在B+树上有两个头指针，一个指向根结点，一个指向关键字最小的叶子结点。</li>
</ol>
</li>
<li>查找： <ol>
<li> 从最小关键字起顺序查找；</li>
<li> 从根结点开始，进行随机查找。 在查找时，若非终端结点上的关键值等于给定值，并不终止，而是继续向下直到叶子结点。因此，在B+树中，不管查找成功与否，每次查找都是走了一条从根到叶子结点的路径。其余同B-树的查找类似。</li>
</ol>
</li>
<li>插入： m阶B树的插入操作在叶子结点上进行，假设要插入关键值a，找到叶子结点后插入a，做如下算法判别： <ol>
<li> 如果当前结点是根结点并且插入后结点关键字数目小于等于m，则算法结束；</li>
<li> 如果当前结点是非根结点并且插入后结点关键字数目小于等于m，则判断若a是新索引值时转步骤④后结束，若a不是新索引值则直接结束；</li>
<li> 如果插入后关键字数目大于m(阶数)，则结点先分裂成两个结点X和Y，并且他们各自所含的关键字个数分别为：u=大于(m+1)/2的最小整数，v=小于(m+1)/2的最大整数； 由于索引值位于结点的最左端或者最右端，不妨假设索引值位于结点最右端，有如下操作： 如果当前分裂成的X和Y结点原来所属的结点是根结点，则从X和Y中取出索引的关键字，将这两个关键字组成新的根结点，并且这个根结点指向X和Y，算法结束； 如果当前分裂成的X和Y结点原来所属的结点是非根结点，依据假设条件判断，如果a成为Y的新索引值，则转步骤④得到Y的双亲结点P，如果a不是Y结点的新索引值，则求出X和Y结点的双亲结点P；然后提取X结点中的新索引值a’，在P中插入关键字a’，从P开始，继续进行插入算法；</li>
<li> 提取结点原来的索引值b，自顶向下，先判断根是否含有b，是则需要先将b替换为a，然后从根结点开始，记录结点地址P，判断P的孩子是否含有索引值b而不含有索引值a，是则先将孩子结点中的b替换为a，然后将P的孩子的地址赋值给P，继续搜索，直到发现P的孩子中已经含有a值时，停止搜索，返回地址P。</li>
</ol>
</li>
<li> 删除：B+树的删除也仅在叶子结点进行，当叶子结点中的最大关键字被删除时，其在非终端结点中的值可以作为一个“分界关键字”存在。若因删除而使结点中关键字的个数少于m/2 （m/2结果取上界，如5/2结果为3）时，其和兄弟结点的合并过程亦和B-树类似。</li>
<li> 应用：<code>文件系统</code></li>
<li> 图片：<img src="http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/5.JPG"></li>
</ol>
</li>
<li><p>R树：多维空间中的搜索树</p>
<ol>
<li>定义： <ol>
<li> 除非它是根结点之外，所有叶子结点包含有m至M个记录索引（条目）。作为根结点的叶子结点所具有的记录个数可以少于m。通常，m=M/2。</li>
<li> 对于所有在叶子中存储的记录（条目），I是最小的可以在空间中完全覆盖这些记录所代表的点的矩形（注意：此处所说的“矩形”是可以扩展到高维空间的）。</li>
<li> 每一个非叶子结点拥有m至M个孩子结点，除非它是根结点。</li>
<li> 对于在非叶子结点上的每一个条目，i是最小的可以在空间上完全覆盖这些条目所代表的店的矩形（同性质2）。</li>
<li> 所有叶子结点都位于同一层，因此R树为平衡树。</li>
</ol>
</li>
<li> 搜索：R树的插入操作也同B树的插入操作类似。当新的数据记录需要被添加入叶子结点时，若叶子结点溢出，那么我们需要对叶子结点进行分裂操作。显然，叶子结点的插入操作会比搜索操作要复杂。插入操作需要一些辅助方法才能够完成。</li>
<li> 插入：R树的插入操作也同B树的插入操作类似。当新的数据记录需要被添加入叶子结点时，若叶子结点溢出，那么我们需要对叶子结点进行分裂操作。显然，叶子结点的插入操作会比搜索操作要复杂。插入操作需要一些辅助方法才能够完成。</li>
<li> 删除：R树的删除操作与B树的删除操作会有所不同，不过同B树一样，会涉及到压缩等操作。相信读者看完以下的伪代码之后会有所体会。R树的删除同样是比较复杂的，需要用到一些辅助函数来完成整个操作。</li>
<li> 应用：<code>空间搜索</code>，<code>地图定位</code>，<code>图片查找</code> </li>
<li> 图片：<img src="http://hi.csdn.net/attachment/201106/8/8394323_1307512429kp03.jpg"></li>
</ol>
</li>
</ol>
<hr>
<h1 id="时间-空间复杂度表"><a href="#时间-空间复杂度表" class="headerlink" title="时间/空间复杂度表"></a>时间/空间复杂度表</h1><div class="p-entry">
  <span data-rel="content"></p> <p>
    常用算法和数据结构的复杂度速查表
  </p>
  
  <p>
  </p></p> 
  
  <h2 id="searching">
    搜索
  </h2>
  
  <table border="1">
    <thead>
      <tr>
        <th>
          算法
        </th>
        
<pre><code>    &lt;th&gt;
      数据结构
    &lt;/th&gt;
    
    &lt;th colspan=&quot;2&quot;&gt;
      时间复杂度
    &lt;/th&gt;
    
    &lt;th colspan=&quot;3&quot;&gt;
      空间复杂度
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th&gt;
    &lt;/th&gt;
    
    &lt;th&gt;
    &lt;/th&gt;
    
    &lt;th&gt;
      平均
    &lt;/th&gt;
    
    &lt;th&gt;
      最差
    &lt;/th&gt;
    
    &lt;th&gt;
      最差
    &lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Depth-first_search&quot;&gt;深度优先搜索 (DFS)&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Graph of |V| vertices and |E| edges
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|E| + |V|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Breadth-first_search&quot;&gt;广度优先搜索 (BFS)&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Graph of |V| vertices and |E| edges
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|E| + |V|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_search_algorithm&quot;&gt;二分查找&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Sorted array of n elements
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Brute-force_search&quot;&gt;穷举&lt;/a&gt;查找
    &lt;/td&gt;
    
    &lt;td&gt;
      Array
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Dijkstra&#39;s_algorithm&quot;&gt;最短路径-Dijkstra，用小根堆作为优先队列&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Graph with |V| vertices and |E| edges
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O((|V| + |E|) log |V|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O((|V| + |E|) log |V|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Dijkstra&#39;s_algorithm&quot;&gt;最短路径-Dijkstra，用无序数组作为优先队列&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Graph with |V| vertices and |E| edges
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm&quot;&gt;最短路径-Bellman-Ford&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Graph with |V| vertices and |E| edges
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V||E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V||E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
</code></pre>
  </table>
  
  <h2 id="sorting">
    排序
  </h2>
  
  <table border="1">
    <thead>
      <tr>
        <th>
          算法
        </th>
        
<pre><code>    &lt;th&gt;
      数据结构
    &lt;/th&gt;
    
    &lt;th colspan=&quot;3&quot;&gt;
      时间复杂度
    &lt;/th&gt;
    
    &lt;th colspan=&quot;3&quot;&gt;
      最坏情况下的辅助空间复杂度
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th&gt;
    &lt;/th&gt;
    
    &lt;th&gt;
    &lt;/th&gt;
    
    &lt;th&gt;
      最佳
    &lt;/th&gt;
    
    &lt;th&gt;
      平均
    &lt;/th&gt;
    
    &lt;th&gt;
      最差
    &lt;/th&gt;
    
    &lt;th&gt;
      最差
    &lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort&quot;&gt;快速排序&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      数组
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Merge_sort&quot;&gt;归并排序&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      数组
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Heapsort&quot;&gt;堆排序&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      数组
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Bubble_sort&quot;&gt;冒泡排序&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      数组
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Insertion_sort&quot;&gt;插入排序&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      数组
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Selection_sort&quot;&gt;选择排序&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      数组
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Bucket_sort&quot; rel=&quot;tooltip&quot; data-original-title=&quot;Only for integers with range k&quot;&gt;桶排序&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      数组
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n+k)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n+k)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(nk)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Radix_sort&quot; rel=&quot;tooltip&quot; data-original-title=&quot;Constant number of digits &#39;k&#39;&quot;&gt;基数排序&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      数组
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(nk)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(nk)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(nk)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n+k)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
</code></pre>
  </table>
  
  <h2 id="data-structures">
    数据结构
  </h2>
  
  <table border="1">
    <thead>
      <tr>
        <th>
          数据结构
        </th>
        
<pre><code>    &lt;th colspan=&quot;8&quot;&gt;
      时间复杂度
    &lt;/th&gt;
    
    &lt;th&gt;
      空间复杂度
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th&gt;
    &lt;/th&gt;
    
    &lt;th colspan=&quot;4&quot;&gt;
      平均
    &lt;/th&gt;
    
    &lt;th colspan=&quot;4&quot;&gt;
      最差
    &lt;/th&gt;
    
    &lt;th&gt;
      最差
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th&gt;
    &lt;/th&gt;
    
    &lt;th&gt;
      索引
    &lt;/th&gt;
    
    &lt;th&gt;
      查找
    &lt;/th&gt;
    
    &lt;th&gt;
      插入
    &lt;/th&gt;
    
    &lt;th&gt;
      删除
    &lt;/th&gt;
    
    &lt;th&gt;
      索引
    &lt;/th&gt;
    
    &lt;th&gt;
      查找
    &lt;/th&gt;
    
    &lt;th&gt;
      插入
    &lt;/th&gt;
    
    &lt;th&gt;
      删除
    &lt;/th&gt;
    
    &lt;th&gt;
    &lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Array_data_structure&quot;&gt;基本数组&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Dynamic_array&quot;&gt;动态数组&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Singly_linked_list#Singly_linked_lists&quot;&gt;单链表&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Doubly_linked_list&quot;&gt;双链表&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Skip_list&quot;&gt;跳表&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n log(n))&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Hash_table&quot;&gt;哈希表&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_search_tree&quot;&gt;二叉搜索树&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;https://en.wikipedia.org/wiki/Cartesian_tree&quot;&gt;笛卡尔树&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/B_tree&quot;&gt;B-树&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Red-black_tree&quot;&gt;红黑树&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;https://en.wikipedia.org/wiki/Splay_tree&quot;&gt;伸展树&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/AVL_tree&quot;&gt;AVL 树&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
</code></pre>
  </table>
  
  <h2 id="heaps">
    堆
  </h2>
  
  <table border="1">
    <thead>
      <tr>
        <th>
          Heaps
        </th>
        
<pre><code>    &lt;th colspan=&quot;7&quot;&gt;
      时间复杂度
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;th&gt;
    &lt;/th&gt;
    
    &lt;th&gt;
      建堆
    &lt;/th&gt;
    
    &lt;th&gt;
      查找最大值
    &lt;/th&gt;
    
    &lt;th&gt;
      提取最大值
    &lt;/th&gt;
    
    &lt;th&gt;
      Increase Key
    &lt;/th&gt;
    
    &lt;th&gt;
      插入
    &lt;/th&gt;
    
    &lt;th&gt;
      删除
    &lt;/th&gt;
    
    &lt;th&gt;
      合并
    &lt;/th&gt;
    
    &lt;th&gt;
    &lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Linked_list&quot;&gt;链表（已排序）&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(m+n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Linked_list&quot;&gt;链表（未排序）&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_heap&quot;&gt;二叉堆&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(n)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(m+n)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Binomial_heap&quot;&gt;二项堆&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(log(n))&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Fibonacci_heap&quot;&gt;斐波那契堆&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;-&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code data-original-title=&quot;Amortized&quot;&gt;O(log(n))*&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code data-original-title=&quot;Amortized&quot;&gt;O(1)*&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code data-original-title=&quot;Amortized&quot;&gt;O(log(n))*&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
</code></pre>
  </table>
  
  <h2 id="graphs">
    图
  </h2>
  
  <table border="1">
    <tbody>
      <tr>
        <th>
          节点 / 边 管理
        </th>
        
<pre><code>    &lt;th&gt;
      Storage
    &lt;/th&gt;
    
    &lt;th&gt;
      Add Vertex
    &lt;/th&gt;
    
    &lt;th&gt;
      Add Edge
    &lt;/th&gt;
    
    &lt;th&gt;
      Remove Vertex
    &lt;/th&gt;
    
    &lt;th&gt;
      Remove Edge
    &lt;/th&gt;
    
    &lt;th&gt;
      Query
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Adjacency_list&quot;&gt;邻接表&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|+|E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V| + |E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Incidence_list&quot;&gt;关联表&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|+|E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|E|)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Adjacency_matrix&quot;&gt;邻接矩阵&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V|^2)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(1)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Incidence_matrix&quot;&gt;关联矩阵&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V| ⋅ |E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V| ⋅ |E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V| ⋅ |E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V| ⋅ |E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|V| ⋅ |E|)&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;code&gt;O(|E|)&lt;/code&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
</code></pre>
  </table>


  <h1>
    应用（转自博客）：
  </h1>
  
  <div id="article_content" class="article_content">
    <p style="margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,'ms song',Arial,Helvetica,sans-serif; line-height:16.7999992370605px">
      <span style="margin:0px; padding:0px; background-color:rgb(255,255,255)"><span style="font-size:14px"><strong>BST<span style="margin:0px; padding:0px; font-family:宋体">树</span></strong></span></span>
    </p>
    
<pre><code>&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;即二叉搜索树：&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       1.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;所有非叶子结点至多拥有两个儿子（&lt;/span&gt;Left&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;和&lt;/span&gt;Right&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;）；&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       2.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;所有结点存储一个关键字；&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; background-color:rgb(255,255,255)&quot;&gt;       3.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体; background-color:rgb(255,255,255)&quot;&gt;非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;如：&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;       &lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/1.JPG&quot; style=&quot;margin:0px; padding:0px; border:0px&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;       &lt;span style=&quot;color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14px; line-height:16.7999992370605px&quot;&gt; BST&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的搜索，从根结点开始，如果查询的关键字与结点的关键字相等，那么就命中；&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体; background-color:rgb(255,255,255)&quot;&gt;否则，如果查询关键字比结点关键字小，就进入左儿子；如果比结点关键字大，就进入&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体; background-color:rgb(255,255,255)&quot;&gt;右儿子；如果左儿子或右儿子的指针为空，则报告找不到相应的关键字；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;如果&lt;/span&gt;&lt;span style=&quot;color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14px; line-height:16.7999992370605px&quot;&gt;BST&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的所有非叶子结点的左右子树的结点数目均保持差不多（平衡），那么&lt;/span&gt;B&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的搜索性能逼近二分查找；但它比连续内存空间的二分查找的优点是，改变&lt;/span&gt;&lt;span style=&quot;color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14px; line-height:16.7999992370605px&quot;&gt;BST&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树结构&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体; background-color:rgb(255,255,255)&quot;&gt;（&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体; background-color:rgb(255,255,255)&quot;&gt;插入与删除结点）不需要移动大段的内存数据，甚至通常是常数开销；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;如：&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; background-color:rgb(255,255,255)&quot;&gt;      &lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/2.JPG&quot; style=&quot;margin:0px; padding:0px; border:0px&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;&lt;span style=&quot;background-color:rgb(250,247,239)&quot;&gt;   &lt;/span&gt;&lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;但&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;&lt;span style=&quot;color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14px; line-height:16.7999992370605px&quot;&gt;BST&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树在经过多次插入与删除后，有可能导致不同的结构：&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体; background-color:rgb(255,255,255)&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/31.JPG&quot; style=&quot;margin:0px; padding:0px; border:0px&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;span style=&quot;margin:0px; padding:0px; color:rgb(57,57,57); font-family:verdana,&#39;ms song&#39;,Arial,Helvetica,sans-serif; font-size:14.3999996185303px; line-height:16.7999992370605px; background-color:rgb(255,255,255)&quot;&gt;&lt;/span&gt; &lt;p align=&quot;left&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
&lt;/p&gt;

&lt;p align=&quot;left&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体; background-color:rgb(255,255,255)&quot;&gt;   右边也是一个BST&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;树，但它的搜索性能已经是线性的了；同样的关键字集合有可能导致不同的&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;left&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体; background-color:rgb(255,255,255)&quot;&gt;&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;树结构索引；所以，使用&lt;/span&gt;BST&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;树还要考虑尽可能让&lt;/span&gt;BST&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;树保持左图的结构，和避免右图的结构，也就&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;left&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体; background-color:rgb(255,255,255)&quot;&gt;&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;是所谓的“平衡”问题；&lt;/span&gt;      &lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;left&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;&lt;span style=&quot;background-color:rgb(255,255,255)&quot;&gt;       &lt;/span&gt;&lt;br /&gt; &lt;strong&gt;&lt;span style=&quot;font-size:14px&quot;&gt;AVL平衡二叉搜索树&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt; 定义：平衡二叉树或为空树,或为如下性质的二叉排序树:&lt;br /&gt;   （1）左右子树深度之差的绝对值不超过1;&lt;br /&gt;   （2）左右子树仍然为平衡二叉树.&lt;br /&gt; 平衡因子BF=左子树深度－右子树深度.&lt;br /&gt; 平衡二叉树每个结点的平衡因子只能是1，0，-1。若其绝对值超过1，则该二叉排序树就是不平衡的。&lt;br /&gt; 如图所示为平衡树和非平衡树示意图：&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;left&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt; &lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;left&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/695961/201412/132035360718832.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt; &lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
   &lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;strong&gt;&lt;span style=&quot;font-size:14px&quot;&gt;RBT 红黑树&lt;/span&gt;&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；&lt;br /&gt; 红黑是弱平衡的，用非严格的平衡来换取增删节点时候旋转次数的降低；&lt;br /&gt; 所以简单说，搜索的次数远远大于插入和删除，那么选择AVL树，如果搜索，插入删除次数几乎差不多，应该选择RB树。
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  红黑树上每个结点内含五个域，color，key，left，right，p。如果相应的指针域没有，则设为NIL。&lt;br /&gt; 一般的，红黑树，满足以下性质，即只有满足以下全部性质的树，我们才称之为红黑树：&lt;br /&gt; 1）每个结点要么是红的，要么是黑的。&lt;br /&gt; 2）根结点是黑的。&lt;br /&gt; 3）每个叶结点，即空结点（NIL）是黑的。&lt;br /&gt; 4）如果一个结点是红的，那么它的俩个儿子都是黑的。&lt;br /&gt; 5）对每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑结点。&lt;br /&gt; 下图所示，即是一颗红黑树：
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;br /&gt; &lt;br /&gt; &lt;img src=&quot;http://hi.csdn.net/attachment/201012/29/8394323_1293613306CGzE.jpg&quot; alt=&quot;&quot; width=&quot;835&quot; height=&quot;242&quot; style=&quot;word-wrap:break-word; border:none; color:rgb(51,51,51); font-family:Arial; font-size:17px; line-height:37px&quot; /&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;br /&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;br /&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
   
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;&lt;span style=&quot;font-size:14px&quot;&gt;&lt;strong&gt;B-&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;是一种平衡多路搜索树（并不是二叉的）：&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       1.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;定义任意非叶子结点最多只有&lt;/span&gt;M&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;个儿子；且&lt;/span&gt;M&gt;2&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       2.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;根结点的儿子数为&lt;/span&gt;[2, M]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       3.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;除根结点以外的非叶子结点的儿子数为&lt;/span&gt;[M/2, M]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       4.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;每个结点存放至少&lt;/span&gt;M/2-1&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;（取上整）和至多&lt;/span&gt;M-1&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;个关键字；（至少&lt;/span&gt;2&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;个关键字）&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       5.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;非叶子结点的关键字个数&lt;/span&gt;=&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;指向儿子的指针个数&lt;/span&gt;-1&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       6.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;非叶子结点的关键字：&lt;/span&gt;K[1], K[2], …, K[M-1]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;；且&lt;/span&gt;K[i] &lt; K[i+1]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       7.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;非叶子结点的指针：&lt;/span&gt;P[1], P[2], …, P[M]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;；其中&lt;/span&gt;P[1]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;指向关键字小于&lt;/span&gt;K[1]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;子树，&lt;/span&gt;P[M]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;指向关键字大于&lt;/span&gt;K[M-1]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的子树，其它&lt;/span&gt;P[i]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;指向关键字属于&lt;/span&gt;(K[i-1], K[i])&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的子树；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       8.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;所有叶子结点位于同一层；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;如：（&lt;/span&gt;&lt;strong&gt;M=3&lt;/strong&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;）&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/4.JPG&quot; style=&quot;margin:0px; padding:0px; border:0px&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;left&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       B-&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;left&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;left&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;空，或已经是叶子结点；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px; text-indent:21pt&quot;&gt;
  B-&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的特性：&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       1.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;关键字集合分布在整颗树中；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       2.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;任何一个关键字出现且只出现在一个结点中；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       3.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;搜索有可能在非叶子结点结束；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       4.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;其搜索性能等价于在关键字全集内做一次二分查找；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       5.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;自动层次控制；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;由于限制了除根结点以外的非叶子结点，至少含有&lt;/span&gt;M/2&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;个儿子，确保了结点的至少&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;利用率，其最底搜索性能为：&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/0.JPG&quot; style=&quot;margin:0px; padding:0px; border:0px&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
      
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;其中，&lt;/span&gt;M&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;为设定的非叶子结点最多子树个数，&lt;/span&gt;N&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;为关键字总数；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;所以&lt;/span&gt;B-&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的性能总是等价于二分查找（与&lt;/span&gt;M&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;值无关），也就没有&lt;/span&gt;B&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树平衡的问题；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;由于&lt;/span&gt;M/2&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;&lt;/span&gt;M/2&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的结点；删除结点时，需将两个不足&lt;/span&gt;M/2&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的兄弟结点合并；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
   
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
   
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size:14px&quot;&gt;B+&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       B+&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树是&lt;/span&gt;B-&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的变体，也是一种多路搜索树：&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       1.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;其定义基本与&lt;/span&gt;B-&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树同，除了：&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       2.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;非叶子结点的子树指针与关键字个数相同；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       3.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;非叶子结点的子树指针&lt;/span&gt;P[i]&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;，指向关键字值属于&lt;/span&gt;[K[i], K[i+1])&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的子树&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;（&lt;/span&gt;B-&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树是开区间）；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       5.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;为所有叶子结点增加一个链指针；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       6.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;所有关键字都在叶子结点出现；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;如：（&lt;/span&gt;M=3&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;）&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/5.JPG&quot; style=&quot;margin:0px; padding:0px; border:0px&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;   &lt;/span&gt;B+&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的搜索与&lt;/span&gt;B-&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树也基本相同，区别是&lt;/span&gt;B+&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树只有达到叶子结点才命中（&lt;/span&gt;B-&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树可以在&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       B+&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的特性：&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       1.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;是有序的；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       2.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;不可能在非叶子结点命中；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       3.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;（关键字）数据的数据层；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       4.&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;更适合文件索引系统；比如对已经建立索引的数据库记录，查找10&lt;=id&lt;=20，那么只要通过根节点搜索到id=10的叶节点，之后只要根据叶节点的链表找到第一个大于20的就行了，比B-树在查找10到20内的每一个时每次都从根节点出发查找提高了不少效率。&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
    
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size:14px&quot;&gt;B*&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;是&lt;/span&gt;B+&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的变体，在&lt;/span&gt;B+&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的非根和非叶子结点再增加指向兄弟的指针；&lt;/span&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot; style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://p.blog.csdn.net/images/p_blog_csdn_net/manesking/6.JPG&quot; style=&quot;margin:0px; padding:0px; border:0px&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;   &lt;/span&gt;B*&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树定义了非叶子结点关键字个数至少为&lt;/span&gt;(2/3)xM&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;，即块的最低使用率为&lt;/span&gt;2/3
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;（代替&lt;/span&gt;B+&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的&lt;/span&gt;1/2&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;）；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       B+&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的分裂：当一个结点满时，分配一个新的结点，并将原结点中&lt;/span&gt;1/2&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的数据&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;复制到新结点，最后在父结点中增加新结点的指针；&lt;/span&gt;B+&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的分裂只影响原结点和父&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       B*&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树的分裂：当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;间增加新结点，并各复制&lt;/span&gt;1/3&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;的数据到新结点，最后在父结点增加新结点的指针；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;所以，&lt;/span&gt;B*&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树分配新结点的概率比&lt;/span&gt;B+&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树要低，空间使用率更高；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
    
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;&lt;span style=&quot;margin:0px; padding:0px&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size:14px&quot;&gt;小结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       B&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树：二叉树，每个结点只存储一个关键字，等于则命中，小于走左结点，大于&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;走右结点；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       B-&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树：多路搜索树，每个结点存储&lt;/span&gt;M/2&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;到&lt;/span&gt;M&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;个关键字，非叶子结点存储指向关键&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;字范围的子结点；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       &lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       B+&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树：在&lt;/span&gt;B-&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;中出现，非叶子结点作为叶子结点的索引；&lt;/span&gt;B+&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树总是到叶子结点才命中；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px&quot;&gt;       B*&lt;/span&gt;&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树：在&lt;/span&gt;B+&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;树基础上，为非叶子结点也增加链表指针，将结点的最低利用率&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;从&lt;/span&gt;1/2&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;提高到&lt;/span&gt;2/3&lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;；&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;&lt;br /&gt; &lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size:14px&quot;&gt;B+/B*&lt;span style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px&quot;&gt;Tree&lt;/span&gt;应用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;margin:10px auto; padding-top:0px; padding-bottom:0px&quot;&gt;
  &lt;span style=&quot;margin:0px; padding:0px; font-family:宋体&quot;&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14.3999996185303px; line-height:26px&quot;&gt;
  数据库索引--&lt;span style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px&quot;&gt;索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14.3999996185303px; line-height:26px&quot;&gt;
  &lt;span style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px&quot;&gt;数据库索引--&lt;/span&gt;&lt;span style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px&quot;&gt;&lt;span style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px&quot;&gt;表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键。&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14.3999996185303px; line-height:26px&quot;&gt;
  倒排索引--也可以由&lt;span style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px&quot;&gt;B树及其变种实现但&lt;/span&gt;不一定非要&lt;span style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px&quot;&gt;B树及其变种实现&lt;/span&gt;，如&lt;span style=&quot;font-family:verdana; font-size:14.3999996185303px; line-height:17.9200000762939px&quot;&gt;lucene没有使用B树结构，因此lucene可以用二分搜索算法快速定位关键词&lt;/span&gt;&lt;span style=&quot;font-family:verdana; font-size:14.3999996185303px; line-height:17.9200000762939px&quot;&gt;。&lt;/span&gt;&lt;span style=&quot;font-family:verdana; font-size:14.3999996185303px; line-height:17.9200000762939px&quot;&gt;实现时，lucene将下面三列分别作为词典文件（Term Dictionary）、频率文件(frequencies)、位置文件 (positions)保存。其中词典文件不仅保存有每个关键词，还保留了指向频率文件和位置文件的指针，通过指针可以找到该关键字的频率信息和位置信息。 　　&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14.3999996185303px; line-height:26px&quot;&gt;
&lt;/p&gt;
</code></pre>
  </div>
 </div>

]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
